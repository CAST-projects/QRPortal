[
    {
        "id": 678,
        "name": "Never throw an exception from a Destructor",
        "href": "AIP/quality-rules/678",
        "critical": true,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 2232,
        "name": "Prefer using shared error-page elements via web.xml to better control error handling",
        "href": "AIP/quality-rules/2232",
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4696,
        "name": "Prefer using logging framework  as SLF4j instead of  'System.err' or 'System.out'",
        "href": "AIP/quality-rules/4696",
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4702,
        "name": "Ensure to not use default stream(System.Err) for printStackTrace to print throwable and its stack trace in order to protect sensitive information.",
        "href": "AIP/quality-rules/4702",
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 7788,
        "name": "Avoid empty catch blocks",
        "href": "AIP/quality-rules/7788",
        "critical": true,
        "technologyNames": [
            "C#",
            "HTML5",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7824,
        "name": "Always Subclass Exception and throw the subclassed Classes, do not throw the exception Exception.",
        "href": "AIP/quality-rules/7824",
        "critical": true,
        "technologyNames": [
            "C#",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7862,
        "name": "Ensure you catch subclass of Exception, RuntimeException or Throwable",
        "href": "AIP/quality-rules/7862",
        "critical": false,
        "technologyNames": [
            "C#",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 8000,
        "name": "Avoid 'catch-all' statement",
        "href": "AIP/quality-rules/8000",
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 1020068,
        "name": "Ensure that you are not using a break or return statement inside a finally block, to avoid dead code",
        "href": "AIP/quality-rules/1020068",
        "critical": true,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020102,
        "name": "Always use JSON.parse &amp; JSON.stringify with try/catch block because of the synchronous call(Javascript)",
        "href": "AIP/quality-rules/1020102",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020340,
        "name": "Ensure you have implemented expected $ajax callbacks",
        "href": "AIP/quality-rules/1020340",
        "critical": true,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020342,
        "name": "Ensure you have properly manage errors by using the error/fail callbacks",
        "href": "AIP/quality-rules/1020342",
        "critical": true,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020452,
        "name": "Ensure you have properly use the componentDidCatch to better manage errors",
        "href": "AIP/quality-rules/1020452",
        "critical": true,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020540,
        "name": "Prefer using $http methods 'then' and 'catch' instead of 'success' and 'error' as the latter returns original promise when you chain off of them",
        "href": "AIP/quality-rules/1020540",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020700,
        "name": "Ensure you check the returned error in Node.js callbacks",
        "href": "AIP/quality-rules/1020700",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020702,
        "name": "You should set the process.exitCode to allow the process exiting naturally rather than calling process.exit() directly.",
        "href": "AIP/quality-rules/1020702",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020802,
        "name": "Always throw all created error.",
        "href": "AIP/quality-rules/1020802",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020822,
        "name": "Ensure that you provide an error callback to the HttpClient  ubscribe method.",
        "href": "AIP/quality-rules/1020822",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020858,
        "name": "Ensure you have properly use the componentDidCatch to better manage errors",
        "href": "AIP/quality-rules/1020858",
        "critical": true,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020872,
        "name": "Always use JSON.parse and JSON.stringify with try/catch block because of the synchronous call (Typescript)",
        "href": "AIP/quality-rules/1020872",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020874,
        "name": "Ensure you check the returned error in Node.js callbacks",
        "href": "AIP/quality-rules/1020874",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020876,
        "name": "You should set the process.exitCode to allow the process exiting naturally rather than calling process.exit() directly.",
        "href": "AIP/quality-rules/1020876",
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1040030,
        "name": "Prefer not using Generic Authentication Exception Class to promote easy error handling",
        "href": "AIP/quality-rules/1040030",
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 1040032,
        "name": "Ensure not using ControllerAdvice And HandlerExceptionResolver simultaneously to avoid unexpected behavior",
        "href": "AIP/quality-rules/1040032",
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 1065026,
        "name": "Ensure that a class type exception is always be caught by reference to avoid slicing",
        "href": "AIP/quality-rules/1065026",
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 1101040,
        "name": "Ensure to handle exception in a catch block and not leave it empty",
        "href": "AIP/quality-rules/1101040",
        "critical": true,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101052,
        "name": "Ensure to use WHEN OTHERS with WHEN for exception handling to prevent unexpected behavior",
        "href": "AIP/quality-rules/1101052",
        "critical": true,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101054,
        "name": "Ensure to propagate errors to client instead of using with NULL when handling exceptions through WHEN OTHERS",
        "href": "AIP/quality-rules/1101054",
        "critical": true,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101092,
        "name": "Errors should be handled in stored procedures and functions",
        "href": "AIP/quality-rules/1101092",
        "critical": true,
        "technologyNames": [
            "SQL"
        ]
    }
]
