[
    {
        "id": 8010,
        "name": "Do not overload the ampersand, comma, logical AND or logical OR operators",
        "href": "AIP/quality-rules/8010",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 8060,
        "name": "A pointer to a base Class shall only be cast to a pointer to a derived Class by means of 'dynamic_cast'",
        "href": "AIP/quality-rules/8060",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8078,
        "name": "Casting from pointer to base Class to pointer to derived Class should be done through 'dynamic_cast' or 'static_cast'",
        "href": "AIP/quality-rules/8078",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065050,
        "name": "Ensure to separate a side effect of an expression from the sizeof method",
        "href": "AIP/quality-rules/1065050",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065062,
        "name": "Ensure that testing floating point numbers for equality is not used as is source of imprecision",
        "href": "AIP/quality-rules/1065062",
        "status": null,
        "critical": true,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065066,
        "name": "Avoid having  a method call or additional expressions in a statement using \"++\" or \"--\" operators (C/C++)",
        "href": "AIP/quality-rules/1065066",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065084,
        "name": "Ensure that you do not convert a function pointer to any other type to avoid unexpected behavior",
        "href": "AIP/quality-rules/1065084",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065086,
        "name": "Ensure that pointer types are not cast to integral types",
        "href": "AIP/quality-rules/1065086",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065092,
        "name": "Ensure to have boolean operands with boolean operators",
        "href": "AIP/quality-rules/1065092",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    }
]
