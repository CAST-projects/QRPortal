[
    {
        "id": 566,
        "name": "Avoid large Classes - too many Methods (C++)",
        "href": "AIP/quality-rules/566",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 568,
        "name": "Avoid large Classes - too many Data Members (C++)",
        "href": "AIP/quality-rules/568",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 570,
        "name": "Avoid large Interfaces - too many Methods (C++)",
        "href": "AIP/quality-rules/570",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 576,
        "name": "Avoid large Classes - too many Constructors (C++)",
        "href": "AIP/quality-rules/576",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 578,
        "name": "Avoid Classes with multiple inheritance",
        "href": "AIP/quality-rules/578",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 584,
        "name": "Avoid Classes with at least one virtual Function and without a virtual Destructor",
        "href": "AIP/quality-rules/584",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 620,
        "name": "Avoid base Classes without virtual Destructors",
        "href": "AIP/quality-rules/620",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 628,
        "name": "Avoid invocation of virtual Methods of the declared Class in a Constructor or Destructor",
        "href": "AIP/quality-rules/628",
        "status": null,
        "critical": true,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 1058,
        "name": "Avoid large Files - too many Lines of Code",
        "href": "AIP/quality-rules/1058",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1060,
        "name": "Avoid large Macros - too many Lines of Code",
        "href": "AIP/quality-rules/1060",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1078,
        "name": "Avoid undocumented Header files",
        "href": "AIP/quality-rules/1078",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1082,
        "name": "Avoid header files with a very low comment/code ratio",
        "href": "AIP/quality-rules/1082",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1092,
        "name": "Avoid undocumented Implementation files",
        "href": "AIP/quality-rules/1092",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1094,
        "name": "Avoid Implementation files with a very low comment/code ratio",
        "href": "AIP/quality-rules/1094",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 2284,
        "name": "Prefer using JSP Standard Tag Library (JSTL) instead of JSP scriptlets as easier to read and to maintain",
        "href": "AIP/quality-rules/2284",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 3148,
        "name": "An include file must contain at most one Class definition",
        "href": "AIP/quality-rules/3148",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 3550,
        "name": "Namespace naming convention - case control",
        "href": "AIP/quality-rules/3550",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3554,
        "name": "Interface naming convention - case and character set control",
        "href": "AIP/quality-rules/3554",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3558,
        "name": "Enumerations naming convention - case and character set control",
        "href": "AIP/quality-rules/3558",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3560,
        "name": "Enumeration Items naming convention - case and character set control",
        "href": "AIP/quality-rules/3560",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3562,
        "name": "Private Fields naming convention - case and character set control",
        "href": "AIP/quality-rules/3562",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3564,
        "name": "Public Fields naming convention - case and character set control",
        "href": "AIP/quality-rules/3564",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3566,
        "name": "Methods naming convention - case and character set control",
        "href": "AIP/quality-rules/3566",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3568,
        "name": "Events naming convention - case and character set control",
        "href": "AIP/quality-rules/3568",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3572,
        "name": "Controls naming convention - prefix, case and character set control",
        "href": "AIP/quality-rules/3572",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 3574,
        "name": "Properties naming convention - case and character set control",
        "href": "AIP/quality-rules/3574",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 4554,
        "name": "Ensure you review the Class design to reduce the number of Methods",
        "href": "AIP/quality-rules/4554",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4556,
        "name": "Ensure you review the Class design to reduce the number of Constructors",
        "href": "AIP/quality-rules/4556",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4558,
        "name": "Ensure that the classes have a resonable number of fields",
        "href": "AIP/quality-rules/4558",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4560,
        "name": "Ensure that the interfaces have a reasonable number of methods",
        "href": "AIP/quality-rules/4560",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4610,
        "name": "Prefer not using anonymous Classes for maintenance reason",
        "href": "AIP/quality-rules/4610",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4614,
        "name": "A clone method that is overridden in a subclass should call super.clone. Not doing so causes the subclass clone to return an object of the wrong type.",
        "href": "AIP/quality-rules/4614",
        "status": null,
        "critical": true,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4616,
        "name": "Prefer calling \"super.finalize()\" at the end of \"Object.finalize()\" implementations",
        "href": "AIP/quality-rules/4616",
        "status": null,
        "critical": true,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4708,
        "name": "Ensure to use class invocation or method call instead of dynamic instantiation known to be slower",
        "href": "AIP/quality-rules/4708",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 4716,
        "name": "Ensure that the class is implementing a reasonable number of Interfaces",
        "href": "AIP/quality-rules/4716",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 7132,
        "name": "Ensure that action mappings have few forwards to avoid managing too complex behaviors in the Action class",
        "href": "AIP/quality-rules/7132",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 7136,
        "name": "Ensure that application architecture in not too complex and move some of this logic to another conceptual layer",
        "href": "AIP/quality-rules/7136",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 7220,
        "name": "Ensure to remove unused and unnecessary Java imports",
        "href": "AIP/quality-rules/7220",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 7262,
        "name": "Avoid Namespaces with High Efferent Coupling (CE)",
        "href": "AIP/quality-rules/7262",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 7264,
        "name": "Avoid namespaces with High Afferent Coupling (CA)",
        "href": "AIP/quality-rules/7264",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 7296,
        "name": "Never define static variables in header files",
        "href": "AIP/quality-rules/7296",
        "status": null,
        "critical": true,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7340,
        "name": "Avoid Classes with Destructor not explicitly virtual whenever one of its base Class has a virtual Destructor",
        "href": "AIP/quality-rules/7340",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 7342,
        "name": "Avoid functions overriding virtual functions without having the 'virtual' keyword",
        "href": "AIP/quality-rules/7342",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 7388,
        "name": "Avoid artifacts having recursive calls",
        "href": "AIP/quality-rules/7388",
        "status": null,
        "critical": false,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 7434,
        "name": "Ensure to overrides equals() and hashCode()",
        "href": "AIP/quality-rules/7434",
        "status": null,
        "critical": true,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 7440,
        "name": "Ensure to have the exact name and signature for each method and ensure having the '@Override' annotation when you need overriding a method declared in a superclass (for JSE 5.0 or later)",
        "href": "AIP/quality-rules/7440",
        "status": null,
        "critical": true,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 7792,
        "name": "Avoid Classes with a High Number Of Children",
        "href": "AIP/quality-rules/7792",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7818,
        "name": "Ensure you have a good level of comments of your Functions",
        "href": "AIP/quality-rules/7818",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "JEE",
            "JavaScript"
        ]
    },
    {
        "id": 7836,
        "name": "Add comments into functions to explain what is their goal and how they work.",
        "href": "AIP/quality-rules/7836",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++",
            "JEE",
            "JavaScript"
        ]
    },
    {
        "id": 7838,
        "name": "Add comments into method implementation to explain what is their goal and how they work.",
        "href": "AIP/quality-rules/7838",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "C++",
            "VB.NET"
        ]
    },
    {
        "id": 7842,
        "name": "Avoid large Artifacts - too many Lines of Code",
        "href": "AIP/quality-rules/7842",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "SQL",
            "VB.NET"
        ]
    },
    {
        "id": 7844,
        "name": "Avoid undocumented Classes",
        "href": "AIP/quality-rules/7844",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "C++",
            "HTML5",
            "VB.NET"
        ]
    },
    {
        "id": 7846,
        "name": "Ensure your methods are commented enough to provide good understanding to other contributors",
        "href": "AIP/quality-rules/7846",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7918,
        "name": "Exceptions naming convention -suffix control",
        "href": "AIP/quality-rules/7918",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 7920,
        "name": "Exceptions naming convention - case and character set control",
        "href": "AIP/quality-rules/7920",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 7930,
        "name": "Avoid redeclaring and overriding Methods with different default parameter values",
        "href": "AIP/quality-rules/7930",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 7938,
        "name": "Override all overloads of a base Class virtual Method",
        "href": "AIP/quality-rules/7938",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 7966,
        "name": "Avoid includes in Header Files",
        "href": "AIP/quality-rules/7966",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8010,
        "name": "Do not overload the ampersand, comma, logical AND or logical OR operators",
        "href": "AIP/quality-rules/8010",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 8032,
        "name": "Ensure you don't use multiple break statement in 'for' loops",
        "href": "AIP/quality-rules/8032",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 8050,
        "name": "Do not hide declarations in other scopes",
        "href": "AIP/quality-rules/8050",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8058,
        "name": "A pointer to a derived Class shall only be cast implicitly to a pointer to base Class",
        "href": "AIP/quality-rules/8058",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8060,
        "name": "A pointer to a base Class shall only be cast to a pointer to a derived Class by means of 'dynamic_cast'",
        "href": "AIP/quality-rules/8060",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8062,
        "name": "An unconditional 'throw', 'return' or 'break' shall terminate every non-empty switch-clause",
        "href": "AIP/quality-rules/8062",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8070,
        "name": "Do not alter a control variable in the body of a 'for' statement",
        "href": "AIP/quality-rules/8070",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8076,
        "name": "Avoid using 'new[]', prefer 'std::vector' or 'std::array'",
        "href": "AIP/quality-rules/8076",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8078,
        "name": "Casting from pointer to base Class to pointer to derived Class should be done through 'dynamic_cast' or 'static_cast'",
        "href": "AIP/quality-rules/8078",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8148,
        "name": "Avoid artifacts having Incorrect Type Conversion or Cast",
        "href": "AIP/quality-rules/8148",
        "status": null,
        "critical": true,
        "technologyNames": [
            "C#",
            "VB.NET"
        ]
    },
    {
        "id": 1020000,
        "name": "Ensure you keep simple the design of the component/module to reduce number of independent paths",
        "href": "AIP/quality-rules/1020000",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020064,
        "name": "Ensure that there are no references to subclass in the superclass to subdue complexity of your code",
        "href": "AIP/quality-rules/1020064",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020076,
        "name": "Aggregate method parameters into an object to improve readability and maintainability of your code",
        "href": "AIP/quality-rules/1020076",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020506,
        "name": "Prefer using 'this' instead of $scope in controllers to generate views to ensure consistency and structuredness in code",
        "href": "AIP/quality-rules/1020506",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020508,
        "name": "Prefer using AngularJS wrapper service $document to maintain structuredness of code",
        "href": "AIP/quality-rules/1020508",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020510,
        "name": "Prefer using AngularJS wrapper service $window to maintain structuredness of code",
        "href": "AIP/quality-rules/1020510",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020512,
        "name": "Prefer using AngularJS wrapper service $timeout to maintain structuredness of code",
        "href": "AIP/quality-rules/1020512",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020516,
        "name": "Prefer using AngularJS wrapper service angular.isArray instead of default JS implementation to maintain structuredness of code",
        "href": "AIP/quality-rules/1020516",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020518,
        "name": "Prefer using AngularJS wrapper service angular.isDate instead of default JS implementation to maintain structuredness of code",
        "href": "AIP/quality-rules/1020518",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020520,
        "name": "Prefer using AngularJS wrapper service angular.isFunction instead of default JS implementation to maintain structuredness of code",
        "href": "AIP/quality-rules/1020520",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020522,
        "name": "Prefer using AngularJS wrapper service angular.isString instead of default JS implementation to maintain structuredness of code",
        "href": "AIP/quality-rules/1020522",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020524,
        "name": "Prefer using AngularJS wrapper service angular.isObject instead of default JS implementation to maintain structuredness of code",
        "href": "AIP/quality-rules/1020524",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020526,
        "name": "Prefer using AngularJS wrapper service angular.isNumber instead of default JS implementation to maintain structuredness of code",
        "href": "AIP/quality-rules/1020526",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020528,
        "name": "Prefer using AngularJS wrapper service angular.isRegex instead of default JS implementation to maintain structuredness of code",
        "href": "AIP/quality-rules/1020528",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020532,
        "name": "Prefer using Factory() provider recipe instead of Service() to ensure structuredness and efficiency",
        "href": "AIP/quality-rules/1020532",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020812,
        "name": "Invoking super should be done only once in constructor",
        "href": "AIP/quality-rules/1020812",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020824,
        "name": "Always ensure Superclass not knowing Subclass",
        "href": "AIP/quality-rules/1020824",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020836,
        "name": "Always prefer using modules over namespaces for structuring you code instead of exporting namespaces",
        "href": "AIP/quality-rules/1020836",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1020848,
        "name": "Always ensuure using \"pipeable\" operators which can be imported from \"rxjs/operators\" instead of \"patch\" operator",
        "href": "AIP/quality-rules/1020848",
        "status": null,
        "critical": false,
        "technologyNames": [
            "HTML5"
        ]
    },
    {
        "id": 1039046,
        "name": "Ensure using {@code} to wrap code statements",
        "href": "AIP/quality-rules/1039046",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 1039050,
        "name": "Prefer using @Override annotation to mark methods overriding or implementing a method declared in a super type to avoid unintentional errors",
        "href": "AIP/quality-rules/1039050",
        "status": null,
        "critical": false,
        "technologyNames": [
            "JEE"
        ]
    },
    {
        "id": 1065000,
        "name": "Avoid using \"continue\" statement",
        "href": "AIP/quality-rules/1065000",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065002,
        "name": "\"enum\" members other than the first one should not be explicitly initialized unless all members are explicitly initialized.",
        "href": "AIP/quality-rules/1065002",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065012,
        "name": "Avoid using 'setjmp' or 'longjmp' (C/C++)",
        "href": "AIP/quality-rules/1065012",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065028,
        "name": "Ensure that Switch statements have at least 2 case clauses",
        "href": "AIP/quality-rules/1065028",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065030,
        "name": "All if \u2026 else if constructs shall be terminated with an else clause (C/C++)",
        "href": "AIP/quality-rules/1065030",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065032,
        "name": "Ensure to declare arrays with a defined size",
        "href": "AIP/quality-rules/1065032",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065036,
        "name": "Ensure to not use //, /* within comments",
        "href": "AIP/quality-rules/1065036",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065044,
        "name": "Ensure that in global space only extern linkages, namespace and main function are present",
        "href": "AIP/quality-rules/1065044",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065048,
        "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last.",
        "href": "AIP/quality-rules/1065048",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 1065060,
        "name": "Ensure to use an integral value to iterate in loops",
        "href": "AIP/quality-rules/1065060",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065064,
        "name": "Ensure to split the expressions and assignments into multiple lines for better readability and maintainability.",
        "href": "AIP/quality-rules/1065064",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065066,
        "name": "Avoid having  a method call or additional expressions in a statement using \"++\" or \"--\" operators (C/C++)",
        "href": "AIP/quality-rules/1065066",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065078,
        "name": "A base class shall be declared virtual only if it is used in a diamond hierarchy",
        "href": "AIP/quality-rules/1065078",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 1065080,
        "name": "Ensure to use C++ style notation casts to avoid unexpected type conversions",
        "href": "AIP/quality-rules/1065080",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 1065084,
        "name": "Ensure that you do not convert a function pointer to any other type to avoid unexpected behavior",
        "href": "AIP/quality-rules/1065084",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065086,
        "name": "Ensure that pointer types are not cast to integral types",
        "href": "AIP/quality-rules/1065086",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065090,
        "name": "Ensure that you use 'enum' types with  [ ], =, == and !=, the unary & operator, and <, <=, >, >=.",
        "href": "AIP/quality-rules/1065090",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065096,
        "name": "Avoid dynamic_cast to convert current object to its derived class from its constructor or destructor",
        "href": "AIP/quality-rules/1065096",
        "status": null,
        "critical": false,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 1101016,
        "name": "Ensure that you have a limited number of paramenters in OR clauses or IN statements to ensure good query performance",
        "href": "AIP/quality-rules/1101016",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101042,
        "name": "Prefer not having table names using characters outside of [a-z,0-9,_] for better readability and changeability",
        "href": "AIP/quality-rules/1101042",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101044,
        "name": "Prefer not having view names using characters outside of [a-z,0-9,_] for better readability and changeability",
        "href": "AIP/quality-rules/1101044",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101046,
        "name": "Ensure to have your packages named based on the same naming convention for better readability",
        "href": "AIP/quality-rules/1101046",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101048,
        "name": "Ensure to have your package functions named based on the same naming convention for better readability",
        "href": "AIP/quality-rules/1101048",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101050,
        "name": "Ensure to have your package stored procedures named based on the same naming convention for better readability",
        "href": "AIP/quality-rules/1101050",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101056,
        "name": "Ensure that your tables do not have large number of columns as it tends to add redundancy in data, try dividing the tables instead and link them through keys",
        "href": "AIP/quality-rules/1101056",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101062,
        "name": "Ensure to use one SQL statement per line to enhance readability and maintainability of query statements",
        "href": "AIP/quality-rules/1101062",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101064,
        "name": "Ensure that you do not have triggers acting on other triggers and cascading, review your design to avoid such cases",
        "href": "AIP/quality-rules/1101064",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101074,
        "name": "Ensure your table aliases do not have numbers to improve readability",
        "href": "AIP/quality-rules/1101074",
        "status": null,
        "critical": false,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101098,
        "name": "Avoid Artifacts with a Complex SELECT Clause (SQL)",
        "href": "AIP/quality-rules/1101098",
        "status": null,
        "critical": false,
        "technologyNames": [
            "SQL"
        ]
    },
    {
        "id": 1101964,
        "name": "When using compound indexes, avoid having different index ordering in collection access",
        "href": "AIP/quality-rules/1101964",
        "status": null,
        "critical": false,
        "technologyNames": [
            "ASP.NET",
            "C#",
            "VB.NET"
        ]
    }
]
