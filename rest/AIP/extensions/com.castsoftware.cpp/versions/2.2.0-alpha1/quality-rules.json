[
    {
        "id": 592,
        "name": "Ensure you provide a user-defined copy constructor or disable copy when a class allocates memory in its constructor",
        "href": "AIP/quality-rules/592",
        "status": "renewed",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C++"
        ]
    },
    {
        "id": 7988,
        "name": "DEPRECATED: Avoid using snprintf() function family",
        "href": "AIP/quality-rules/7988",
        "status": "renewed",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065000,
        "name": "Avoid using \"continue\" statement",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065002,
        "name": "\"enum\" members other than the first one should not be explicitly initialized unless all members are explicitly initialized.",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065004,
        "name": "Ensure that dynamically allocated memory on local pointer in functions/methods is freed.",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065006,
        "name": "Avoid iterator invalidation.",
        "href": null,
        "status": "deprecated",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065008,
        "name": "Avoid use of unvalidated input in array indexing and memory allocation",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065010,
        "name": "Avoid using <cstdio> stream input output library (C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065012,
        "name": "Avoid using 'setjmp' or 'longjmp' (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065014,
        "name": "Avoid using the library functions bsearch and qsort from <stdlib.h> (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065016,
        "name": "Avoid using atof,atol, atoll or atoi functions from <stdlib.h> (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065018,
        "name": "Avoid using offsetof from <cstddef>",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065020,
        "name": "Avoid using <ctime> (C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065022,
        "name": "Avoid using <stdio.h> (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065024,
        "name": "Avoid using the standard library time and date functions from \"<time.h>\" (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065026,
        "name": "Ensure exception objects are always caught by reference (C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065028,
        "name": "Ensure Switch statements have at least 2 case clauses (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065030,
        "name": "All if \u2026 else if constructs shall be terminated with an else clause (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065032,
        "name": "Avoid flexible array members (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065034,
        "name": "Avoid throwing an exception object of pointer type (C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065036,
        "name": "Avoid using '//' and  '/*' within comments (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065038,
        "name": "Avoid using 'signal.h' (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065040,
        "name": "Avoid anonymous namespaces in header files (C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065042,
        "name": "Avoid non-void return type function without an explicit return of an expression (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065044,
        "name": "Avoid other than main(), namespace declarations and extern \"C\" declarations in the global namespace (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065046,
        "name": "Avoid using the unbounded functions of <cstring> library",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065048,
        "name": "Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last.",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065050,
        "name": "Avoid using \"sizeof\" on expressions that contain side effects",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065052,
        "name": "Avoid using Octal constants or escape sequences (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065054,
        "name": "Do not override the standard library functions (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065056,
        "name": "Avoid throwing exceptions outside of main()",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065058,
        "name": "Ensure that there is at least one exception handler to catch-all otherwise unhandled exceptions in the main function(C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065060,
        "name": "Avoid loops with floating point counter (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065062,
        "name": "Avoid testing floating point numbers for equality",
        "href": null,
        "status": "deprecated",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065064,
        "name": "Avoid doing assignments in sub-expressions (C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065066,
        "name": "Avoid having  a method call or additional expressions in a statement using \"++\" or \"--\" operators (C/C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065068,
        "name": "Avoid using Digraphs (C++)",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065070,
        "name": "Avoid using Trigraphs",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065072,
        "name": "Avoid using Unions",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065074,
        "name": "All constructors that are callable with a single argument of fundamental type shall be declared explicit.",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065076,
        "name": "Avoid declaring data members in non-POD classes as public or protected",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    },
    {
        "id": 1065078,
        "name": "A base class shall be declared virtual only if it is used in a diamond hierarchy",
        "href": null,
        "status": "deprecated",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            
        ]
    }
]
