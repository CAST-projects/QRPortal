{
    "id": 1020732,
    "name": "Avoid using risky cryptographic hash (Node.js)",
    "href": "AIP/quality-rules/1020732",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "MD5/SHA1 hashes were used as salt to hash a password or a passphrase. In cryptography, a salt is random data that's used as additional input to a one-way function. Recently, several exploits were developed which proved that MD5 will generate identical outputs for the different input parameters. As a consequence, somebody can break your encryption or log on to your website.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.",
    "reference": "https://cwe.mitre.org/data/definitions/327.html \nhttps://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure \nhttps://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
    "remediation": "Avoid using MD5 or SHA1 hashes as input to cryptographic functions or to store passwords. Node.js offers the following hashing algorithms: SHA224, SHA256, SHA384, and SHA512. Make sure you choose the most appropriate one, depending on your use case, security requirements and runtime constraints.",
    "remediationSample": "const filename = process.argv[2]; \nconst crypto = require('crypto'); \nconst fs = require('fs'); \n\nconst hash = crypto.createHash('sha256'); \n\nconst input = fs.createReadStream(filename); \ninput.on('readable', () => { \n  const data = input.read(); \n  if (data) \n    hash.update(data); \n  else { \n    console.log(`${hash.digest('hex')} ${filename}`); \n  }",
    "sample": "const filename = process.argv[2]; \nconst crypto = require('crypto'); \nconst fs = require('fs'); \n\nconst hash = crypto.createHash('md5'); \n\nconst input = fs.createReadStream(filename); \ninput.on('readable', () => { \n  const data = input.read(); \n  if (data) \n    hash.update(data); \n  else { \n    console.log(`${hash.digest('hex')} ${filename}`); \n  } \n});",
    "total": "Number of javascript source codes using createHash function",
    "alternativeName": "Avoid using risky cryptographic hash (Node.js)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-327",
            "name": "Broken or Risky Cryptographic Algorithm Usage",
            "url": null,
            "description": "Objective\nAvoid failure to use vetted cryptographic libraries\n\nConsequence\nSoftware using broken or risky cryptographic algorithm incurs the risk of sensitive data being compromised\n\nMeasure Element\nNumber of instances where the application uses the cryptographic deployed component which is not part of the list of vetted cryptographic deployed components.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-327",
            "name": "Use of a Broken or Risky Cryptographic Algorithm",
            "url": "https://cwe.mitre.org/data/definitions/327.html",
            "description": "The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SC-12",
            "name": "Cryptographic Key Establishment and Management",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SC-12",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M5-2016",
            "name": "Insufficient Cryptography",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M5-Insufficient_Cryptography",
            "description": "In order to exploit this weakness, an adversary must successfully return encrypted code or sensitive data to its original unencrypted form due to weak encryption algorithms or flaws within the encryption process."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "url": null,
            "description": "Use strong cryptography and security protocols (for example, TLS, IPSEC, SSH, etc.) to safeguard sensitive cardholder data during transmission over open, public networks, including the following:\n- Only trusted keys and certificates are accepted.\n- The protocol in use only supports secure versions or configurations.\n- The encryption strength is appropriate for the encryption methodology in use.\nNote: SSL and early TLS are not considered strong cryptography and cannot be used as a security control after June 30, 2016. Prior to this date, existing implementations that use SSL and/or early TLS must have a formal Risk Mitigation and Migration Plan in place.\nEffective immediately, new implementations must not use SSL or early TLS.\nPOS POI terminals (and the SSL/TLS termination points to which they connect) that can be verified as not being susceptible to any known exploits for SSL and early TLS may continue using these as a security control after June 30, 2016.\nExamples of open, public networks include but are not limited to:\n- The Internet\n- Wireless technologies, including 802.11 and Bluetooth\n- Cellular technologies, for example, Global System for Mobile communications (GSM), Code division multiple access (CDMA)\n- General Packet Radio Service (GPRS)\n- Satellite communications"
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70245",
            "name": "The application must protect the confidentiality and integrity of transmitted information.",
            "url": null,
            "description": "Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.\n\nThis requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nApplication and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.\n \nWhen transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.\n\nCommunication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        10.0,
        70.0,
        90.0,
        99.0
    ]
}
