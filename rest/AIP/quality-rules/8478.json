{
    "id": 8478,
    "name": "Avoid Buffer Overruns when using ADD, SUBTRACT, MULTIPLY, DIVIDE & COMPUTE statement inside a loop",
    "href": "AIP/quality-rules/8478",
    "critical": true,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "The following statements perform arithmetic, then store the result, or sending field, into one or more receiving fields: ADD, COMPUTE, DIVIDE, MULTIPLY and SUBTRACT\n\nThe control  of Buffer Overruns that can result by miscalculation of array size (when ADD TO or SUBTRACT FROM .... is used) should be done by using the ON SIZE ERROR statement\n\nIf the ON SIZE ERROR statements is specified and a size error condition occurs, the value of the resultant identifier affected by the size error is not altered; that is, the error results are not placed in the receiving identifier. After completion of the execution of the arithmetic operation, the imperative statement in the ON SIZE ERROR phrase is executed, control is transferred to the end of the arithmetic statement.\n\nThis rules checks if ON SIZE ERROR (imperative-statement) is specified when Arithmetic Verbs are used inside a PERFORM Statement.",
    "output": "Associated to each COBOL Program with violations, the Quality Rule provides: \n\n- The number of using ADD, SUBTRACT, MULTIPLY, DIVIDE & COMPUTE statement inside a loop without ON SIZE ERROR check.\n- Bookmarks for violation occurrences found in source code:\n    - Statement creating the loop in which one of these statements are used without ON SIZE ERROR check.",
    "rationale": "Buffer overflows are one of the oldest but also the most common type of vulnerability affecting software that allows direct memory access. These vulnerabilities are because programmers make erroneous assumptions upon the size of the data that they write in their programs\u2019",
    "reference": "https://cwe.mitre.org/data/definitions/787.html\nhttps://www.owasp.org/index.php/A5_2004_Buffer_Overflow",
    "remediation": "Check if the ON SIZE ERROR is used when using these statements inside a loop.",
    "remediationSample": "PERFORM UNTIL A > 100\nADD 1 TO A\nON SIZE ERROR \nEND-PERFORM.",
    "sample": "PERFORM UNTIL A > 100\nADD 1 TO A\nEND-PERFORM.",
    "total": "Number of Cobol Programs",
    "alternativeName": "Avoid Buffer Overruns when using ADD, SUBTRACT, MULTIPLY, DIVIDE & COMPUTE statement inside a loop",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062145,
            "name": "ASCRM-CWE-120 - Buffer Copy without Checking Size of Input",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062174,
            "name": "ASCSM-CWE-120 - Buffer Copy without Checking Size of Input",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061022,
            "name": "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061090,
            "name": "CWE-787: Out-of-bounds Write",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -4,
            "name": "Cobol",
            "href": "AIP/technologies/-4"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-120",
            "name": "Buffer Copy without Checking Size of Input",
            "url": null,
            "description": "Objective\nAvoid buffer operations among buffers with incompatible sizes\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances in which the content of the first buffer is moved into the content of the second buffer while the size of the first buffer is greater than the size of the second buffer.\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-120",
            "name": "Buffer Copy without Checking Size of Input",
            "url": null,
            "description": "Objective\nAvoid buffer operations among buffers with incompatible sizes\n\nConsequence\nSoftware that is unaware of buffer bounds incurs the risk of corruption of relevant memory, and perhaps instructions, possibly leading to a crash, the risk of data integrity loss, and the risk of unauthorized access to sensitive data\n\nMeasure Element\nNumber of instances in which the content of the first buffer is moved into the content of the second buffer while the size of the first buffer is greater than the size of the second buffer.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-120",
            "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "url": "https://cwe.mitre.org/data/definitions/120.html",
            "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
        },
        {
            "standard": "CWE",
            "id": "CWE-787",
            "name": "Out-of-bounds Write",
            "url": "https://cwe.mitre.org/data/definitions/787.html",
            "description": "The software writes data past the end, or before the beginning, of the intended buffer."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-120",
            "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "url": "https://cwe.mitre.org/data/definitions/120.html",
            "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-787",
            "name": "Out-of-bounds Write",
            "url": "https://cwe.mitre.org/data/definitions/787.html",
            "description": "The software writes data past the end, or before the beginning, of the intended buffer."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-16",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-120",
            "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "url": "https://cwe.mitre.org/data/definitions/120.html",
            "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-787",
            "name": "Out-of-bounds Write",
            "url": "https://cwe.mitre.org/data/definitions/787.html",
            "description": "The software writes data past the end, or before the beginning, of the intended buffer."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.2",
            "name": "Buffer overflows",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.2",
            "name": "Buffer overflows",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70277",
            "name": "The application must not be vulnerable to overflow attacks.",
            "url": null,
            "description": "A buffer overflow occurs when a program exceeds the amount of data allocated to a buffer. The buffer is a sequential section of memory and when the data is written outside the memory bounds, the program can crash or malicious code can be executed.\n\nSecurity safeguards employed to protect memory include, for example, data execution prevention and address space layout randomization. Data execution prevention safeguards can either be hardware-enforced or software-enforced with hardware providing the greater strength of mechanism.\n\nBuffer overflows can manifest as stack overflows, heap overflows integer overflows and format string overflows. Each type of overflow is dependent upon the underlying application language and the context in which the overflow is executed.\n\nInteger overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. \n\nAlmost all known web servers, application servers, and web application environments are susceptible to buffer overflows. Proper validation of user input is required to mitigate the risk. Notably, limiting the size of the strings a user is allowed to input to a program to a predetermined, acceptable length.\n\nA code review, static code analysis or active vulnerability or fuzz testing are methods used to identify overflows within application code."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
