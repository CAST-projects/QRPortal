{
    "id": 7562,
    "name": "Avoid static Field of type collection",
    "href": "AIP/quality-rules/7562",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "extension": {
        "name": "com.castsoftware.jee",
        "href": "AIP/extensions/com.castsoftware.jee"
    },
    "description": "In practice, static collection classes, such as HashMap and Vector can cause memory leak. Static collections are likely to cause memory leaks because static variables remain in memory as long as the application runs, regardless of its object creation and destruction. So because their life cycle is the application duration, the objects that they reference will be kept in memory until the application end.\n\nThis rule reports static field defined as a class or interface that implements:\n\n  - java.util.Collection or java.util.Collection<E>\n  or\n  - java.util.Map or java.util.Map<K,V> except when:\n\n       - it is the class or a subclass of java.util.WeakHashMap or java.util.WeakHashMap<K,V>\n       - the field is defined as an interface and is initialized with an instance of the class or a subclass of java.util.WeakHashMap\n       or java.util.WeakHashMap<K,V>.\n       - if collection.clear() or Map.clear() is used.",
    "output": "This report lists all static field defined as collection (class or interface).\nIt provides the following information:\n  Field full name",
    "rationale": "In a production environment, memory leaks can force organizations to add more memory and hardware resources. They can even cause an application to crash unexpectedly. In theory, the garbage collector is responsible to manage memory and should avoid these issues.\n\nProgramming errors can prevent garbage collection of objects that are no longer relevant to program operation. The garbage collector collects only unreachable objects; consequently, the presence of reachable objects that remain unused indicates memory mismanagement. Consumption of all available heap space can cause an OutOfMemoryError, which usually results in program termination.\n\nExcessive memory leaks can lead to memory exhaustion and denial of service (DoS) and must be avoided",
    "reference": "https://wiki.sei.cmu.edu/confluence/display/java/MSC04-J.+Do+not+leak+memory\nhttps://cwe.mitre.org/data/definitions/1091.html\nhttps://cwe.mitre.org/data/definitions/401.html",
    "remediation": "You can either check that objects added in the collection are removed when required or use weak references that will leverage the garbage collector's ability to determine reachability of referenced objects for you.",
    "remediationSample": "Remeadiation for Sample 1:\nPrefer using standard language semantics where possible. This compliant solution uses the vector.clear() method, which removes all elements:\n\npublic void useVector(int count) { \n  try {\n    for (int n = 0; n < count; n++) {\n      vector.add(Integer.toString(n));\n    }\n    // ...\n  } finally {\n    vector.clear(); // Clear the vector\n  }\n}\n\n\n\n\nRemeadiation for Sample 2: \nUse weak references to allow timely garbage collection:\n\n// ...\nprivate Map<SSLSocket, InetAddress> m = Collections.synchronizedMap(\n  new WeakHashMap<SSLSocket, InetAddress>()\n);",
    "sample": "Sample 1: in this sampe the usage of vector object lead to memory leaks: The condition for removing the vector element is mistakenly written as n > 0 instead of n >= 0. Consequently, the method fails to remove one element per invocation and quickly exhausts the available heap space.\n\npublic class Leak {\n  static Vector vector = new Vector();\n \n  public void useVector(int count) {   \n    for (int n = 0; n < count; n++) {\n      vector.add(Integer.toString(n));\n    }\n    // ...\n    for (int n = count - 1; n > 0; n--) { // Free the memory\n      vector.removeElementAt(n);\n    }  \n  }\n \n  public static void main(String[] args) throws IOException {\n    Leak le = new Leak();\n    int i = 1;\n    while (true) {\n      System.out.println(\"Iteration: \" + i);\n      le.useVector(1);\n      i++;\n    }\n  }\n}\n\n-----------------\nSample 2 \nIn this sample, a common variation of the obsolete object fallacy is the unintentional retention of objects in collections such as maps: The server maintains temporary metadata about all committed secure connections:\n\nclass HashMetaData {\n  private Map<SSLSocket, InetAddress> m = Collections.synchronizedMap(\n      new HashMap<SSLSocket, InetAddress>());\n \n  public void storeTempConnection(SSLSocket sock, InetAddress ip) {\n    m.put(sock, ip); \n  }\n \n  public void removeTempConnection(SSLSocket sock) {\n    m.remove(sock); \n  }\n}",
    "total": "Number of static field defined as collection (class or interface), java.util.WeakHashMap or java.util.WeakHashMap<K,V>",
    "alternativeName": "Ensure that static Field of type collection are not used",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062136,
            "name": "ASCPEM-PRF-15 - Storable and Member Data Element Reference Missing De-Referencing Control Element",
            "href": "AIP/technical-criteria/1062136",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061044,
            "name": "CWE-401 - Missing Release of Memory after Effective Lifetime",
            "href": "AIP/technical-criteria/1061044",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61018,
            "name": "Efficiency - Memory, Network and Disk Space Management",
            "href": "AIP/technical-criteria/61018",
            "weight": 4,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063120,
            "name": "PCI-Requirement-6.5.6 - All high risk vulnerabilities",
            "href": "AIP/technical-criteria/1063120",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCPEM-PRF-15",
            "name": "Storable and Member Data Element Reference Missing De-Referencing Control Element",
            "href": "AIP/quality-standards/CISQ/items/ASCPEM-PRF-15",
            "standard": "CISQ"
        },
        {
            "id": "CWE-401",
            "name": "Missing Release of Memory after Effective Lifetime",
            "href": "AIP/quality-standards/CWE/items/CWE-401",
            "standard": "CWE"
        },
        {
            "id": "CWE-401",
            "name": "Missing Release of Memory after Effective Lifetime",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-401",
            "standard": "ISO-5055"
        },
        {
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-16",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-16",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "CWE-401",
            "name": "Missing Release of Memory after Effective Lifetime",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-401",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
