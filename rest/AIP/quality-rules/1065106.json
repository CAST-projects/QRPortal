{
    "id": 1065106,
    "name": "Avoid comparing types of different widths in a loop",
    "href": "AIP/quality-rules/1065106",
    "critical": false,
    "maxWeight": 6,
    "description": "The rule will report a violation if a narrow type is compared to a wider type inside a loop",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The narrow type in comparison may overflow and never reach the max limit and the loop may run infinitely",
    "reference": "https://cwe.mitre.org/data/definitions/190.html   -Example 3",
    "remediation": "Use types of same width for comparison",
    "remediationSample": "//This example represents only one of the ways to remediate the violation \nvoid testIntegerOverflow() {\n\n   int bytesRec = 0;\n\n   auto getFromInput = [](char*) {\n\n      return 10000;\n\n   };\n\n \n\n#define MAXGET INT_MAX\n\n  \n\n   char buf[100000];\n\n \n\n   while (bytesRec < MAXGET) {\n\n      int bytes = getFromInput(buf + bytesRec);\n\n      if (static_cast<int>(bytes + bytesRec) < bytesRec) {\n\n         break;\n\n      }\n\n      bytesRec += bytes;\n\n   }\n\n}",
    "sample": "short int bytesRec = 0;\nchar buf[SOMEBIGNUM];\n\nwhile(bytesRec < MAXGET) {\nbytesRec += getFromInput(buf+bytesRec);\n}",
    "total": "Number of C++ methods and Functions",
    "alternativeName": "Avoid comparing types of different widths in a loop",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-190",
            "name": "Integer Overflow or Wraparound",
            "href": "AIP/quality-standards/CWE/items/CWE-190",
            "standard": "CWE"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
