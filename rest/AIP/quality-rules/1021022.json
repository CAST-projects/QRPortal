{
    "id": 1021022,
    "name": "'Initialize ancestors when overriding __init__'",
    "href": "AIP/quality-rules/1021022",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "Inheritance in object-oriented programming allows code reuse between hierarchically related classes. In Python by default the subclass inherits all of the methods including the __init__ method which is usually used for instance member initialization. However the subclass can replace any particular implementation that has inherited. To avoid accidental access to uninitialized instance members we strongly suggest you to initialize ancestor classes in the overriden __init__ method or to reconsider refactoring the code so that no inheritance is needed.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Accessing uninitialized variables is a typical source of errors and unexpected behaviour. Overriding the __init__ method of an ancestor class without initializing it can leave unitialized instance members.",
    "remediation": "Initialize ancestors when overriding __init__ using consistently non-super methods or super() if their ancestors do.",
    "remediationSample": ">>> # approach (1)\n>>> class B(A):\n>>>     def __init__(self):\n>>>         super().__init__()        # in Python2: super(B, self).__init__()\n>>>         self.y = 2\n>>>\n>>> # approach (2)\n>>> class B(A):\n>>>     def __init__(self):\n>>>         A.__init__()\n>>>         self.y = 2",
    "sample": ">>> class A:\n>>>     def __init__(self):\n>>>         self.x = 3\n>>>         self.y = 14\n>>>\n>>> class B(A):\n>>>     def __init__(self):\n>>>         self.y = 2",
    "total": "Number of Python artifacts initializing instance members",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
