{
    "id": 7956,
    "name": "DEPRECATED:Avoid indirect exception handling inside loops",
    "href": "AIP/quality-rules/7956",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "extension": {
        "name": "com.castsoftware.jee",
        "href": "AIP/extensions/com.castsoftware.jee"
    },
    "description": "Nesting try/catch blocks hardly impacts the performance and the readability of source. This rule reports all methods which contain a try/catch block and are called within a loop (for, while, do while) at a depth level less than <depth level>.\n\n<depth level> is a parameter that can be changed at will.",
    "output": "This reports all methods having a loop in which there is a call to a method that contains try/catch blocks.\nIt provides the following information:\n Method full name that has the loop, the call path from the method that contains the loop to the method that does the try/catch\n\nNote that:\n1/ The call path may contain different paths while only one is an error. For example:\nvoid myException(){\n     try{  throw exception(); }\n     catch(exception e){}\n}\n\nvoid g() {myException();}\n\nvoid  f() {\n       while (myCondition) { g ();}\n        g();\n        } \n\nwill report both path to g() while only one is a violation, the one that is called in the loop.\n\n2/ Several paths for the same method violating the rule are identified in the Metric Detail page by a sequence ID (in the Value column), this ID is dynamically set during each snapshot and the same path can have a different sequence ID in different snapshots.",
    "rationale": "Exception handling tends to be relatively costly, given the work in unwinding the stack, trying various exception handlers, and so on. You should avoid placing try/catch blocks within a method that is called in a loop as it can add up when performed many times inside a loop.",
    "reference": "http://www.precisejava.com/javaperf/j2se/Exceptions.htm",
    "remediation": "If possible, put the loop inside the try/catch block.",
    "remediationSample": "public class ExceptionTest {\n     static final int N = 18000000;\n\n     public void myException(void) throws Throwable {\n         Throwable exc = new Throwable();\n         throw exc;\n    }\n}\n\npublic class LoopTest {\n     static final int N = 18000000;\n     private ExceptionTest et = new ExceptionTest();\n \n     public void myLoop(void) {\n         try {                                               \n             for (int i = 1; i <= N; i++) {\n                  et.myException(); // FIXED\n             }\n        } catch (Throwable e) { }\n    }\n}",
    "sample": "public class ExceptionTest {\n    static final int N = 18000000;\n\n    public void myException(void) {\n         Throwable exc = new Throwable();\n         try {                                               \n             throw exc;\n         } catch (Throwable e) { }\n    }\n}\n\npublic class LoopTest {\n    static final int N = 18000000;\n    private ExceptionTest et = new ExceptionTest();\n \n    public void myLoop(void) {\n       for (int i = 1; i <= N; i++) {\n            et.myException(); // VIOLATION\n       }\n    }\n}",
    "total": "Number of methods that contain at least one loop",
    "alternativeName": "Ensure that indirect exception handling inside loops are not used as they lead to preformance issues",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops",
            "href": "AIP/technical-criteria/66068",
            "weight": 3,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063119,
            "name": "PCI-Requirement-6.5.5 - Improper error handling",
            "href": "AIP/technical-criteria/1063119",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-11",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-11",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        }
    ],
    "parameters": [
        {
            "name": "Depth level of a call path",
            "description": "Depth level of a call path",
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        3
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
