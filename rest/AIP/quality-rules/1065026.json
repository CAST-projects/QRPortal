{
    "id": 1065026,
    "name": "Ensure exception objects are always caught by reference (C++)",
    "href": "AIP/quality-rules/1065026",
    "critical": false,
    "maxWeight": 5,
    "description": "This rule reports all the cases where an exception is caught by value.\n\nThis rule shall not report a violation in case the object of the base class is not caught.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "If a class type exception object is caught by value, slicing occurs. That is, if the exception object is of a derived class and is caught as the base, only the base class\u2019s functions (including virtual functions) can be called. Also, any additional member data in the derived class cannot be accessed. If the exception is caught by reference, slicing does not occur.\n\nThis leads to an issue that the actual and more specific exception is not thrown losing valuable exception information and leading to incorrect error recovery.",
    "reference": "Standards References:\nMISRA C++ 2008, Rule 15\u20133\u20135: A class type exception shall always be caught by reference.\n\nOMG CWE - 397",
    "remediation": "Catch the exception object by reference using &operator.",
    "remediationSample": "try\n{\n// ...\nthrow ExpD1 ( );\n// ...\nthrow ExpBase ( );\n}\ncatch ( ExpBase &b ) // Compliant \u2013 exceptions caught by reference\n{\n// ...\nb.who(); // \"base\", \"type 1 exception\" or \"type 2 exception\"\n// depending upon the type of the thrown object\n}\n___________________________________________________________________\n\nThe exception to the rule:\n\ntry\n{\n// ...\nthrow ExpD1 ( );\n// ...\nthrow ExpBase ( );\n}\ncatch (ExpBase) // No-violation\n{\nb.who(); \n}",
    "sample": "// base class for exceptions\n class ExpBase \n { public: \n    virtual const char_t *who ( )\n        {       return \"base\";\n        };\n }; \n class ExpD1: public ExpBase\n  { public:\n      virtual const char_t *who ( )\n          {       return \"type 1 exception\";    };\n          };\n class ExpD2: public ExpBase \n { public:\n     virtual const char_t *who ( )\n         {       return \"type 2 exception\";\n         };\n  }; \n_________________________________\n\n  try\n{\n// ...\nthrow ExpD1 ( );\n// ...\nthrow ExpBase ( );\n}\n// Using the definitions above ...\ncatch ( ExpBase b ) // Non-compliant - derived type objects will be\n// caught as the base type\n{\nb.who(); // Will always be \"base\"\nthrow b; // The exception re-thrown is of the base class,\n// not the original exception type\n}",
    "total": "Number of C++ methods and functions",
    "alternativeName": "Ensure that a class type exception is always be caught by reference to avoid slicing",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062149,
            "name": "ASCRM-CWE-397 - Declaration of Throws for Generic Exception",
            "href": "AIP/technical-criteria/1062149",
            "weight": 5
        },
        {
            "id": 1062181,
            "name": "ASCSM-CWE-397 - Declaration of Throws for Generic Exception",
            "href": "AIP/technical-criteria/1062181",
            "weight": 5
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "href": "AIP/technical-criteria/61014",
            "weight": 3
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "MISRA-CPP-2008-Exceptions",
            "name": "Exceptions",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-CPP-2008-Exceptions",
            "standard": "C-CPP"
        },
        {
            "id": "ASCRM-CWE-397",
            "name": "Declaration of Throws for Generic Exception",
            "href": "AIP/quality-standards/CISQ/items/ASCRM-CWE-397",
            "standard": "CISQ"
        },
        {
            "id": "ASCSM-CWE-397",
            "name": "Declaration of Throws for Generic Exception",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-397",
            "standard": "CISQ"
        },
        {
            "id": "CWE-397",
            "name": "Declaration of Throws for Generic Exception",
            "href": "AIP/quality-standards/CWE/items/CWE-397",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-11",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.2.1"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
