{
    "id": 8076,
    "name": "Avoid using 'new[]', prefer 'std::vector' or 'std::array'",
    "href": "AIP/quality-rules/8076",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for C++ functions that use the 'new[]' operator.",
    "output": "Associated to each C++ method, constructor, and destructor with violations, the Quality Rule provides:\n- number of violation occurrences\n- Bookmarks for violation occurrences found in source code:\n  - new[] operator",
    "rationale": "'std::vector' automatically manages memory, including calling 'delete[]' when required, even when exceptions are thrown. Moreover, 'std::vector' provides more functionalities, including the ability to resize itself dynamically.\n\nFor dynamically allocated arrays of char type, consider using 'std::string' instead of 'std::vector<char>', since this type contains specific functions for string manipulations.\n\nFor more information, refer to Effective STL Item 13 from Scott Meyers.",
    "remediation": "You can use either 'std::vector', if the size of collection is not known at compile time, or 'std::array' if it is a compile-time constant (for instance, storing coordinates in a three dimensional world).",
    "remediationSample": "void f()\n{\n    std::vector<MyClass> myCol(100) ;\n    std::string myText = \"Hello world !\";\n}",
    "sample": "void f()\n{\n    MyClass *myCol = new MyClass[100] ;\n    delete [] myCol ;\n    char *myText = new char[10] ;\n    strcpy (myText, \"Hello world!\");\n    delete[] myText;\n}",
    "total": "Number of C++ constructors, destructors, and methods, and  **functions** of course.",
    "alternativeName": "Avoid using 'new[]', prefer 'std::vector' or 'std::array'",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61029,
            "name": "Complexity - Dynamic Instantiation",
            "href": "AIP/technical-criteria/61029",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
