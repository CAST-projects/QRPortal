{
    "id": 1065050,
    "name": "Avoid using \"sizeof\" on expressions that contain side effects",
    "href": "AIP/quality-rules/1065050",
    "critical": false,
    "severity": 10,
    "maxWeight": 3,
    "extension": {
        "name": "com.castsoftware.cpp",
        "href": "AIP/extensions/com.castsoftware.cpp"
    },
    "description": "Rule will raise a violation when sizeof is used on expressions with side-effets\n\nAn exception to the rule:\nAn operand of the form sizeof ( i ) where i is volatile is permitted.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "A possible programming error in C++ is to apply the sizeof operator to expression and expect the expression to be evaluated. However, the expression is not evaluated as sizeof only acts on the type of the expression. To avoid this error, sizeof shall not be used on expressions that would contain side effects if they were used elsewhere, as the side effects will not occur.",
    "reference": "MISRA C++ 2008, 5-3-4: Evaluation of the operand to the sizeof operator shall not contain side effects.",
    "remediation": "Ensure to separate a side effect of an expression from the sizeof method",
    "remediationSample": "int32_t j;\nvolatile int32_t k;\n\nj = sizeof ( k ); // Compliant by exception.",
    "sample": "int32_t i;\nint32_t j;\n\nj = sizeof( i = 1234 ); // Non-compliant - j is set to the sizeof the\n// type of i which is an int32_t.\n// i is not set to 1234.",
    "total": "Number of C / C++ methods and functions",
    "alternativeName": "Ensure to separate a side effect of an expression from the sizeof method",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 3,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "AUTOSAR-CPP-2014-Expressions",
            "name": "Expressions",
            "href": "AIP/quality-standards/C-CPP/items/AUTOSAR-CPP-2014-Expressions",
            "standard": "C-CPP"
        },
        {
            "id": "MISRA-CPP-2008-Expressions",
            "name": "Expressions",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-CPP-2008-Expressions",
            "standard": "C-CPP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
