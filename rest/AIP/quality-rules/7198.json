{
    "id": 7198,
    "name": "Avoid String concatenation in loops (.NET)",
    "href": "AIP/quality-rules/7198",
    "critical": false,
    "maxWeight": 8,
    "description": "All String objects that use concatenation in loops (for, while, do while) will be reported.\nNote that in the case of VB.NET, both cases: String += Object and Object += String are considered to be a concatenation and might raise a violation whereas the dynamic resolution of the Object is something that lead the operand to perform another operation that a concatenation.",
    "output": "This report lists all artifacts with code that call String concatenation in loops.\nIt provides the following information:\n Method full name\nString concatenation is either a call to String.Concat or by the += operator.",
    "rationale": "When placed in a loop, String concatenation results in the creation and garbage collection of large numbers of temporary objects. This both consumes memory and can dramatically slow the program execution. It is recommended to create a StringBuilder before entering the loop, and append to it within the loop, thus reducing the overhead.",
    "reference": "CISQ rule: ASCPEM-PRF-2.",
    "remediation": "It is recommended to create a StringBuilder before entering the loop, and append to it within the loop, thus reducing the overhead.",
    "remediationSample": "static void LoopOK()\n      {\n         StringBuilder myText = new StringBuilder();\n         for(int i = 0; i < 1000; i++)\n         {\n            myText.Append(\"count =\");       // FIXED\n            myText.Append(i.ToString());      // FIXED\n         }\n         Console.WriteLine(myText.ToString());\n      }",
    "sample": "static void LoopKO()\n      {\n         String myText = \"hello\" ;\n         for(int i = 0; i < 1000; i++)\n         {\n            myText += \"count =\";        // VIOLATION\n            myText += i.ToString();     // VIOLATION\n         }\n         Console.WriteLine(myText.ToString());\n      }",
    "total": "Number of artifacts",
    "alternativeName": "Avoid String concatenation in loops (.NET)",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062101,
            "name": "CISQ-Maintainability",
            "href": "AIP/business-criteria/1062101"
        },
        {
            "id": 1062102,
            "name": "CISQ-Performance-Efficiency",
            "href": "AIP/business-criteria/1062102"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "OMG-ASCQM-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061001,
            "name": "OMG-ASCQM-Maintainability",
            "href": "AIP/business-criteria/1061001"
        },
        {
            "id": 1061002,
            "name": "OMG-ASCQM-Performance-Efficiency",
            "href": "AIP/business-criteria/1061002"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062125,
            "name": "ASCMM-MNT-5 - Loop Value Update within the Loop",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062137,
            "name": "ASCPEM-PRF-2 - Immutable Storable and Member Data Element Creation",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061109,
            "name": "CWE-1046: Creation of Immutable Text Using String Concatenation",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061145,
            "name": "CWE-1095: Loop Condition Value Update within the Loop",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-5",
            "name": "Loop Value Update within the Loop",
            "url": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-2",
            "name": "Immutable Storable and Member Data Element Creation",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-1046",
            "name": "Creation of Immutable Text Using String Concatenation",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-1095",
            "name": "Loop Condition Value Update within the Loop",
            "url": null,
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1046",
            "name": "Creation of Immutable Text Using String Concatenation",
            "url": null,
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1095",
            "name": "Loop Condition Value Update within the Loop",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
