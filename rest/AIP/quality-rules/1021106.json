{
    "id": 1021106,
    "name": "Avoid server-side request forgery (Python)",
    "href": "AIP/quality-rules/1021106",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.python",
        "href": "AIP/extensions/com.castsoftware.python"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This quality rule detects execution paths from user input methods down to request execution methods, paths which are open vulnerabilities to SSRF flaws.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software does not properly neutralize URLs, host or port that are used in a request execution, allowing attackers to access internal services or to launch attacks from your web server.",
    "reference": "https://cwe.mitre.org/data/definitions/918.html\nhttps://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\nhttps://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html",
    "remediation": "Do not accept URLs, host and port from users.\nUse a whitelist of allowed values to build the URL.",
    "remediationSample": "app = Flask(__name__)\n\n@app.route(\"/foo\")\ndef func():\n    target = request.args[\"target\"]\n    subdomain = \"europe\" if target == \"eu\" else \"www\"  # sanitization\n    resp = request.get(\"https://\" + subdomain + \".example.com/data/\")",
    "sample": "app = Flask(__name__)\n\n@app.route(\"/foo\")\ndef func():\n    target = request.args[\"target\"]\n    resp = requests.get(\"https://\" + target + \".example.com/data/\")",
    "total": "Number of Python artifacts",
    "alternativeName": "Ensure your application properly neutralize URLs before they are accessed",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1067018,
            "name": "CWE-918 - Server-Side Request Forgery (SSRF)",
            "href": "AIP/technical-criteria/1067018",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062350,
            "name": "OWASP-2021-A10 - Server-Side Request Forgery (SSRF)",
            "href": "AIP/technical-criteria/1062350",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-918",
            "name": "Server-Side Request Forgery (SSRF)",
            "href": "AIP/quality-standards/CWE/items/CWE-918",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-10",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A10-2021",
            "name": "Server-Side Request Forgery (SSRF)",
            "href": "AIP/quality-standards/OWASP/items/A10-2021",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        },
        {
            "id": "STIG-V-222604",
            "name": "The application must protect from command injection.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222604",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
