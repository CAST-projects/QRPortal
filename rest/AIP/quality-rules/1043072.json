{
    "id": 1043072,
    "name": "Avoid creating unsecured HTTPS GET metadata endpoint in code",
    "href": "AIP/quality-rules/1043072",
    "critical": true,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "The rule will ckeck the use of HttpsGetEnabled and HttpsGetUrl properties in your code.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Be sure you trust the source of your metadata and make sure that no one has tampered with the metadata. Metadata retrieved using the HTTP protocol is sent in clear text and can be tampered with. If the service uses the HttpsGetEnabled and HttpsGetUrl properties, use the URL supplied by the service creator to download the data using the HTTPS protocol.",
    "reference": "https://docs.microsoft.com/dotnet/framework/wcf/feature-details/best-practices-for-security-in-wcf#obtain-metadata-from-trusted-sources\nhttps://docs.microsoft.com/dotnet/framework/wcf/feature-details/how-to-secure-metadata-endpoints",
    "remediation": "Ensure you trust the source of your metadata by enabling HttpsGetEnalbled and HttpsGetUrl properties",
    "remediationSample": "// Create a new metadata behavior object and set its properties to\n// create a secure endpoint.\nServiceMetadataBehavior sb = new ServiceMetadataBehavior();\nsb.HttpsGetEnabled = true;\nsb.HttpsGetUrl = new Uri(\"https://myMachineName:8036/myEndpoint\");\nmyServiceHost.Description.Behaviors.Add(sb);\n\nmyServiceHost.Open();",
    "sample": "// Create a new metadata behavior object and set its properties to\n// create a secure endpoint.\nServiceMetadataBehavior sb = new ServiceMetadataBehavior();\nsb.HttpsGetEnabled = false;\nmyServiceHost.Description.Behaviors.Add(sb);\n\nmyServiceHost.Open();",
    "total": "Number of applications",
    "alternativeName": "Ensure you trust the source of your metadata by enabling HttpsGetEnalbled and HttpsGetUrl in code",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        }
    ],
    "qualityStandards": [
        {
            "standard": "OWASP",
            "id": "A5-2013",
            "name": "Security Misconfiguration",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A6-2017",
            "name": "Security Misconfiguration",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "API7-2019",
            "name": "Security Misconfiguration",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-2.2.4",
            "name": "Configure system security parameters to prevent misuse.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-2.2.4",
            "name": "Configure system security parameters to prevent misuse.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
