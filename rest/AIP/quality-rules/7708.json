{
    "id": 7708,
    "name": "Avoid using session.setFlushMode(FlushMode.COMMIT, FlushMode.NEVER or FlushMode.MANUAL)",
    "href": "AIP/quality-rules/7708",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Associated Value",
    "description": "Reports all methods that reference:\n - net.sf.hibernate.Session.setFlushMode(org.hibernate.FlushMode) or org.hibernate.Session.setFlushMode(org.hibernate.FlushMode) \nand also the parameters:\n   * net.sf.hibernate.COMMIT, net.sf.hibernate.NEVER\n   * org.hibernate.FlushMode.COMMIT, org.hibernate.FlushMode.NEVER or org.hibernate.FlushMode.MANUAL",
    "output": "List all methods that call setFlushMode with FlushMode.COMMIT, FlushMode.NEVER or FlushMode.MANUAL as value.\n\nIt provides the following information:\n Method Full Name",
    "rationale": "session.setFlushMode(FlushMode.COMMIT, FlushMode.NEVER or FlushMode.MANUAL) specifie that the session won't be flushed before query execution (it will be flushed only at the end of the database transaction). Be aware that this setting may expose you to stale data: modifications you made to objects only in memory may conflict with the results of the query. We don't recommend that you change this setting from the default. \nIt's provided to allow performance optimization in rare cases. Likewise, most applications rarely need to call flush() explicitly. This functionality is useful when you're working with triggers, mixing Hibernate with direct JDBC, or working with buggy JDBC drivers. You should be aware of the option but not necessarily look out for use cases.",
    "reference": "Hibernate in Action (ISBN 1932394-15-X) p 160",
    "remediation": "Verify that these settings are necessary.",
    "total": "The number of methods that reference org.hibernate.Session.setFlushMode or net.sf.hibernate.Session.setFlushMode",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-HA-INTERNAL",
            "name": "HA - internal failure mitigation",
            "url": "",
            "description": "Quality rules related to the presence of occurrences of structural coding patterns that are known to cause functional failures"
        }
    ]
}
