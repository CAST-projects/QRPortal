{
    "id": 7984,
    "name": "Avoid using strecpy() function",
    "href": "AIP/quality-rules/7984",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for C/C++ functions, methods, constructors, and destructors that call the 'strecpy()' function.",
    "output": "Associated to each C/C++ function/method/constructor/destructor with violations, the Quality Rule provides:\n- Number of violation occurrences\n- Bookmarks for violation occurrences found in the source code:\n  - 'strecpy()' call",
    "rationale": "The 'strecpy()' function can lead to security risk because there is possibility to overflow the target string.  The risk for this function is high because a simple test of the size of the source string is not enough to be sure that the target string is large enough.",
    "reference": "Build Security In (https://buildsecurityin.us-cert.gov/bsi/articles/knowledge/coding)",
    "remediation": "Check the bounds of the target string buffer to make sure that it is large enough to receive the source string after this one is expanded. The target string buffer should be at least four times larger than the source string buffer.",
    "remediationSample": "void foo()\n{\n  char strSource[100]=\"string with some expandable\\t\\tcharacters\\n\\n\";\n  char strTarget[4*100];\n  strecpy(strTarget,strSource,theExceptions);\n}",
    "sample": "void foo()\n{\n  char strSource[100]=\"string with some expandable\\t\\tcharacters\\n\\n\";\n  char strTarget[100];\n  strecpy(strTarget,strSource,theExceptions);\n}",
    "total": "Number of C/C++ functions, constructors, destructors, and methods",
    "alternativeName": "(undefined)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-120",
            "name": "Buffer Copy without Checking Size of Input",
            "url": null,
            "description": "Objective\nAvoid buffer operations among buffers with incompatible sizes\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances in which the content of the first buffer is moved into the content of the second buffer while the size of the first buffer is greater than the size of the second buffer.\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-120",
            "name": "Buffer Copy without Checking Size of Input",
            "url": null,
            "description": "Objective\nAvoid buffer operations among buffers with incompatible sizes\n\nConsequence\nSoftware that is unaware of buffer bounds incurs the risk of corruption of relevant memory, and perhaps instructions, possibly leading to a crash, the risk of data integrity loss, and the risk of unauthorized access to sensitive data\n\nMeasure Element\nNumber of instances in which the content of the first buffer is moved into the content of the second buffer while the size of the first buffer is greater than the size of the second buffer.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-120",
            "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "url": "https://cwe.mitre.org/data/definitions/120.html",
            "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
        },
        {
            "standard": "CWE",
            "id": "CWE-676",
            "name": "Use of Potentially Dangerous Function",
            "url": "https://cwe.mitre.org/data/definitions/676.html",
            "description": "The program invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-16",
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.2",
            "name": "Buffer overflows",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70277",
            "name": "The application must not be vulnerable to overflow attacks.",
            "url": null,
            "description": "A buffer overflow occurs when a program exceeds the amount of data allocated to a buffer. The buffer is a sequential section of memory and when the data is written outside the memory bounds, the program can crash or malicious code can be executed.\n\nSecurity safeguards employed to protect memory include, for example, data execution prevention and address space layout randomization. Data execution prevention safeguards can either be hardware-enforced or software-enforced with hardware providing the greater strength of mechanism.\n\nBuffer overflows can manifest as stack overflows, heap overflows integer overflows and format string overflows. Each type of overflow is dependent upon the underlying application language and the context in which the overflow is executed.\n\nInteger overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. \n\nAlmost all known web servers, application servers, and web application environments are susceptible to buffer overflows. Proper validation of user input is required to mitigate the risk. Notably, limiting the size of the strings a user is allowed to input to a program to a predetermined, acceptable length.\n\nA code review, static code analysis or active vulnerability or fuzz testing are methods used to identify overflows within application code."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
