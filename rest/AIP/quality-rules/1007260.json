{
    "id": 1007260,
    "name": "Avoid Command Injection - Improper Neutralization of Special Elements used in an OS Command (PHP)",
    "href": "AIP/quality-rules/1007260",
    "critical": true,
    "associatedValueName": "Reasoning",
    "description": "A command execution vulnerability occurs when user input is embedded unsanitized into a system command. It allows an attacker to terminate the intended command and to append arbitrary system commands for execution. Common character sequences to separate commands are semicolons (;), boolean operators (&|), $(subcommands), `backticks`, and newline characters (%0a).",
    "output": "This report lists all artifacts that allow command injection through use of unsanitized user input. \nThis QR provides the following information:\nArtifact Full Name",
    "rationale": "Allowing command injection can lead allows an attacker to terminate the intended command and to append arbitrary system commands for execution.",
    "reference": "https://cwe.mitre.org/data/definitions/78.html\nhttps://www.owasp.org/index.php/Command_Injection",
    "remediation": "It is highly recommended to avoid invoking system commands from a web application whenever possible. If must, user input should be sanitized with built-in function escapeshellcmd() on the whole command or by escaping all command arguments with the built-in function escapeshellarg().",
    "remediationSample": "<?php\n\n$pass = $_GET[\"password\"];\nexec(\"/bin/cat /usr/share/dict/words | grep \" . escapeshellcmd($pass), $output, $status);\n\n?>",
    "sample": "<?php\n\n$pass = $_GET[\"password\"];\nexec(\"/bin/cat /usr/share/dict/words | grep \" . $pass, $output, $status);\n\n\n?>",
    "total": "Number of Artifacts",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 5,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-78",
            "name": "OS Command Injection Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to sanitize user input in use as operating system commands\n\nConsequence\nSoftware unaware of OS command control incurs the risk of unauthorized command execution, possibly used to disable the software, or possibly leading to unauthorized read and modify data access\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the in the platform action to be executed by the execution environment; none of the callable or method control element of the transformation sequence being a vetted sanitization control element from the list of vetted sanitization control elements.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-78",
            "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
            "url": "https://cwe.mitre.org/data/definitions/78.html",
            "description": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70261",
            "name": "The application must protect from command injection.",
            "url": null,
            "description": "A command injection attack is an attack on a vulnerable application where improperly validated input is passed to a command shell setup in the application. The result is the ability of an attacker to execute OS commands via the application.\n\nA command injection allows an attacker to execute their own commands with the same privileges as the application executing.\n\nThe following is an example of a URL based command injection attack.\n\nBefore alteration:\nhttp://sitename/cgi-bin/userData.pl?doc=user1.txt\n\nExample URL modified: \nhttp://sitename/cgi-bin/userData.pl?doc=/bin/ls|\n\nThe result is the execution of the command \u201c/bin/ls\u201d which could allow the attacker to list contents of the directory via the browser.\n\nThe following is a list of functions vulnerable to command injection sorted according to language.  \n\nLanguage Functions/Characters\n- C/C++  - system(), popen(), execlp(), execvp(), ShellExecute(), ShellExecuteEx(), _wsystem()\n- Perl - system, exec, `,open, |, eval, /e\n- Python - exec, eval, os.system, os.popen, execfile, input, compile\n- Java - Class.forName(), Class.newInstance(), Runtime.exec()"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
