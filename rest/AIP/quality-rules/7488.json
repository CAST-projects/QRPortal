{
    "id": 7488,
    "name": "Lazy fetching should be used for Hibernate collection",
    "href": "AIP/quality-rules/7488",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "associatedValueName": "Field Name",
    "description": "This rule reports all collection association (set, list, bag, idbag, map) that don't use lazy fetching strategy. This strategy is set through the lazy property set to \"true\".",
    "output": "List all Hibernate Entity Property and JPA Entity Property of type collection that does not use lazy fetching.\n\nIt provides the following information:\n Hibernate Entity Property Full Name or JPA Entity Property Full Name",
    "rationale": "In a lazy association, the associated object or collection is fetched when it's first accessed. This results in a new request to the database (unless the associated object is cached). This option is almost always used for collection mappings (it should be the default, and we recommend that you consider it as a default for all your collection mappings). Generally, the performance benefits are such that you will want to use lazy instantiation wherever possible (compared with the massive task of reading in all of the entities concerned)\n\nWhen eager fetching is used, the associated object or collection is fetched together with the owning object, using an SQL outer join, and no further database request is required. But the issue is that it will always be done like this and if the number of rows is high, the performance will be affected.",
    "reference": "Hibernate in Action (ISBN 1932394-15-X) p 148\nhttps://thoughts-on-java.org/entity-mappings-introduction-jpa-fetchtypes/\nhttps://howtodoinjava.com/hibernate/lazy-loading-in-hibernate/",
    "remediation": "You need to make sure to use the right FetchType for your use case to avoid common Hibernate performance issues. For most use cases, the FetchType.LAZY is a good choice.\n\nEAGER fetching tells Hibernate to get the related entities with the initial query. This can be very efficient because all entities are fetched with only one query. But in most cases it just creates a huge overhead because you select entities you don\u2019t need in your use case.\n\nYou can prevent this with FetchType.LAZY. This tells Hibernate to delay the initialization of the relationship until you access it in your business code. The drawback of this approach is that Hibernate needs to execute an additional query to initialize each relationship.",
    "remediationSample": "<hibernate-mapping >\n  \n  <class name=\"A\" table =\"A\"> \n    <id name=\"id\">\n      <generator class=\"increment\"/>\n    </id>\n\n    // FIXED\n    <set name=\"b_items\" lazy=\"true\" table =\"B\"> \n      <key column=\"B_ID\"/>\n      <one-to-many class=\"B\"/>\n    </array>\n  </class>\n\n</hibernate-mapping>\n\nRemediation sample for Sample-2 (annotation)\n\n@Entity\n@Table(name = \"USER\")\npublic class UserLazy implements Serializable { \n    @Id\n    @GeneratedValue\n    @Column(name = \"USER_ID\")\n    private Long userId;\n \n    @OneToMany(fetch = FetchType.LAZY, mappedBy = \"user\")  //FIXED\n    private Set<OrderDetail> orderDetail = new HashSet();\n    //standard getters and setters\n}",
    "sample": "<hibernate-mapping >\n  \n  <class name=\"A\" table =\"A\"> \n    <id name=\"id\">\n      <generator class=\"increment\"/>\n    </id>\n\n    // VIOLATION \n    <set name=\"b_items\" lazy=\"false\" table =\"B\"> \n      <key column=\"B_ID\"/>\n      <one-to-many class=\"B\"/>\n    </array>\n  </class>\n\n</hibernate-mapping>\n\nSample-2 Using annotations\n\n@Entity\n@Table(name = \"USER\")\npublic class UserLazy implements Serializable { \n    @Id\n    @GeneratedValue\n    @Column(name = \"USER_ID\")\n    private Long userId;\n \n    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"user\")  //VIOLATION\n    private Set<OrderDetail> orderDetail = new HashSet();\n    //standard getters and setters\n}",
    "total": "Number of Hibernate entity properties or JPA entity properties of type collection",
    "alternativeName": "Ensure to use a lazy fetching strategy when the table contains lot of rows",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61019,
            "name": "Efficiency - SQL and Data Handling Performance",
            "href": "AIP/technical-criteria/61019",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
