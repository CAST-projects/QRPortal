{
    "id": 4578,
    "name": "Collection interfaces should be used as method return types instead of their implementation classes",
    "href": "AIP/quality-rules/4578",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Returned Type Full Name",
    "description": "When a collection is returned from a method, it should be of the Interface type, and not as the Class type. Collections are considered to be any classes implementing java.util.Collection, java.util.Collection<E>, java.util.Map or java.util.Map<U,V> or one of their sub-interfaces.",
    "output": "This report lists all the Methods not using the Interfaces for Collection types. It provides the following information:\n - Method full name\n - Returned Type Full Name",
    "rationale": "Using the implementation class of a collection as the return type of your method ties your code to this specific implementation and makes it difficult to change the implementation class in the future.\n\nFor example, if you use the java.util.Collection interface, you can change your implementation class from a Set to a List or to a Queue according to your needs and performance requirements.",
    "reference": "http://java.sun.com/docs/books/tutorial/collections/interfaces/index.html\nhttps://en.wikipedia.org/wiki/Liskov_substitution_principle",
    "remediation": "Declare the type as an interface of a more appropriate collection.",
    "remediationSample": "/**\n     * @return the list of all dataset boxes present on the graphic view\n     */\n    public List<DataSetBaseBox> getDataSetBoxes()\n    {\n        List<DataSetBaseBox> dataSetBaseBoxes = new List<DataSetBaseBox>();  //Fixed\n        for (Component c : getComponents())\n        {\n            if (c instanceof DataSetBaseBox)\n            {\n                dataSetBaseBoxes.add((DataSetBaseBox)c);\n            }\n        }\n        return dataSetBaseBoxes;\n    }",
    "sample": "/**\n     * @return the list of all dataset boxes present on the graphic view\n     */\n    public ArrayList<DataSetBaseBox> getDataSetBoxes()\n    {\n        ArrayList<DataSetBaseBox> dataSetBaseBoxes = new ArrayList<DataSetBaseBox>();  //VIOLATION\n        for (Component c : getComponents())\n        {\n            if (c instanceof DataSetBaseBox)\n            {\n                dataSetBaseBoxes.add((DataSetBaseBox)c);\n            }\n        }\n        return dataSetBaseBoxes;\n    }",
    "total": "Number of methods which return type implements or extend java.lang.Collection, java.lang.Collection<T>, java.lang.Map or java.lang.Map<U,V>",
    "alternativeName": "Ensure you declare the type as an interface of a more appropriate collection",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
            "href": "AIP/technical-criteria/61020",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "href": "AIP/technical-criteria/61003",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
