{
    "id": 7712,
    "name": "Avoid public/protected setter for the generated identifier field",
    "href": "AIP/quality-rules/7712",
    "critical": false,
    "maxWeight": 7,
    "description": "Report all the setter methods of a persistent class that set the primary key and is not declared as private except in the case where the identifier must be set by the application. This field is determined by the <id> element in the mapping document (in the hibernate mapping XML files or the orm.xml file of JPA) or the @Id annotation in JPA. This field must be set by the application when:\n- the property: generator class is set to \"assigned\" \n- or when the annotation @GeneratedValue (javax.persitence.GeneratedValue) has not been set for the identifier field\n- or when the attribute generated-value has not been set for the identifier field in the orm.xml file\n\nExample: \n- hibernate standard\n<id name=\"username\" column=\"USERNAME\">\n      <generator class=\"assigned\"/>\n</id>\n\n- JPA annotation\n@Id\n// No @GeneratedValue declaration\nString username;\n\n- JPA with orm.xml file\n<id name=\"username\">\n    <column name=\"USERNAME\"/>\n    <!-- no generated-value declaration -->\n</id>",
    "output": "List all setter methods of a persistent class that set the primary key and is not declared as private.\n\nIt provides the following information:\n Method full name",
    "rationale": "A primary key value must never change after it's first assigned. Since it is a generated key, it is automatically set by Hibernate, another JPA implementation or by other provider.\nThe actual behavior when an application tries to modify the value of a primary key is not defined.",
    "reference": "Hibernate in Action (ISBN 1932394-15-X) p 89\nJava Persistence with Hibernate (ISBN 1-932394-88-5) p 163\nThe Java Persistence API ( ISBN 1-932394-88-5) p 163, 416\nhttp://docs.jboss.org/hibernate/core/3.3/reference/en/html/tutorial.html#tutorial-firstapp-firstclass\nhttp://burtbeckwith.com/blog/?p=53",
    "remediation": "Set the setter method as private.",
    "remediationSample": "------> Sample.java:\npublic class Sample {\n   private long id;\n...\n\n  private void setId(long id) { // FIXED\n     this.id = id;\n  }\n\n   public Long getId() {\n      return id;\n   }\n}",
    "sample": "------> sample.hbm.xml:\n...\n<class name=\"Sample\" table=\"SAMPLE\">\n           <id name=\"id\" column=\"id\" type=\"long\">\n                  <generator class=\"sequence\"/>\n           </id>\n           ...\n</class>\n\n------> Sample.java:\npublic class Sample {\n   private long id;\n...\n\n  public void setId(long id) { // VIOLATION\n     this.id = id;\n  }\n\n   public Long getId() {\n      return id;\n   }\n}",
    "total": "Number of setter methods of a persistent class that set the primary key",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
