{
    "id": 8028,
    "name": "Avoid missing default in switch statements",
    "href": "AIP/quality-rules/8028",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for artifacts that contain no 'default' statement in a 'switch' block.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences",
    "rationale": "The keyword 'default' is executed when none of the conditions being tested for in the switch statement are met or executed. Having no default keyword, means that there is no backup. The cases that are \"impossible\" today are those most likely to be the causes of untraceable bugs in the future, when the impossible changes to the standard.",
    "reference": "CISQ rule: ASCMM-MNT-1.",
    "remediation": "Add the 'default' statement with appropriate handling of unexpected values.",
    "remediationSample": "// Sample for C/C++\nswitch(color)\n{\ncase Red:\n    // Handle red case\ncase Black:\n    // Handle black case\ndefault:\n    assert(false && \"Impossible node color\");\n    // Error recovery code\n}",
    "sample": "// Sample for C/C++\nswitch(color)\n{\ncase Red:\n    // Handle red case\ncase Black:\n    // Handle black case\n} // VIOLATION",
    "total": "Number of non-abstract artifacts (methods, functions, constructors, destructors, finalizers)",
    "alternativeName": "(undefined)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        },
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "AIP/technologies/1050001"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-1",
            "name": "Control Flow Transfer Control Element outside Switch Block",
            "url": null,
            "description": "Objective\nAvoid the unconditional transfer of control flow outside of switch structures\n\nConsequence\nSoftware that does not follow the principles of structured programming degrades comprehensibility\n\nMeasure Element\nNumber of instances where an unconditional transfer of control is located outside the branching based on the value of a storable element\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-478",
            "name": "Missing Default Case in Switch Statement",
            "url": "https://cwe.mitre.org/data/definitions/478.html",
            "description": "The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
