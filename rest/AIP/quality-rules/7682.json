{
    "id": 7682,
    "name": "Avoid domain model depending on other Java API",
    "href": "AIP/quality-rules/7682",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Associated Value",
    "description": "Reports any direct or indirect (via successive calls) calls from persistent classes' artifact to the methods of the following packages:\n- java.sql.*\n- javax.sql.*\n- javax.naming.* (include javax.naming.directory, javax.naming.event, javax.naming.ldap, javax.naming.spi)\n- javax.jms.*\n\nNote that we don't take into account method parameters and exception that belongs to these packages.\n\nThis list can be completed with the threshold.",
    "output": "List all persistent classes' artifact that call other JAVA API.\n\nIt provides the following information:\n Artifact Full Name",
    "rationale": "The domain model implementation is usually a central, organizing component; it's reused heavily whenever you implement new application functionality. For this reason, you should be prepared to go to some lengths to ensure that concerns other than business aspects don't leak into the domain model implementation. The domain model should be concerned only with modeling the business domain. When these concerns start to appear in the domain model classes, we call this an example of leakage of concerns.\nFor example, code in the domain model shouldn't perform JNDI lookups or call the database via the JDBC API. This allows you to reuse the domain model implementation virtually anywhere. Most importantly, it makes it easy to unit test the domain model (in JUnit, for example) outside of any application server or other managed environment.",
    "reference": "Hibernate in Action (ISBN 1932394-15-X) p 64",
    "remediation": "Make these calls in another layers.",
    "sample": "----> a.hbm.xml\n<hibernate-mapping >\n  \n  <class name=\"A\" table=\"A\" lazy=\"true\">\n    <id name=\"id\" column=\"A_ID\">\n      <generator class=\"increment\"/>\n    </id>\n  </class>\n\n</hibernate-mapping>\n\n----> Java Files\npublic class A {\n  private Integer id;\n   javax.naming.Context ctx;  // VIOLATION\n  ...\n  public void aMethod() {\n    // VIOLATION\n    AnObject a = (AnObject) ctx.lookup(\"AnObject\");\n  }\n  ...\n}",
    "total": "The number of persistent classes's artifacts",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66009,
            "name": "Architecture - Reuse",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
