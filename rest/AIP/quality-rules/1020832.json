{
    "id": 1020832,
    "name": "Avoid using javascript HTTP request in Angular Application",
    "href": "AIP/quality-rules/1020832",
    "critical": true,
    "description": "This rule will check that http requests are not carried out using an API prone to cross-site script inclusion such as XMLHttpRequest, axios and fetch. We recommand using the official HttpClient Angular module. \n\nCross-site script inclusion, also known as JSON vulnerability, can allow an attacker's website to read data from a JSON API. The attack works on older browsers by overriding native JavaScript object constructors, and then including an API URL using a <script> tag. This attack is only successful if the returned JSON is executable as JavaScript. Servers can prevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the well-known string \")]}',\\n\".\n\nAngular's HttpClient library recognizes this convention and automatically strips the string \")]}',\\n\" from all responses before further parsing.\n\nThis rule is compliant with OWASP A3 2013 and A7 2017 and CWE-79 Reflected XSS recommendations.",
    "output": "Line and column for each violation\nAssociated value => number of violations found",
    "rationale": "The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.",
    "reference": "https://angular.io/guide/security#xssi",
    "remediation": "Always use HttpClient Angular Module",
    "remediationSample": "import { HttpModule } from '@angular/http';\n\nclass MyClass {\n  constructor(private http: Http) {\n  }\n  this.http.get(url).subscribe(res => console.log(res.text()));\n}",
    "sample": "//XMLHttpRequest\nvar xhttp = new XMLHttpRequest();\nxhttp.open(\"GET\", \"filename\", true);\n\n\n//fetch \nfetch(url).then(function() {\n})\n.catch(function() {\n});\n\n\n// axios \naxios.get(url).then(function() {\n})\n.catch(function() {\n});",
    "total": "Number of TypeScript artifacts",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-SYSTEM-LEVEL",
            "name": "System Level Rule",
            "url": null,
            "description": null
        },
        {
            "standard": "AIP",
            "id": "AIP-TOP-PRIORITY",
            "name": "Top Priority Rule",
            "url": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-79",
            "name": "Cross-site scripting",
            "url": null,
            "description": "Remove instances where a user input is ultimatelydisplayed to the user, without any sanitization (based on a list of vetted sanitization functions, methods, procedures, stored procedures, sub-routines, etc.) of the user input value between the user input and the statement."
        },
        {
            "standard": "CWE",
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "url": "https://cwe.mitre.org/data/definitions/79.html",
            "description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."
        },
        {
            "standard": "OWASP",
            "id": "A3-2013",
            "name": "Cross-Site Scripting (XSS)",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victims' browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        },
        {
            "standard": "OWASP",
            "id": "A7-2017",
            "name": "Cross-Site Scripting (XSS)",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        }
    ]
}
