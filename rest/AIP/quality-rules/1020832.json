{
    "id": 1020832,
    "name": "Avoid using javascript HTTP request in Angular Application",
    "href": "AIP/quality-rules/1020832",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check that http requests are not carried out using an API prone to cross-site script inclusion such as XMLHttpRequest, axios and fetch. We recommand using the official HttpClient Angular module. \n\nCross-site script inclusion, also known as JSON vulnerability, can allow an attacker's website to read data from a JSON API. The attack works on older browsers by overriding native JavaScript object constructors, and then including an API URL using a <script> tag. This attack is only successful if the returned JSON is executable as JavaScript. Servers can prevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the well-known string \")]}',\\n\".\n\nAngular's HttpClient library recognizes this convention and automatically strips the string \")]}',\\n\" from all responses before further parsing.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.",
    "reference": "https://angular.io/guide/security#xssi",
    "remediation": "Always use HttpClient Angular Module",
    "remediationSample": "import { HttpModule } from '@angular/http';\n\nclass MyClass {\n  constructor(private http: Http) {\n  }\n  this.http.get(url).subscribe(res => console.log(res.text()));\n}",
    "sample": "//XMLHttpRequest\nvar xhttp = new XMLHttpRequest();\nxhttp.open(\"GET\", \"filename\", true);\n\n\n//fetch \nfetch(url).then(function() {\n})\n.catch(function() {\n});\n\n\n// axios \naxios.get(url).then(function() {\n})\n.catch(function() {\n});",
    "total": "Number of TypeScript artifacts",
    "alternativeName": "(undefined)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-79",
            "name": "Cross-site Scripting Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to sanitize user input in use in output generation operations\n\nConsequence\nSoftware featuring weak output generation practices incurs the risk of arbitrary code execution, the risk of sensitive data being compromised, and many other nefarious consequences\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the in the user interface WritesUI action; none of the callable or method control element of the transformation sequence being a vetted sanitization control element from the list of vetted sanitization control elements.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "url": "https://cwe.mitre.org/data/definitions/79.html",
            "description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A3-2013",
            "name": "Cross-Site Scripting (XSS)",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victims' browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        },
        {
            "standard": "OWASP",
            "id": "A7-2017",
            "name": "Cross-Site Scripting (XSS)",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70257",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "url": null,
            "description": "XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.\n\nXSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, \"&lt;\" is the HTML encoding for the \"<\" character. If the encoding is performed, the script code will not execute.\n\nThere are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.\n\nWhen the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker\u2019s script is executed in the victims browser with the trust permissions assigned to the site.\n\nThere are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.\n\nTo address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.\n\nExamples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.\n  \nThe site is available by pointing your browser to https://www.owasp.org."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
