{
    "id": 1043048,
    "name": "Avoid having cookie with an overly broad domain (C#)",
    "href": "AIP/quality-rules/1043048",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The cookies with an overly broad domain can be accessed by all web applications deployed on this domain and its sub-domains. A cookie with sensitive data, but with too broad a domain, could hence be read and tampered with by a less secure and untrusted application.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.",
    "reference": "https://cwe.mitre.org/data/definitions/287.html \nhttps://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\n\nOWASP Top 10 2007 -A6 Information Leakage and Improper Error Handling\nOWASP Top 10 2010 -A6-Security Misconfiguration\nOWASP Top 10 2013 -A6-Sensitive Data Exposure\nOWASP Top 10 2017 -A3-Sensitive Data Exposure",
    "remediation": "Do not provide a domain with wildcard access",
    "remediationSample": "class CookieWithOverlyBroadDomain\n{\n    static public void AddCookie()\n    {\n        HttpCookie cookie = new HttpCookie(\"sessionID\");\n        cookie.Domain = \"secure.example.com\";\n    }\n}",
    "sample": "class CookieWithOverlyBroadDomain\n{\n    static public void AddCookie()\n    {\n        HttpCookie cookie = new HttpCookie(\"sessionID\");\n        cookie.Domain = \"*.example.com\";\n    }\n}",
    "total": "Number of methods using HttpCookie",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66066,
            "name": "Secure Coding - Encapsulation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138636,
            "name": "ASP.NET",
            "href": "AIP/technologies/138636"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-287",
            "name": "Improper Authentication",
            "url": "https://cwe.mitre.org/data/definitions/287.html",
            "description": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-IA-9",
            "name": "Service Identification and Authentication",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/IA-9",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A2-2013",
            "name": "Broken Authentication and Session Management",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A2-Broken Authentication and Session Management",
            "description": "Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities."
        },
        {
            "standard": "OWASP",
            "id": "A2-2017",
            "name": "Broken Authentication",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
            "description": "Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities temporarily or permanently."
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "M4-2016",
            "name": "Insecure Authentication",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M4-Insecure_Authentication",
            "description": "Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "url": null,
            "description": "Note: Requirement 6.5.10 is a best practice until June 30, 2015, after which it becomes a requirement."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
