{
    "id": 1034072,
    "name": "Avoid mixing trusted and untrusted data in HTTP requests (PHP)",
    "href": "AIP/quality-rules/1034072",
    "critical": true,
    "severity": 30,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.php.security",
        "href": "AIP/extensions/com.castsoftware.php.security"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "Using Psalm data-flow engine, this quality rule detects paths from user input methods down to session setter methods, which mix trusted and untrusted data in the same data structure.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.",
    "reference": "CWE-501: Trust Boundary Violation\nhttps://cwe.mitre.org/data/definitions/501.html\n\nOpen Web Application Security Project (OWASP)\nOWASP Top Ten 2017 - A3:2017-Sensitive Data Exposure\nhttps://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\n\nOWASP Top Ten 2021 Category A04:2021 - Insecure Design\nhttps://owasp.org/Top10/A04_2021-Insecure_Design/",
    "remediation": "Perform input data validation before storing or transmitting the data.",
    "remediationSample": "/**\n * @psalm-taint-escape session\n */\nfunction my_escaping_function_for_session(string $input) : string {\n    // Check that $input belongs to a white-list of acceptable data for $_SESSION.\n}\n\n$usrname = $_GET[\"usrname\"];\nif (!isset($_SESSION[\"attr_user\"])) {    \n    $usrname = my_escaping_function_for_session($usrname);  // USE A FUNCTION ANNOTATED WITH @psalm-taint-escape session\n    $_SESSION[\"attr_user\"] = $usrname;                      // FIXED\n}",
    "sample": "$usrname = $_GET[\"usrname\"];\nif (!isset($_SESSION[\"attr_user\"])) {\n    $_SESSION[\"attr_user\"] = $usrname;             // VIOLATION\n}",
    "total": "Number of PHP artifacts",
    "alternativeName": "Ensure input data is validated before storing it in a session",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-501",
            "name": "Trust Boundary Violation",
            "href": "AIP/quality-standards/CWE/items/CWE-501",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-10",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A3-2017",
            "standard": "OWASP"
        },
        {
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A6-2013",
            "standard": "OWASP"
        },
        {
            "id": "A04-2021",
            "name": "Insecure Design",
            "href": "AIP/quality-standards/OWASP/items/A04-2021",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        },
        {
            "id": "STIG-V-222596",
            "name": "The application must protect the confidentiality and integrity of transmitted information.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222596",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
