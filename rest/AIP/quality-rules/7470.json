{
    "id": 7470,
    "name": "Avoid doing select on Datatable in loop",
    "href": "AIP/quality-rules/7470",
    "critical": true,
    "description": "This metric lists all the location where a call to a Select method is done on a DataTable in a loop.",
    "output": "List all artifacts where a call to a Select method of a datatable is done in a loop.",
    "rationale": "Calling the Select method on a DataTable in a loop generally involves performance problems because the data is not indexed.\nIt is better to use indexed access methods.",
    "reference": "CISQ rule: ASCPEM-PRF-8.",
    "remediation": "Rather use the .Find method if using the Primary Key or create a DataView (with the required columns on sort) on the required columns and use the Find/FindRows methods to retrieve the data repeatedly because this will use indexed data.\nIf using DataView, use the constructor with all arguments to avoid index rebuilding.",
    "remediationSample": "// Replace LoopWithSelect method by:\nprivate void LoopWithFind()\n{\n   DataView  dv = new DataView( dataSet11.DataTable1, \"\", \"Column1\", DataViewRowState.CurrentRows);\n   for (int i = 0; i < m_iTotalLoop; i++ )\n      dv.Find(i);\n}",
    "sample": "..\ndelegate void TestFunction();\nprivate const int m_iTotalRows = 5000;\nprivate const int m_iTotalLoop = 1000;\n\nprivate void FillDataSet() \n{\n   for (int i = 0; i < m_iTotalRows; i++)\n       dataSet11.DataTable1.AddDataTable1Row(i);\n}\n\nprivate void LoopWithSelect()\n{\n   for (int i = 0; i < m_iTotalLoop; i++ )\n      dataSet11.DataTable1.Select(\"Column1 = \" + i);\n}",
    "total": "Total number of artifacts doing a select on a datatable",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "AIP/technologies/141901"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-8",
            "name": "Control Elements Requiring Significant Resource Element within Control Flow Loop Block",
            "url": null,
            "description": "Objective\nDetection of occurrences of this pattern helps decrease software resource waste by preventing the repeated consumption of resource due to resource consuming operations found directly or indirectly within loops.\n\nConsequence\nSoftware that is coded so as to execute expensive computations repeatedly (such as in loops) requires excessive computational resources when the usage and data volume grow\n\n"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
