{
    "id": 4612,
    "name": "Avoid using native Methods (JNI)",
    "href": "AIP/quality-rules/4612",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Native Method name",
    "description": "List all artifacts that call a native method except native methods contained in the libraries defined by the threshold parameter. \nThe threshold is a parameter and can be changed at will with libraries that you consider to be safe.\nSee : CWE-111: Direct Use of Unsafe JNI",
    "output": "This report lists all artifacts using native methods except those contained in libraries defined by the parameter.\nIt provides the following information:\n - Artifact full name\n - Native Method name",
    "rationale": "JNI is one of the most serious cause of application server crash that can be due for example to buffer overflow. Even if your code works on a plateform, it doesn't mean that it will work on other plateform because the internals of JVMs differ.\nIn case of crash, your JVM suplier's support will probably ask you to remove these calls before investigating your issue.\n\nAlso, for portability purposes, native Methods should not be used. Native Methods could be compared to Interfaces to encapsulate calls to C Methods and Functions. Doing so relies on having the appropriate environment setup at the operating system level.",
    "reference": "http://publib.boulder.ibm.com/infocenter/iseries/v5r4/index.jsp?topic=%2Frzaha%2Fothlang.htm\nhttp://en.wikipedia.org/wiki/Java_Native_Interface#Pitfalls\nhttps://cwe.mitre.org/data/definitions/111.html ",
    "total": "Number of artifacts",
    "alternativeName": "(undefined)",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61004,
            "name": "Architecture - OS and Platform Independence",
            "weight": 3,
            "critical": false
        },
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-111",
            "name": "Direct Use of Unsafe JNI",
            "url": "https://cwe.mitre.org/data/definitions/111.html",
            "description": "When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java."
        }
    ],
    "parameters": [
        {
            "name": "Ignore Libraries",
            "description": "Native methods contained in the libraries will be ignored",
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        "rt.jar"
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
