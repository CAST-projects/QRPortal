{
    "id": 1027096,
    "name": "Avoid raising exceptions in unexpected location",
    "href": "AIP/quality-rules/1027096",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "extension": {
        "name": "com.castsoftware.dotnet",
        "href": "AIP/extensions/com.castsoftware.dotnet"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "Some methods are expected to always work and not to throw exceptions. This rule will raise a violation when these methods throw an exception.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Methods that are not expected to throw exceptions can be categorized as follows:\n    -Event Accessor Methods\n    -Equals Methods\n    -GetHashCode Methods\n    -ToString Methods\n    -Static Constructors\n    -Dispose Methods\n    -Equality Operators\n    -Implicit Cast Operators\n\nLimitations:\n*The following exceptions can be thrown from a property get method:\n    System.InvalidOperationException and all derivatives (including System.ObjectDisposedException)\n    System.NotSupportedException and all derivatives\n    System.ArgumentException (only from indexed get)\n    KeyNotFoundException (only from indexed get)\n*The following exceptions can be thrown from an event accessor:\n    System.InvalidOperationException and all derivatives (including System.ObjectDisposedException)\n    System.NotSupportedException and all derivatives\n    ArgumentException and derivatives\n*The versions of GetHashCode that take an argument can throw an ArgumentException. However, Object.GetHashCode should never throw an exception.",
    "reference": "https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1065",
    "remediation": "Change the logic so that it no longer must throw an exception.",
    "remediationSample": "public class Person : IEquatable<Person>\n{\n   public string lName;\n\n  public override bool Equals(Object obj)\n   {\n      Person pers = obj as Person;\n      if (pers == null)\n         return false;  // Compliant\n      else\n         return (this.lName== pers.lName);\n   }\n}",
    "sample": "public class Person : IEquatable<Person>\n{\n   public string lName;\n\n  public override bool Equals(Object obj)\n   {\n      Person pers = obj as Person;\n      if (pers == null)\n         throw new ArgumentException(\"...\");  //VIOLATION\n      else\n         return (this.lName== pers.lName);\n   }\n}",
    "total": "Number of methods",
    "alternativeName": "Do not raise exceptions in unexpected locations",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063119,
            "name": "PCI-Requirement-6.5.5 - Improper error handling",
            "href": "AIP/technical-criteria/1063119",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "href": "AIP/technical-criteria/61014",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-11",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-11",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/quality-standards/PCI-DSS4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
