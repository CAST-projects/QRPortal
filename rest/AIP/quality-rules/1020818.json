{
    "id": 1020818,
    "name": "Avoid disabling xsrf check in HttpClientXsrfModule",
    "href": "AIP/quality-rules/1020818",
    "critical": true,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "In Angular, when using HttpClientXsrfModule module Cross-Site forgery protection is enabled by default. Disabling the protection will expose your application to security issue. This rule is compliant with OWASP 2013 A8 - Cross-Site Request Forgery (CSRF) recommendation",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "XSRF takes advantage the fact that most web apps allow attackers to predict all the details of a particular action. Because browsers send credentials like session cookies automatically, attackers can create malicious web pages which generate forged requests that are indistinguishable from legitimate ones.",
    "reference": "https://angular.io/api/common/http/HttpClientXsrfModule\nhttps://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)\nhttp://cwe.mitre.org/data/definitions/352.html",
    "remediation": "Ensure you have not disable XSRF module in Angular Http Module",
    "remediationSample": "@NgModule({\n  declarations: [\n      AppComponent,\n      ArtistSearchComponent\n  ],\n  imports: [\n      BrowserModule,\n      FormsModule,\n      HttpClientModule,\n      HttpClientXsrfModule.withOptions({\n          cookieName: 'My-Xsrf-Cookie',\n          headerName: 'My-Xsrf-Header',\n      }),\n  ],\n  providers: [\n\n      HttpErrorHandler,\n      MessageService\n\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }",
    "sample": "@NgModule({\n  declarations: [\n      AppComponent,\n      ArtistSearchComponent\n  ],\n  imports: [\n      BrowserModule,\n      FormsModule,\n      HttpClientModule,\n      HttpClientXsrfModule.disable(),\n      HttpClientXsrfModule.withOptions({\n          cookieName: 'My-Xsrf-Cookie',\n          headerName: 'My-Xsrf-Header',\n      }),\n  ],\n  providers: [\n\n      HttpErrorHandler,\n      MessageService\n\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }",
    "total": "Number of TypeScript classes",
    "alternativeName": "xsrf check should be enabled in HttpClientXsrfModule module to activate Cross-Site forgery protection.",
    "businessCriteria": [
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062308,
            "name": "OWASP-2013-A8 Cross-Site Request Forgery (CSRF)",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062322,
            "name": "OWASP-2017-A2 Broken Authentication",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-352",
            "name": "Cross-Site Request Forgery (CSRF)",
            "url": "https://cwe.mitre.org/data/definitions/352.html",
            "description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
        },
        {
            "standard": "CWE",
            "id": "CWE-489",
            "name": "Active Debug Code",
            "url": "https://cwe.mitre.org/data/definitions/489.html",
            "description": "The application is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-IA-9",
            "name": "Service Identification and Authentication",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/IA-9",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A2-2017",
            "name": "Broken Authentication",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
            "description": "Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities temporarily or permanently."
        },
        {
            "standard": "OWASP",
            "id": "A8-2013",
            "name": "Cross-Site Request Forgery (CSRF)",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)",
            "description": "A CSRF attack forces a logged-on victims' browser to send a forged HTTP request, including the victims' session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victims' browser to generate requests the vulnerable application thinks are legitimate requests from the victim."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.9",
            "name": "Cross-site request forgery (CSRF)",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "url": null,
            "description": "Note: Requirement 6.5.10 is a best practice until June 30, 2015, after which it becomes a requirement."
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.9",
            "name": "Cross-site request forgery (CSRF)",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "url": null,
            "description": "Note: Requirement 6.5.10 is a best practice until June 30, 2015, after which it becomes a requirement."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70259",
            "name": "The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities.",
            "url": null,
            "description": "Cross-Site Request Forgery (CSRF) is an attack where a website user is forced to execute an unwanted action on a website that he or she is currently authenticated to. An attacker, through social engineering (e.g., e-mail or chat) creates a hyperlink which executes unwanted actions on the website the victim is authenticated to and sends it to the victim. If the victim clicks on the link, the action is executed unbeknownst to the victim.\n\nA CSRF attack executes a website request on behalf of the user which can lead to a compromise of the user\u2019s data. What is needed to be successful is for the attacker to know the URL, an authenticated application user, and trick the user into clicking the malicious link.\n\nWhile XSS is not needed for a CSRF attack to work, XSS vulnerabilities can provide the attacker with a vector to obtain information from the user that may be used in mitigating the risk. The application must not be vulnerable to XSS as an XSS attack can be used to help defeat token, double-submit cookie, referrer and origin-based CSRF defenses."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
