{
    "id": 1020066,
    "name": "Avoid using Javascript Function constructor",
    "href": "AIP/quality-rules/1020066",
    "critical": false,
    "maxWeight": 7,
    "description": "Each time [\u2026] the Function constructor is called on a string representing source code, the script engine must start the machinery that converts the source code to executable code. This is usually expensive for performance \u2013 easily a hundred times more expensive than a simple function call, for example. \nAn exception will be made for Function('return this')(); . It is the best way to retrieve the global in both node and web with or without \"use strict\".",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "Using the Function constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.",
    "reference": "https://jsperf.com/function-vs-function/2 \nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
    "remediationSample": "var f1 = function() { \n var x = 1; \n console.log('1'); \n}",
    "sample": "var f2 = new Function('var x = 1;console.log(\"2\");');",
    "total": "Number of Javascript artifacts",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-HA-INTERNAL",
            "name": "HA - internal failure mitigation",
            "url": "",
            "description": "Quality rules related to the presence of occurrences of structural coding patterns that are known to cause functional failures"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-99",
            "name": "Unsanitized user input used to access a named resource",
            "url": null,
            "description": "Remove instances where a user input is ultimately used to access a resource by name, without any sanitization (based on a list of vetted sanitization functions, methods, procedures, stored procedures, sub-routines, etc.) of the user input value between the user input and the statement. "
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        }
    ]
}
