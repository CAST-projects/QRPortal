{
    "id": 1007268,
    "name": "Avoid SQL Injection - Improper Neutralization of Special Elements used in an SQL Command without quotes (PHP)",
    "href": "AIP/quality-rules/1007268",
    "critical": true,
    "associatedValueName": "Reasoning",
    "description": "A sql injection vulnerability occurs when user input is embedded unsanitized into a SQL query.",
    "output": "This report lists all artifacts that raw user input that could lead to SQL injection without quotes.\nThis QR provides the following information:\nArtifact Full Name",
    "rationale": "An attacker can modify the SQL syntax and alter the query's target or result. This can lead to the retrieval of sensitive information from the database or to an attack against the underlying web server by using SQL file operations. An attacker can also elevate privileges if the SQL query is used for authentication. It is recommended to use prepared statements and to run the database user with the least privileges necessary.",
    "reference": "https://cwe.mitre.org/data/definitions/89.html",
    "remediation": "No quotes are used around the detected injection point in the SQL query. Thus, all applied operations to escape the data are insufficient because no quotes have to be broken in order to inject SQL syntax. In case a numerical value is expected, a typecast operation should be performed on the user input.",
    "remediationSample": "<?php\n\n$getid  = \"SELECT first_name, last_name FROM users WHERE user_id = {$id} LIMIT 1;\";\n\n?>",
    "sample": "<?php\n\n$getid  = \"SELECT first_name, last_name FROM users WHERE user_id = '\".addslashes($id).\"' LIMIT 1;\";\n\n?>",
    "total": "Number of Artifacts",
    "alternativeName": "Avoid SQL Injection - Improper Neutralization of Special Elements used in an SQL Command without quotes (PHP)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 5,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-89",
            "name": "SQL Injection Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to sanitize user input in use in SQL compilation operations\n\nConsequence\nSoftware unaware of SQL command control incurs the risk of unauthorized read, modify, and delete access to sensitive data\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the in the SQL compilation statement; none of the callable or method control element of the transformation sequence being a vetted sanitization control element from the list of vetted sanitization control elements.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-89",
            "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "url": "https://cwe.mitre.org/data/definitions/89.html",
            "description": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
