{
    "id": 1020724,
    "name": "Ensure that marked is sanitized",
    "href": "AIP/quality-rules/1020724",
    "critical": true,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "Marked does not sanitize the output HTML only when setting sanitize option to true",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Weaknesses in this attack-focused category do not properly filter and interpret special elements in user-controlled input which could cause adverse effect on the software behavior and integrity.",
    "reference": "https://expressjs.com/en/advanced/best-practice-security.html \nhttps://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities \nhttps://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities",
    "remediation": "Always enable the sanitize option to yes when using marked component.",
    "remediationSample": "var express = require('express'); \nvar app = express(); \nvar marked = require(\"marked\"); \n\nmarked.setOptions({ \n sanitize: true \n }); \n\napp.locals.marked = marked; \n\napp.get('/', function(req, res){ \n    res.send(\"<html><body>hello world<script type='text/javascript'>alert('got you')</script></body></html>\"); \n}); \n\napp.listen(3000);",
    "sample": "var express = require('express'); \nvar app = express(); \nvar marked = require(\"marked\"); \n\napp.locals.marked = marked; \n\napp.get('/', function(req, res){ \n    res.send(\"<html><body>hello world<script type='text/javascript'>alert('got you')</script></body></html>\"); \n}); \n\napp.listen(3000);",
    "total": "Number of javascript source codes using express and marked",
    "alternativeName": "Ensure enabling sanitize option for marked component to avoid any security hole",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-75",
            "name": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
            "url": "https://cwe.mitre.org/data/definitions/75.html",
            "description": "The software does not adequately filter user-controlled input for special elements with control implications."
        },
        {
            "standard": "CWE",
            "id": "CWE-159",
            "name": "Improper Handling of Invalid Use of Special Elements",
            "url": "https://cwe.mitre.org/data/definitions/159.html",
            "description": "The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
