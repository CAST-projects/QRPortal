{
    "id": 1101916,
    "name": "When using compound indexes, avoid having different indexes",
    "href": "AIP/quality-rules/1101916",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Number of violation occurrences",
    "description": "This report lists all artifacts with compound indexes and having different index ordering in collection access.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When using compound indexes, avoid having different indexes. Indeed, Mongo DB give the compound index, when we have index on more than two column, it is always good to have the indexes put the same way,it is highly recommended to have the indexes, either both positives(ascending) or either both negatives(descending).",
    "remediation": "Use instead indexes, either both positives(ascending) or either both negatives(descending)",
    "remediationSample": "MongoClient conn_str = new MongoClient(\"localhost\", 27017);\n        \n        DB db = conn_str.getDB(\"database\");\n        \n        DBCollection docColl = db.getCollection(\"document\");\n        \n        docColl.createIndex(new BasicDBObject(\"filed_1\",1), \n        \n        new BasicDBObject(\"_id\", 1), \n        \n        new BasicDBObject(\"filed_2\", 1));",
    "sample": "MongoClient conn_str = new MongoClient(\"localhost\", 27017);\n        \n        DB db = conn_str.getDB(\"database\");\n        \n        DBCollection docColl = db.getCollection(\"document\");\n        \n        docColl.createIndex(new BasicDBObject(\"filed_1\",1),\n        \n        new BasicDBObject(\"_id\", -1),\n        \n        new BasicDBObject(\"filed_2\", -1));",
    "total": "Number of MongoDB collection",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61024,
            "name": "Programming Practices - Structuredness",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
