{
    "id": 1039018,
    "name": "CWE-759: Avoid using cryptography hash with hardcoded salt (JEE)",
    "href": "AIP/quality-rules/1039018",
    "critical": true,
    "description": "When using some cryptography function, a hardcoded salt could compromise system security in a way that cannot be easily remedied. \nIt is never a good idea to hardcode a salt. Not only does a hardcoded salt allow all of the project's developers to view the salt, it also makes fixing the problem extremely difficult. Once the code is in production, the salt cannot be easily changed. If attackers know the value of the salt, they can compute \"rainbow tables\" for the application and more easily determine the hashed values. \n\n\nThis rule is compliant with OWASP M5 2016 and with CISQ-OMG ASCSM-CWE-327 recommendation.",
    "output": "JAVA methods",
    "rationale": "This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide. \n\nIt should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong.",
    "reference": "http://cwe.mitre.org/data/definitions/760.html",
    "remediation": "Do not use Hardcoded Salt.",
    "remediationSample": "PBEParameterSpec paramSpec =  new PBEParameterSpec(getSalt(), 2); // Violation FIXED ",
    "sample": "Sample 1 \n  ... \n    Encryptor instance = ESAPI.encryptor(); \n    String hash1 = instance.hash(input, \"2!@$(5#@532@%#$253l5#@$\"); \n    ... \n------------------------------------ \nSample 2 \n... \nprivate static final String salt = \"2!@$(5#@532@%#$253l5#@$\"; \n... \nPBEKeySpec pbeSpec=new PBEKeySpec(password); \nSecretKeyFactory keyFact=SecretKeyFactory.getInstance(CIPHER_ALG); \nPBEParameterSpec defParams=new PBEParameterSpec(salt,0); \nCipher cipher=Cipher.getInstance(CIPHER_ALG); \ncipher.init(cipherMode,keyFact.generateSecret(pbeSpec),defParams); \n... \n\nThis is a sample for Hardcoded PBE Salt.",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-327",
            "name": "Unvetted cryptographic algorithms",
            "url": null,
            "description": "Remove instances where the application uses a cryptographic list which is not part of the list of vetted cryptographic libraries. "
        },
        {
            "standard": "CWE",
            "id": "CWE-759",
            "name": "Use of a One-Way Hash without a Salt",
            "url": "https://cwe.mitre.org/data/definitions/759.html",
            "description": "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input."
        },
        {
            "standard": "CWE",
            "id": "CWE-760",
            "name": "Use of a One-Way Hash with a Predictable Salt",
            "url": "https://cwe.mitre.org/data/definitions/760.html",
            "description": "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input."
        },
        {
            "standard": "OWASP",
            "id": "M5-2016",
            "name": "Insufficient Cryptography",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M5-Insufficient_Cryptography",
            "description": "In order to exploit this weakness, an adversary must successfully return encrypted code or sensitive data to its original unencrypted form due to weak encryption algorithms or flaws within the encryption process."
        }
    ]
}
