{
    "id": 4580,
    "name": "Collection declarations should use interfaces instead of implementation classes",
    "href": "AIP/quality-rules/4580",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Collection Class Fullname",
    "description": "Report any field declaration whose type is a class that implements an interface of type java.lang.Collection, java.lang.Collection<T>, java.lang.Map or java.lang.Map<U,V> or that implements an interface that inherits from these any of the aforementioned interfaces.",
    "output": "This report lists all the fields initialized with the Collection and Map implementation class. It provides the following information:\n - Field Full Name\n - Collection Class Fullname",
    "rationale": "Using the implementation class of a collection as the type of your instance ties your code to this specific implementation and makes it difficult to change the implementation in the future.\n\nFor example, if you use the java.util.Collection interface, you can change your implementation class from a Set to a List or to a Queue according to your needs and performance requirements.",
    "reference": "http://java.sun.com/docs/books/tutorial/collections/interfaces/index.html\nhttps://stackoverflow.com/questions/12321177/arraylist-or-list-declaration-in-java/12321186",
    "remediation": "Declare the type as an interface of a more appropriate collection.",
    "remediationSample": "private List ok_01_08_field_declaration = new ArrayList(); //Fixed",
    "sample": "private ArrayList ko_02_08_initializer_declaration; // VIOLATION ,ArrayList is an implementation of the List interface.",
    "total": "Number of fields whose type implements or extends java.lang.Collection, java.lang.Collection<T>, java.lang.Map or java.lang.Map<U,V>",
    "alternativeName": "Ensure you declare the type as an interface of a more appropriate collection.",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
            "href": "AIP/technical-criteria/61020",
            "weight": 5
        },
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "href": "AIP/technical-criteria/61003",
            "weight": 5
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
