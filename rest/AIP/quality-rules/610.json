{
    "id": 610,
    "name": "Avoid circular references between header files",
    "href": "AIP/quality-rules/610",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "The depth of inclusion",
    "description": "This rule searches for circular references between header files.",
    "output": "Associated to each C++ header file with violations, the Quality Rule provides: \n- the depth of inclusion",
    "rationale": "Circular references between header files can lead to difficulties during the program compilation (or can even prevent the compilation).",
    "remediation": "The best answer to this problem is to reconsider the architecture of the program. Sometimes you can use forward declarations to avoid circular references. Using pointers instead of the class allows this to be achieved more easily.",
    "remediationSample": "// FILE C1.H \n#ifndef C1_H \n#define C1_H \nclass C2;\nclass C1 \n{ \n   public:\n       C1(); \n        C2 * x; \n}; \n#endif \n\n// FILE C2.H \n#ifndef C2_H \n#define C2_H \nclass C1;\nclass C2 \n{ \n   public:\n      C2(); \n      C1 * x; \n}; \n#endif",
    "sample": "// FILE C1.H \n#ifndef C1_H \n#define C1_H \n#include \"C2.h\" \nclass C2;\nclass C1 \n{ \n   public:\n      C1(); \n      C2 x; \n}; \n#endif\n\n\n// FILE C2.H \n#ifndef C2_H \n#define C2_H \n#include \"C1.h\" \nclass C1;\nclass C2 \n{ \n   public:\n       C2(); \n       C1 x; \n}; \n#endif",
    "total": "Number of C++ header files",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61001,
            "name": "Architecture - Multi-Layers and Data Access",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
