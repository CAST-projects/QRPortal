{
    "id": 1034052,
    "name": "Avoid second order XPath injection (PHP)",
    "href": "AIP/quality-rules/1034052",
    "critical": true,
    "severity": 30,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.php.security",
        "href": "AIP/extensions/com.castsoftware.php.security"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric uses Psalm data-flow engine to detect a call path where result from database query is sent to a Xpath query without prior validation and sanitization.\n\nVetted user input validations can be specified to Psalm data-flow engine using the \"@psalm-taint-escape xpath\" annotation.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software does not properly neutralize special elements that are used in Xpath query, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",
    "reference": "CWE-91: XML Injection (aka Blind XPath Injection)\nhttps://cwe.mitre.org/data/definitions/91.html\n\nCWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')\nhttps://cwe.mitre.org/data/definitions/643.html\n\nOpen Web Application Security Project (OWASP) \nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection\n\nOWASP Top Ten 2021 Category A03:2021 - Injection",
    "remediation": "Use an \"accept known good\" input validation strategy, i.e., use a white-list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.",
    "remediationSample": "<?php\n\n/**\n * @psalm-taint-escape xpath\n */\nfunction my_escaping_function_for_xpath(string $input) : string {\n    // Check that $input belongs to a white-list of acceptable Xpath queries.\n}\n\nfunction queryXmlExpressions(PDOStatement $stmt, SimpleXMLElement $xml) : void {\n    $stmt->execute();\n    $rows = $stmt->fetchAll();\n    foreach ($rows as $row) {\n        $expression = $row['expression'];\n        $expression = my_escaping_function_for_xpath($expression);  // USE A FUNCTION ANNOTATED WITH @psalm-taint-escape xpath\n        $xml->xpath($expression);                                   // FIXED\n    }\n}",
    "sample": "<?php\n\nfunction queryXmlExpressions(PDOStatement $stmt, SimpleXMLElement $xml) : void {\n    $stmt->execute();\n    $rows = $stmt->fetchAll();\n    foreach ($rows as $row) {\n        $expression = $row['expression'];\n        $xml->xpath($expression);                // VIOLATION\n    }\n}",
    "total": "Number of PHP artifacts",
    "alternativeName": "Ensure you validate Xpath queries constructed from database query",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062301,
            "name": "OWASP-2013-A1 - Injection",
            "href": "AIP/technical-criteria/1062301",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062321,
            "name": "OWASP-2017-A1 - Injection",
            "href": "AIP/technical-criteria/1062321",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062343,
            "name": "OWASP-2021-A03 - Injection",
            "href": "AIP/technical-criteria/1062343",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-91",
            "name": "XML Injection (aka Blind XPath Injection)",
            "href": "AIP/quality-standards/CWE/items/CWE-91",
            "standard": "CWE"
        },
        {
            "id": "CWE-643",
            "name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-643",
            "standard": "CWE"
        },
        {
            "id": "CWE-91",
            "name": "XML Injection (aka Blind XPath Injection)",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-91",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-643",
            "name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-643",
            "standard": "ISO-5055"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-10",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "CWE-91",
            "name": "XML Injection (aka Blind XPath Injection)",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-91",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "CWE-643",
            "name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-643",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "A1-2013",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2013",
            "standard": "OWASP"
        },
        {
            "id": "A1-2017",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2017",
            "standard": "OWASP"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "STIG-V-222604",
            "name": "The application must protect from command injection.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222604",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
