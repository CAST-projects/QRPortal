{
    "id": 1039028,
    "name": "Avoid weak encryption providing not sufficient key size (JEE)",
    "href": "AIP/quality-rules/1039028",
    "critical": true,
    "severity": 20,
    "maxWeight": 8,
    "extension": {
        "name": "com.castsoftware.jeerules",
        "href": "AIP/extensions/com.castsoftware.jeerules"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rules will report violation when the used key size does not match the recommendation.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The security level of an encryption scheme is directly proportional to the size of its key. Key sizes should be long enough that brute force attacks become unfeasible, but short enough to keep computational feasibility in mind.\n\nThe current cryptography guidelines suggest that: \nFor asymmetric encryption ( RSA), the recommended key size should be at least 2048 bits. \nFor Symmetric Algorithms, (AES), the recommended key size should be at least 256 bits.",
    "reference": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M5-Insufficient_Cryptography \nhttps://cwe.mitre.org/data/definitions/327.html",
    "remediation": "The current cryptography guidelines suggest that: \nFor asymmetric encryption ( RSA), the recommended key size should be at least 2048 bits. \nFor Symmetric Algorithms, (AES), the recommended key size should be at least 256 bits.",
    "remediationSample": "# Remediation for AES \n\nKeyGenerator keygen = KeyGenerator.getInstance(\"AES\") ; // key generator to be used with AES algorithm. \nkeygen.init(256) ; // Key size is specified here. \nbyte[] key = keygen.generateKey().getEncoded(); \nSecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\"); \n\n# Remediation for RSA \n\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\"); \nkeyGen.initialize(4096); // key size specified here. \nKeyPair pair = keyGen.generateKeyPair(); \n\n# Sample for PBKDF2 \n\n// Should be as long and as many special characters as possible \nString user_entered_password = sys.args[0] ; \n// salt value \nbyte[] salt = new byte[128] ; // Should be atleast 64 bits \nSecureRandom secRandom = new SecureRandom() ; \nsecRandom.nextBytes(salt) ; // self-seeded randomizer for salt \n// iteration count \nint iterCount = 12288 ; \nint derivedKeyLength = 256 ; // Should be atleast longer than 112 bits. Depends on Key size of algorithm. \nKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterCount, derivedKeyLength * 8); \nSecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");",
    "sample": "# Sample with AES\n\nKeyGenerator keygen = KeyGenerator.getInstance(\"AES\") ; // key generator to be used with AES algorithm. \nkeygen.init(128) ; // Key size is specified here. \nbyte[] key = keygen.generateKey().getEncoded(); \nSecretKeySpec skeySpec = new SecretKeySpec(key, \"AES\"); \n\n# Sample for RSA \n\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\"); \nkeyGen.initialize(1024); // key size specified here. \nKeyPair pair = keyGen.generateKeyPair(); \n\n# Sample for PBKDF2 \n\n// Should be as long and as many special characters as possible \nString user_entered_password = sys.args[0] ; \n// salt value \nbyte[] salt = new byte[128] ; // Should be atleast 64 bits \nSecureRandom secRandom = new SecureRandom() ; \nsecRandom.nextBytes(salt) ; // self-seeded randomizer for salt \n// iteration count \nint iterCount = 12288 ; \nint derivedKeyLength = 128 ; // Should be atleast longer than 112 bits. Depends on Key size of algorithm. \nKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterCount, derivedKeyLength * 8); \nSecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");",
    "total": "Number of Java artifacts",
    "alternativeName": "Perefer using encryption providing sufficient key size to ensure enough entropy against attacks",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 1062340,
            "name": "OWASP-2021-Index",
            "href": "AIP/business-criteria/1062340"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062179,
            "name": "ASCSM-CWE-327 - Broken or Risky Cryptographic Algorithm Usage",
            "href": "AIP/technical-criteria/1062179",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062306,
            "name": "OWASP-2013-A6 - Sensitive Data Exposure",
            "href": "AIP/technical-criteria/1062306",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062323,
            "name": "OWASP-2017-A3 - Sensitive Data Exposure",
            "href": "AIP/technical-criteria/1062323",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062342,
            "name": "OWASP-2021-A02 - Cryptographic Failures",
            "href": "AIP/technical-criteria/1062342",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "href": "AIP/technical-criteria/66063",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCSM-CWE-327",
            "name": "Broken or Risky Cryptographic Algorithm Usage",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-327",
            "standard": "CISQ"
        },
        {
            "id": "CWE-326",
            "name": "Inadequate Encryption Strength",
            "href": "AIP/quality-standards/CWE/items/CWE-326",
            "standard": "CWE"
        },
        {
            "id": "NIST-SC-12",
            "name": "Cryptographic Key Establishment and Management",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SC-12",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SC-12",
            "name": "Cryptographic Key Establishment and Management",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SC-12",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A3-2017",
            "standard": "OWASP"
        },
        {
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A6-2013",
            "standard": "OWASP"
        },
        {
            "id": "A02-2021",
            "name": "Cryptographic Failures",
            "href": "AIP/quality-standards/OWASP/items/A02-2021",
            "standard": "OWASP"
        },
        {
            "id": "M5-2016",
            "name": "Insufficient Cryptography",
            "href": "AIP/quality-standards/OWASP/items/M5-2016",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-3.6.1",
            "name": "Generation of strong cryptographic keys",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-3.6.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-4.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-3.6.1",
            "name": "Generation of strong cryptographic keys",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-3.6.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-4.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "STIG-V-222596",
            "name": "The application must protect the confidentiality and integrity of transmitted information.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222596",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
