{
    "id": 1020552,
    "name": "Avoid enabling dangerous protocols in whitelist APIs",
    "href": "AIP/quality-rules/1020552",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "When using white list API (aHrefSanitizationWhitelist, imgSrcSanitizationWhitelist), any url about to be assigned to a[href]/img[src] or via data-binding is first normalized and turned into an absolute url. Afterwards, the url is matched against the white list regular expression. If a match is found, the original url is written into the dom. Otherwise, the absolute url is prefixed with 'unsafe:' string and only then is it written into the DOM. If the url allows dangerous protocols executing external javascript, it may lead to cross-site scripting vulnerabilities.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Ensure that users cannot add unchecked HTML string. It helps detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks.",
    "reference": "https://docs.angularjs.org/api/ng/provider/$compileProvider#imgSrcSanitizationWhitelist\nhttps://docs.angularjs.org/api/ng/provider/$compileProvider#aHrefSanitizationWhitelist",
    "remediation": "Ensure you do not specify dangerous protocols like http(s) nor javascript in whitelist APIs",
    "remediationSample": "// http or javascript URI are possible\n\nmyModule.config(function($compileProvider){\n    $compileProvider.imgSrcSanitizationWhitelist(/*);\n});",
    "sample": "// http or javascript URI are possible\n\nmyModule.config(function($compileProvider){\n    $compileProvider.imgSrcSanitizationWhitelist(/^(http(s)?|javascript):.*/);\n});",
    "total": "Number of angular applications (may be represented by an html file, most often index.html, or no html if such html file does not exist)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-79",
            "name": "Cross-site Scripting Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to sanitize user input in use in output generation operations\n\nConsequence\nSoftware featuring weak output generation practices incurs the risk of arbitrary code execution, the risk of sensitive data being compromised, and many other nefarious consequences\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the in the user interface WritesUI action; none of the callable or method control element of the transformation sequence being a vetted sanitization control element from the list of vetted sanitization control elements.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "url": "https://cwe.mitre.org/data/definitions/79.html",
            "description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."
        },
        {
            "standard": "OWASP",
            "id": "A5-2013",
            "name": "Security Misconfiguration",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration",
            "description": "Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date."
        },
        {
            "standard": "OWASP",
            "id": "A6-2017",
            "name": "Security Misconfiguration",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration",
            "description": "Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information. Not only must all operating systems, frameworks, libraries, and applications be securely configured, but they must be patched/upgraded in a timely fashion."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69517",
            "name": "The application must employ a deny-all, permit-by-exception (whitelist) policy to allow the execution of authorized software programs.",
            "url": null,
            "description": "Utilizing a whitelist provides a configuration management method for allowing the execution of only authorized software. Using only authorized software decreases risk by limiting the number of potential vulnerabilities.\n\nThe organization must identify authorized software programs and permit execution of authorized software. The process used to identify software programs that are authorized to execute on organizational information systems is commonly referred to as whitelisting.\n\nVerification of whitelisted software can occur either prior to execution or at system startup.\n\nThis requirement applies to configuration management applications or similar types of applications designed to manage system processes and configurations (e.g., HBSS and software wrappers)."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
