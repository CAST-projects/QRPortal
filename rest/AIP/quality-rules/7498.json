{
    "id": 7498,
    "name": "Collection must be the same between getter and setter",
    "href": "AIP/quality-rules/7498",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Associated Value",
    "description": "Reports all getters that don't return the same collection instance as it was assigned by Hibernate or JPA to the setter method: any modification of the setter parameter or the attribute returned by the getter will be detected and reported.\nIn setter method, a modification occur when the class attribute is not initialized with the parameter directly. And in the getter when the return value is not the class attribute itself. To perform this check, any call to a method or a constructor in the getter or setter will be considered as a violation.\nThis metric take into account the case where getter and setter are implemented on an inherited class of the persistent class (can happen when inherited fields are persistent)",
    "output": "List all setter or getter methods of a  persistent fields that modify its collection parameter or return value.\n\nIt provides the following information:\n Method full name",
    "rationale": "Hibernate or JPA implementation compares the objects by value not by object identity to determine if the property's persistent state needs to be updated. However, there is one very important exception. Collections are compared by identity. For a property mapped as a persistent collection, you should return exactly the same collection instance from the getter method as Hibernate passed to the setter method. If you don't, Hibernate will update the database, even if no update is necessary, every time the session synchronizes state held in memory with the database.\n\nThis doesn't mean you shouldn't return a different collection if you really are replacing the current collection with a new collection with completely different elements. In certain cases, this behavior can even be an opportunity to increase performance.",
    "reference": "Hibernate in Action (ISBN 1932394-15-X) p 74\nThe Java Persistence API page 122 - ISBN 1-932394-88-5",
    "remediation": "Don't modify the collection.",
    "remediationSample": "public class Category {\n  ...\n  private List theList;\n\n  public void setTheList(List myList) {\n    theList =myList ; // FIXED\n  }\n\n  public List getTheList() {\n    return theList; // FIXED\n  }\n...\n}",
    "sample": "public class Category {\n  ...\n  private List theList;\n\n  public void setTheList(List myList) {\n    theList =new ArrayList(myList) ; // VIOLATION\n  }\n\n  public List getTheList() {\n    return new ArrayList(theList); // VIOLATION\n  }\n...\n}",
    "total": "The total is the total number of hibernate or JPA persistent fields setters and getters that have a Collection as parameter or return value.",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61019,
            "name": "Efficiency - SQL and Data Handling Performance",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
