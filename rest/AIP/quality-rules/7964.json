{
    "id": 7964,
    "name": "Avoid directly instantiating a Class used as a managed bean",
    "href": "AIP/quality-rules/7964",
    "critical": true,
    "associatedValueName": "Instantiated managed bean name",
    "description": "Reports Managed bean and Java methods that call a constructor of the class used to define this Managed bean. \n\nThe class can be instantiated directly (by new) or also by getBean. \nEven though the getBean method is part of the Spring framework, it is considered as a bad practice to use it since it bypasses the Spring inversion of control mechanism. It will access directly the Bean factory, to either retreive the singleton instance of the bean, or create another instance of that bean. \nThe behavior is implicit, dependent on the way the bean is confiigured, and cannot be known by the caller. That's why this call is considered as an explicit instantiation. \nInstead, the developer should rely on Spring's injection to wire the bean to the proper location, and access it with an accessor. \n    ",
    "output": "This report lists Java methods and jsp files that call a constructor of the class used to implement a managed bean and the managed bean name\n\nIt provides the following information:\n - The full name of the methods that invoke the constructor of a managed bean implementation class\n - the managed bean name",
    "rationale": "When a class is used to instantiate a managed bean, this bean benefits from different key features of the underlying framework :\n    * Each bean is a component which can take advantage of all services of the framework (for instance, declarative transaction management in Spring)\n    * With CDI or Spring, the bean is eligible for injection into other objects.\n \nSo, if a class is instantiated as a managed bean and as a direct Java instance at the same time, for these two instances, you may see different and unpredictable behavior.",
    "remediation": "Use only managed beans and when you need different instances of the same class, use the prototype mode attribute.",
    "remediationSample": "In the case of Spring \n    <bean id=\"myBean\" class=\"sample.MyBean\">\n    <property name=\"url\">\n        <value>http://localhost/myBeanService</value>\n    </property>\n</bean>\n\n<bean id=\"anotherClass\" class=\"sample.AnotherClass\"> // FIXED\n    <property name=\"bean\">\n        <value>myBean</value>\n    </property>\n</bean>\n\npublic class MyBean implements MyBeanInterface {\n    private String url;\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n}\n\npublic class AnotherClass {\n    MyBeanInterface bean;\n    \n    public MyBeanInterface getBean() {\n        return bean;\n    }\n    \n    public void setBean(MyBeanInterface bean) {\n        this.bean = bean;\n    }\n}",
    "sample": "\n    In the case of Spring \n    <bean id=\"myBean\" class=\"sample.MyBean\">\n  <property name=\"url\">\n     <value>http://localhost/myBeanService</value>\n  </property>\n</bean>\n\npublic class MyBean implements MyBeanInterface {\n  private String url;\n\n  public String getUrl() {\n    return url;\n  }\n\n  public void setUrl(String url) {\n    this.url = url;\n  }\n}\n\npublic class AnotherClass {\n    MyBean bean;\n\n    AnotherClass() {\n      bean = new MyBean();   // VIOLATION\n    }\n}",
    "total": "Number of methods or jsp files that reference a managed bean java interface",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
