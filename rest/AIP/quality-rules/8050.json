{
    "id": 8050,
    "name": "Do not hide declarations in other scopes",
    "href": "AIP/quality-rules/8050",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for C++ functions that hide variable declarations in nested scopes. It only checks parent scopes in the same function or the same class: hiding a global variable will not be detected.",
    "output": "Associated to each C++ method, constructor and destructor with violations, the Quality Rule provides:\n- Number of violation occurrences\n- Bookmarks for violation occurrences found in the source code:\n  - variable declaration that hides\n  - variable declaration that is hidden",
    "rationale": "Having the same name refer to two different objects can lead to confusion. In case of refactoring, when the code is moved around, a line of code can pick-up a different variable from the one intended. Hiding is also an indication that names may have been poorly chosen, and not informative enough.\n\nHiding with global names is not checked, because a modification in one part of the code could lead to a violation in another unrelated part.",
    "reference": "High Integrity C++ Coding Standard Manual",
    "remediation": "To correct that problem, choose different variable names.",
    "sample": "int i;\n\nint main()\n{\n    int i = 3; // Not a violation\n    int j = 2;\n    for (int j = 0 ; j<10 ; ++j) // Violation\n    {\n    }\n}",
    "total": "Number of C++ methods, constructors, and destructors",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
