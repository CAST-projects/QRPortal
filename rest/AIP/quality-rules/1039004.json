{
    "id": 1039004,
    "name": "Avoid using HttpServletRequest.getRequestedSessionId()",
    "href": "AIP/quality-rules/1039004",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The rule will check if the developer has used the method getRequestedSessionId() from an instance of HttpServletRequest.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "According to the Oracle Java API, the HttpServletRequest.getRequestedSessionId() method Returns the session ID specified by the client.  This may not be the same as the ID of the current valid session for this request. If the client did not specify a session ID, this method returns null.\n\nIf the session ID is transmitted in a URL or cookie, a hacker can manually update the value in the HTTP request. And because the session ID in the request should only be used by a servlet container (E.G. Tomcat or Jetty), a match with an other existing session could be done leading to an unauthenticated user to access an active session.",
    "reference": "https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getRequestedSessionId--",
    "remediation": "Do NOT USE HttpServletRequest.getRequestedSessionId",
    "remediationSample": "// Prefer using as an alternative (just one of possible solution)\n\nHttpSession session = request.getSession(true);\nsession.getId();",
    "sample": "if(isActiveSession(request.getRequestedSessionId()) ){ \n               ... \n              }",
    "total": "Number of Java artifacts",
    "alternativeName": "Ensure not relying on the session ID provided by \"request.getRequestedSessionId()\"",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-807",
            "name": "Reliance on Untrusted Inputs in a Security Decision",
            "url": "https://cwe.mitre.org/data/definitions/807.html",
            "description": "The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-AC-3",
            "name": "Access Enforcement",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/AC-3",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A2-2013",
            "name": "Broken Authentication and Session Management",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A2-Broken Authentication and Session Management",
            "description": "Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities."
        },
        {
            "standard": "OWASP",
            "id": "A2-2017",
            "name": "Broken Authentication",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
            "description": "Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities temporarily or permanently."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70205",
            "name": "The application must not expose session IDs.",
            "url": null,
            "description": "Authenticity protection provides protection against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nApplication communication sessions are protected utilizing transport encryption protocols, such as SSL or TLS. SSL/TLS provides web applications with a means to be able to authenticate user sessions and encrypt application traffic. Session authentication can be single (one-way) or mutual (two-way) in nature. Single authentication authenticates the server for the client, whereas mutual authentication provides a means for both the client and the server to authenticate each other.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).\n\nThis requirement addresses communications protection at the application session, versus the network packet, and establishes grounds for confidence at both ends of communications sessions in ongoing identities of other parties and in the validity of information transmitted. Depending on the required degree of confidentiality and integrity, web services/SOA will require the use of SSL/TLS mutual authentication (two-way/bidirectional)."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
