{
    "id": 1039004,
    "name": "Avoid using HttpServletRequest.getRequestedSessionId()",
    "href": "AIP/quality-rules/1039004",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "According to the Oracle Java API, the HttpServletRequest.getRequestedSessionId() method Returns the session ID specified by the client. \n        This may not be the same as the ID of the current valid session for this request. If the client did not specify a session ID, this method returns null. \n\n        The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually updating \n        the value of this session ID in the HTTP request. \n\n        Here is an example of a updated HTTP header: \n        \n        ----------------------------------- \n        GET /pageSomeWhere HTTP/1.1 \n        Host: webSite.com \n        User-Agent: Mozilla/5.0 \n        Cookie: JSESSIONID=Hacked_Session_Value \n        -------------------------------------- \n\n        Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G. Tomcat or Jetty) \n        to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated. Moreover, \n        this session ID should never be logged to prevent hijacking of active sessions.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. \n        However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. \n        When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software. \n        Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.",
    "reference": "http://cwe.mitre.org/data/definitions/807 \n        OWASP 2017 Category A2 - Broken Authentication",
    "remediation": "Do NOT USE getRequestedSessionId.",
    "remediationSample": "Do NOT USE getRequestedSessionId.",
    "sample": "if(isActiveSession(request.getRequestedSessionId()) ){ \n               ... \n              }",
    "total": "Number of Java artifacts",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-807",
            "name": "Reliance on Untrusted Inputs in a Security Decision",
            "url": "https://cwe.mitre.org/data/definitions/807.html",
            "description": "The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism."
        },
        {
            "standard": "OWASP",
            "id": "A2-2013",
            "name": "Broken Authentication and Session Management",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A2-Broken Authentication and Session Management",
            "description": "Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities."
        },
        {
            "standard": "OWASP",
            "id": "A2-2017",
            "name": "Broken Authentication",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
            "description": "Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities temporarily or permanently."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70205",
            "name": "The application must not expose session IDs.",
            "url": null,
            "description": "Authenticity protection provides protection against man-in-the-middle attacks/session hijacking and the insertion of false information into sessions.\n\nApplication communication sessions are protected utilizing transport encryption protocols, such as SSL or TLS. SSL/TLS provides web applications with a means to be able to authenticate user sessions and encrypt application traffic. Session authentication can be single (one-way) or mutual (two-way) in nature. Single authentication authenticates the server for the client, whereas mutual authentication provides a means for both the client and the server to authenticate each other.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA).\n\nThis requirement addresses communications protection at the application session, versus the network packet, and establishes grounds for confidence at both ends of communications sessions in ongoing identities of other parties and in the validity of information transmitted. Depending on the required degree of confidentiality and integrity, web services/SOA will require the use of SSL/TLS mutual authentication (two-way/bidirectional)."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
