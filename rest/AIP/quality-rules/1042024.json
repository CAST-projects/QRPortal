{
    "id": 1042024,
    "name": "Avoid Unescaped User-controlled Input attribute in Struts 1.x and 2.x",
    "href": "AIP/quality-rules/1042024",
    "critical": true,
    "severity": 30,
    "maxWeight": 8,
    "extension": {
        "name": "com.castsoftware.struts",
        "href": "AIP/extensions/com.castsoftware.struts"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "Depending on the context in which the data appear, characters beyond the basic <, >, &, and \" that are HTML-encoded and those beyond <, >, &, \", and ' that are XML-encoded may take on meta-meaning. \nso the use of certain tag as <bean:write ... > (struts1.x) or <s:property...> (struts 2.x) can be used for Cross-Site Scripting (XSS) attacks.\n\nSome Web frameworks usually escape output by default. But we can also add some specific tags ( filter=\"true\" (Struts 1.x) or escapeHtml='true'( Struts 2.x)) to escape all strings output and to sanitize any user input before it is processed and/or rendered back to the browser\n\nThis rule will check if specific tags for escaping string are used to sanitize any user input. If not, it gives violation",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.\n\nAn attacker can use XSS to send a malicious script to an unsuspecting user. The end user\u2019s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page.",
    "reference": "https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
    "remediation": "Below are mandatory tag attributes.\nStruts 1 : filter=\"true\"\nStruts 2 : escapeHtml='true'",
    "remediationSample": "Remediation Sample for Struts 1\n\n<%@taglib uri=\"/WEB-INF/struts-bean.tld\" prefix=\"bean\" %>\n<%@taglib uri=\"/WEB-INF/struts-logic.tld\" prefix=\"logic\" %>\n<html>\n...\n\n<body>\n<b>Feedback Successfully Submitted.</b><br>\nYou have submitted the following feedback.\n<table>\n    <tr>\n        <td>\n            Name :\n        </td>\n        <td>\n            <bean:write name=\"feedbackForm\" property=\"name\" filter=\"true\"/> // FIXED\n        </td>\n    </tr>\n...\n__________________________________________\n\nRemediation Samplefor Struts 2\n\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n<head>\n</head>\n \n<body>\n<h1>Struts 2 property tag example</h1>\n\n<h2>1. Call getName() from propertyTagAction.java</h2> \n<s:property value=\"name\" />\n\n<h2>2. Call getName() from Person.java</h2> \n<s:property value=\"#personBean.name escapeHtml='true'\" /> // FIXED  \"<s:property value=\"#personBean.name \" />\" this is also a safe code as the escape HTLM is activated by default\n\n</body>\n</html>",
    "sample": "Sample for Struts 1\n\n<%@taglib uri=\"/WEB-INF/struts-bean.tld\" prefix=\"bean\" %>\n<%@taglib uri=\"/WEB-INF/struts-logic.tld\" prefix=\"logic\" %>\n<html>\n...\n\n<body>\n<b>Feedback Successfully Submitted.</b><br>\nYou have submitted the following feedback.\n<table>\n    <tr>\n        <td>\n            Name :\n        </td>\n        <td>\n            <bean:write name=\"feedbackForm\" property=\"name\" /> // Violation \n        </td>\n    </tr>\n...\n__________________________________________\n\nSample for Struts 2\n\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n<head>\n</head>\n \n<body>\n<h1>Struts 2 property tag example</h1>\n\n<h2>1. Call getName() from propertyTagAction.java</h2> \n<s:property value=\"name\" />\n\n<h2>2. Call getName() from Person.java</h2> \n<s:property value=\"#personBean.name escapeHtml='false'\" /> // violation \n\n</body>\n</html>",
    "total": "Number of field in struts config XML file",
    "alternativeName": "Ensure activating tags for escaping string in order to sanitize user input and prevent XSS attacks",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062191,
            "name": "ASCSM-CWE-79 - Cross-site Scripting Improper Input Neutralization",
            "href": "AIP/technical-criteria/1062191",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061015,
            "name": "CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/technical-criteria/1061015",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1066179,
            "name": "CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/technical-criteria/1066179",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062303,
            "name": "OWASP-2013-A3 - Cross-Site Scripting (XSS)",
            "href": "AIP/technical-criteria/1062303",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062327,
            "name": "OWASP-2017-A7 - Cross-Site Scripting (XSS)",
            "href": "AIP/technical-criteria/1062327",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062343,
            "name": "OWASP-2021-A03 - Injection",
            "href": "AIP/technical-criteria/1062343",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063121,
            "name": "PCI-Requirement-6.5.7 - Cross-site scripting (XSS)",
            "href": "AIP/technical-criteria/1063121",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "AIP-CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/AIP-STRUCTURAL-FLAW/items/AIP-CWE-79",
            "standard": "AIP-STRUCTURAL-FLAW"
        },
        {
            "id": "ASCSM-CWE-79",
            "name": "Cross-site Scripting Improper Input Neutralization",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-79",
            "standard": "CISQ"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/CWE/items/CWE-79",
            "standard": "CWE"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-79",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-79",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "A3-2013",
            "name": "Cross-Site Scripting (XSS)",
            "href": "AIP/quality-standards/OWASP/items/A3-2013",
            "standard": "OWASP"
        },
        {
            "id": "A7-2017",
            "name": "Cross-Site Scripting (XSS)",
            "href": "AIP/quality-standards/OWASP/items/A7-2017",
            "standard": "OWASP"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.7",
            "name": "Cross-site scripting (XSS)",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.7",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.7",
            "name": "Cross-site scripting (XSS)",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.7",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        },
        {
            "id": "STIG-V-222602",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222602",
            "standard": "STIG-V5"
        },
        {
            "id": "STIG-V-222602",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V6/items/STIG-V-222602",
            "standard": "STIG-V6"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
