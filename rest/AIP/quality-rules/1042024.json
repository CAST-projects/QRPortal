{
    "id": 1042024,
    "name": "Avoid Unescaped User-controlled Input attribute in Struts 1.x and 2.x",
    "href": "AIP/quality-rules/1042024",
    "critical": true,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "Depending on the context in which the data appear, characters beyond the basic <, >, &, and \" that are HTML-encoded and those beyond <, >, &, \", and ' that are XML-encoded may take on meta-meaning. \nso the use of certain tag as <bean:write ... > (struts1.x) or <s:property...> (struts 2.x) can be used for Cross-Site Scripting (XSS) attacks.\n\nSome Web frameworks usually escape output by default. But we can also add some specific tags ( filter=\"true\" (Struts 1.x) or escapeHtml='true'( Struts 2.x)) to escape all strings output and to sanitize any user input before it is processed and/or rendered back to the browser\n\nThis rule will check if specific tags for escaping string are used to sanitize any user input. If not, it gives violation",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted web sites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.\n\nAn attacker can use XSS to send a malicious script to an unsuspecting user. The end user\u2019s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page.",
    "reference": "https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
    "remediation": "Below are mandatory tag attributes.\nStruts 1 : filter=\"true\"\nStruts 2 : escapeHtml='true'",
    "remediationSample": "Remediation Sample for Struts 1\n\n<%@taglib uri=\"/WEB-INF/struts-bean.tld\" prefix=\"bean\" %>\n<%@taglib uri=\"/WEB-INF/struts-logic.tld\" prefix=\"logic\" %>\n<html>\n...\n\n<body>\n<b>Feedback Successfully Submitted.</b><br>\nYou have submitted the following feedback.\n<table>\n    <tr>\n        <td>\n            Name :\n        </td>\n        <td>\n            <bean:write name=\"feedbackForm\" property=\"name\" filter=\"true\"/> // FIXED\n        </td>\n    </tr>\n...\n__________________________________________\n\nRemediation Samplefor Struts 2\n\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n<head>\n</head>\n \n<body>\n<h1>Struts 2 property tag example</h1>\n\n<h2>1. Call getName() from propertyTagAction.java</h2> \n<s:property value=\"name\" />\n\n<h2>2. Call getName() from Person.java</h2> \n<s:property value=\"#personBean.name escapeHtml='true'\" /> // FIXED  \"<s:property value=\"#personBean.name \" />\" this is also a safe code as the escape HTLM is activated by default\n\n</body>\n</html>",
    "sample": "Sample for Struts 1\n\n<%@taglib uri=\"/WEB-INF/struts-bean.tld\" prefix=\"bean\" %>\n<%@taglib uri=\"/WEB-INF/struts-logic.tld\" prefix=\"logic\" %>\n<html>\n...\n\n<body>\n<b>Feedback Successfully Submitted.</b><br>\nYou have submitted the following feedback.\n<table>\n    <tr>\n        <td>\n            Name :\n        </td>\n        <td>\n            <bean:write name=\"feedbackForm\" property=\"name\" /> // Violation \n        </td>\n    </tr>\n...\n__________________________________________\n\nSample for Struts 2\n\n<%@ taglib prefix=\"s\" uri=\"/struts-tags\" %>\n<html>\n<head>\n</head>\n \n<body>\n<h1>Struts 2 property tag example</h1>\n\n<h2>1. Call getName() from propertyTagAction.java</h2> \n<s:property value=\"name\" />\n\n<h2>2. Call getName() from Person.java</h2> \n<s:property value=\"#personBean.name escapeHtml='false'\" /> // violation \n\n</body>\n</html>",
    "total": "Number of field in struts config XML file",
    "alternativeName": "Ensure activating tags for escaping string in order to sanitize user input and prevent XSS attacks",
    "businessCriteria": [
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062303,
            "name": "OWASP-2013-A3 Cross-Site Scripting (XSS)",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062327,
            "name": "OWASP-2017-A7 Cross-Site Scripting (XSS)",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "OWASP",
            "id": "A3-2013",
            "name": "Cross-Site Scripting (XSS)",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victims' browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        },
        {
            "standard": "OWASP",
            "id": "A7-2017",
            "name": "Cross-Site Scripting (XSS)",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70257",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "url": null,
            "description": "XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.\n\nXSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, \"&lt;\" is the HTML encoding for the \"<\" character. If the encoding is performed, the script code will not execute.\n\nThere are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.\n\nWhen the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker\u2019s script is executed in the victims browser with the trust permissions assigned to the site.\n\nThere are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.\n\nTo address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.\n\nExamples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.\n  \nThe site is available by pointing your browser to https://www.owasp.org."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
