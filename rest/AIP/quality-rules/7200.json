{
    "id": 7200,
    "name": "Avoid String concatenation in loops",
    "href": "AIP/quality-rules/7200",
    "critical": false,
    "maxWeight": 8,
    "description": "All String objects that use concatenation in loops (for, while, do while) will be reported as violation.\n\n\nThese cases when executed in loop are taken into account: \n\n* result += string (literal or not) \n* result = result + string (literal or not) \n* result = result.concat(string: literal or not)",
    "output": "This report lists all methods that call String concatenation in loops.\nIt provides the following information:\n Method full name",
    "rationale": "String concatenation is not efficient because it creates a StringBuffer for each concatenation. When placed in a loop, String concatenation  results in the creation and garbage collection of large numbers of temporary objects. This both consumes memory and can dramatically slow the program execution. It is recommended to create a StringBuffer before entering the loop, and append to it within the loop, thus reducing the overhead.",
    "reference": "http://www.precisejava.com/javaperf/j2se/StringAndStringBuffer.htm#Strings104",
    "remediation": "It is recommended to create a StringBuilder (if JDK >= 1.5 and not in thread environment) or StringBuffer before entering the loop, and append to it within the loop, thus reducing the overhead.\n\nThe JVM is optimizing code such as \n\nSystem.out.println(\"x:\"+x+\" y:\"+y);\n\nby \n\nSystem.out.println((new StringBuilder()).append(\"x:\").append(x).append(\" y:\").append(y).toString());",
    "remediationSample": "Remediation for Sample#1\n\nStringBuffer result = new StringBuffer(\"hello\");\nfor (int i = 0; i < 1500; i++) {\n   result.append(\"hello\");  // FIXED\n}\n\nRemediation for Sample#2\n\nStringBuffer sb = new StringBuffer(\"JDBC Connection parameters were : \\n\");\n        for (String prop: props.stringPropertyNames())\n        {\n            if (\"password\".equalsIgnoreCase(prop) || \"pwd\".equalsIgnoreCase(prop))\n                continue;\n            \n            sb.append(\"{\").append(prop).append(\" : \");  //Resolved\n        }",
    "sample": "Sample#1\n\nString result = \"hello\";\nfor (int i = 0; i < 1500; i++) {\n   result += \"hello\";  // VIOLATION\n}\n\nSample#2\n\nStringBuffer sb = new StringBuffer(\"JDBC Connection parameters were : \\n\");\n        for (String prop: props.stringPropertyNames())\n        {\n            if (\"password\".equalsIgnoreCase(prop) || \"pwd\".equalsIgnoreCase(prop))\n                continue;\n            \n            sb.append(\"{\"+prop + \" : \" +props.get(prop)+\"}\\n\");  //Violation\n        }",
    "total": "Number of non abstract Java artifacts",
    "alternativeName": "Ensure to create a StringBuilder or StringBuffer before entering the loop",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062102,
            "name": "CISQ-Performance-Efficiency",
            "href": "AIP/business-criteria/1062102"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061002,
            "name": "ISO-5055-Performance-Efficiency",
            "href": "AIP/business-criteria/1061002"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062143,
            "name": "ASCPEM-PRF-8 - Control Elements Requiring Significant Resource Element within Control Flow Loop Block",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061113,
            "name": "CWE-1050: Excessive Platform Resource Consumption within a Loop",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-8",
            "name": "Control Elements Requiring Significant Resource Element within Control Flow Loop Block",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-1050",
            "name": "Excessive Platform Resource Consumption within a Loop",
            "url": null,
            "description": null
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-1050",
            "name": "Excessive Platform Resource Consumption within a Loop",
            "url": null,
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1050",
            "name": "Excessive Platform Resource Consumption within a Loop",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
