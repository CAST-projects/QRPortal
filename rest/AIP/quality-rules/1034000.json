{
    "id": 1034000,
    "name": "Avoid SQL injection (PHP)",
    "href": "AIP/quality-rules/1034000",
    "critical": false,
    "severity": 10,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.php.security",
        "href": "AIP/extensions/com.castsoftware.php.security"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric uses Psalm data-flow engine to detect a call path where input data from the user is sent to SQL database without prior validation and sanitization.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software constructs all or part of an SQL command via user-controllable inputs. These inputs are not neutralized or are incorrectly neutralized. As a consequence, the SQL command may be completely altered.",
    "reference": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nhttps://cwe.mitre.org/data/definitions/89.html\n\nOpen Web Application Security Project (OWASP) \nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection\n\nOWASP Top Ten 2021 Category A03:2021 - Injection\nhttps://owasp.org/Top10/A03_2021-Injection/\n\n\nCISQ rule: ASCSM-CWE-89.",
    "remediation": "Depending on the SQL Command style:\n\nfor SQL Command in dynamic query (PHP)\nIt is recommended to use prepared statements for all SQL queries. The prepared statement itself should only use placeholders for data and never concatenate data directly into the query.\n\nfor SQL Command without quotes (PHP)\nNo quotes are used around the detected injection point in the SQL query. Thus, all applied operations to escape the data are insufficient because no quotes have to be broken in order to inject SQL syntax. In case a numerical value is expected, a typecast operation should be performed on the user input.\n\nfor SQL Command within single quotes (PHP)\nThe detected injection point in the SQL query occurs within single quotes. Thus, the user input can be sanitized by using the built-in function addslashes() that escapes the data and prevents breaking out of the quotes.",
    "remediationSample": "<?php\n\nclass A {\n\n    public function deleteUser(PDO $pdo) : void {\n        $userId = self::getUserId();\n        $userId = $pdo->quote($userId);                              // ESCAPE SPECIAL CHARACTERS\n        $pdo->exec(\"delete from users where user_id = \" . $userId);  // FIXED\n    }\n\n    public static function getUserId() : string {\n        return (string) $_GET[\"user_id\"];\n    }\n}",
    "sample": "<?php\n\nclass A {\n    public function deleteUser(PDO $pdo) : void {\n        $userId = self::getUserId();\n        $pdo->exec(\"delete from users where user_id = \" . $userId);  // VIOLATION\n    }\n\n    public static function getUserId() : string {\n        return (string) $_GET[\"user_id\"];\n    }\n}",
    "total": "Number of PHP artifacts",
    "alternativeName": "Ensure you sanitize queries to SQL databases constructed from user input",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-89",
            "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-89",
            "standard": "CWE"
        },
        {
            "id": "CWE-89",
            "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-89",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-89",
            "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-89",
            "standard": "OMG-ASCQM"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
