{
    "id": 1106292,
    "name": "Ensure AgentJobs is not used",
    "href": "AIP/quality-rules/1106292",
    "critical": false,
    "severity": 10,
    "maxWeight": 1,
    "extension": {
        "name": "com.castsoftware.sql.movetocloud",
        "href": "AIP/extensions/com.castsoftware.sql.movetocloud"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rules checks that AgentJobs is not used in SQL Server side.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When planning a migration from SQL Server to Azure SQL Database, it\u2019s important to account for key differences in functionality. One such change is the lack of support for SQL Server Agent \u2014 a Windows-based service used to automate and run scheduled jobs. Alternative solutions must be considered to handle job scheduling in the Azure environment.",
    "reference": "https://learn.microsoft.com/en-us/data-migration/sql-server/database/assessment-rules#AgentJobs",
    "remediation": "To manage scheduled operations in Azure SQL Database, consider using elastic jobs, the cloud-native alternative to SQL Server Agent. Elastic jobs allow for reliable execution of T-SQL scripts across multiple databases, with built-in retry logic and guaranteed completion. As another option, you may choose to migrate to Azure SQL Managed Instance or SQL Server hosted on Azure Virtual Machines for full SQL Server Agent compatibility.",
    "remediationSample": "Option 1: Use Elastic Jobs (Recommended in Azure SQL Database)\nElastic jobs run scheduled T-SQL across one or many Azure SQL databases.\n\nDefine your job in Job Database\n\nUse Elastic Job Agent via Azure Portal, PowerShell, or Azure CLI\n\nExample: Register job target and schedule using Azure CLI or PowerShell\n(Exact script depends on platform choice \u2013 let me know if you want a CLI or PowerShell script.)\n\nOption 2: Use Azure Automation with Runbooks\nCreate a PowerShell or T-SQL-based runbook that executes the required logic on a schedule.\n\nExample (pseudo-logic):\n\npowershell\nCopy\nEdit\n# Runbook script example\nInvoke-Sqlcmd -ServerInstance \"yourserver.database.windows.net\" `\n              -Database \"MyDB\" `\n              -Username \"admin\" `\n              -Password \"securepassword\" `\n              -Query \"EXEC YourDailyTaskProcedure\"\nSchedule this runbook through Azure Automation.",
    "sample": "-- This example attempts to create a SQL Server Agent Job (not supported in Azure SQL Database)\n\nUSE msdb;\nGO\n\nEXEC sp_add_job \n    @job_name = N'DailyBackupJob';  \nGO\n\nEXEC sp_add_jobstep \n    @job_name = N'DailyBackupJob',  \n    @step_name = N'Backup Step',  \n    @subsystem = N'TSQL',  \n    @command = N'BACKUP DATABASE MyDB TO DISK = ''C:\\Backups\\MyDB.bak''';\nGO",
    "total": "Number of Artifacts with SQL code.",
    "alternativeName": "Ensure AgentJobs is not used",
    "businessCriteria": [
        {
            "id": 60018,
            "name": "Cloud Migration",
            "href": "AIP/business-criteria/60018"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61050,
            "name": "Database Migration - SQL Server Database to Azure SQL",
            "href": "AIP/technical-criteria/61050",
            "weight": 1,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 0,
            "name": "ALL TECHNOLOGIES",
            "href": "AIP/technologies/0"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
