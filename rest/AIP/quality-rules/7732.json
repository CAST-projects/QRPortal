{
    "id": 7732,
    "name": "Avoid non validated inputs in JSP files that use JSF",
    "href": "AIP/quality-rules/7732",
    "critical": true,
    "maxWeight": 9,
    "description": "JSF supports validators, which are responsible for making sure that the user enters an acceptable value. Each input control must be associated with one or more validators.\n\n\nThis rule checks if the input field in JSP files using JSF (i.e. reference the JSF core taglib) has been validated as expected.\n\nFollowing validation ways supported by JSF are considered by this rule: \nStandard validation, Custom validation, Validation in the backing bean.\n\nThe validation can be done also by using the annotation @FacesValidator in the class during runtime\n\n\n\nAll other ways that consist of making the validation in the application (in the method called when a button is selected like createEmail method in the Example section) is not considered. In this case, a manual check will be needed to validate if the validation is made or not in this way.",
    "output": "This report lists all input that are not validated. It provides the following information:\n  JSP Input Field Full Name",
    "rationale": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n\nInput validation is required to secure an application. Moreover, the web interface is exposed to anyone. Non validating input may allow injecting arbitrary web script, HTML, SQL... Consequences can be severe, like erasing the content of a database.\nOnly one invalidated input can be exploited by an attacker.",
    "reference": "Java Server Faces in Action ISBN 1-932394-11-7 p 44\nhttps://www.journaldev.com/7035/jsf-validation-example-tutorial-validator-tag-custom-validator\nhttps://laliluna.com/articles/posts/jsf-validation-error-handling-tutorial.html\nhttps://dzone.com/articles/jsf-validation-tutorial-error",
    "remediation": "Validate each input field through one of  the three ways - at the UI component level, via validator methods in backing beans, or in validator classes.\nUI components generally handle simple validation, such as whether a value is required, or validation logic that's specific to the component itself (and therefore not usable with other components).\nValidator methods are useful when you need to validate one or more\nfields on a form (and you don't need to share that logic with other components). External validators are useful for generic cases like the length of a field or a number range; they are pluggable, which means you can attach one or more of them to any component.",
    "remediationSample": "-------------- 1st sample (standard validation) --------------\n\n----> JSP file\n<%@taglib prefix=\"f\" uri=\"http://java.sun.com/jsf/core\"%>\n<%@taglib prefix=\"h\" uri=\"http://java.sun.com/jsf/html\"%>\n\n<h:inputText id=\"age\" value=\"#{UserRegistration.user.age}\">\n          <f:validateLongRange maximum=\"150\" minimum=\"0\"/>\n</h:inputText>\n\n----> jsf_core.tld\n<tag>\n    <name>validateLongRange</name>\n    <tag-class>\n     com.sun.faces.taglib.jsf_core.ValidateLongRangeTag\n    </tag-class>\n...\n\n----> ValidateLongRangeTag.java:\npublic class ValidateLongRangeTag extends com.sun.faces.taglib.jsf_core.MaxMinValidatorTag {\n....\n}\n\n---> MaxMinValidatorTag.java:\npublic class MaxMinValidatorTag extends javax.faces.webapp.ValidatorTag {\n  ...\n}\n\n\n-------------- 2nd sample ( custom validation) --------------\n----> JSP file:\n<%@taglib prefix=\"f\" uri=\"http://java.sun.com/jsf/core\"%>\n<%@taglib prefix=\"h\" uri=\"http://java.sun.com/jsf/html\"%>\n\n<h:inputText id=\"emailInput\"\n               value=\"#{registrationBean.email}/>\n      <f:validator validatorId=\"emailValidator\"/> // FIXED\n</h:inputText>\n\n----> faces-config.xml\n<faces-config>\n  ...\n       <validator>\n            <validator-id>emailValidator</validator-id>\n            <validator-class>com.sample.EmailValidator</validator-class>\n        </validator>\n  ... \n\n</faces-config>\n\n----> EmailValidator.java\npackage com.sample;\n\npublic class EmailValidator implements javax.faces.validator.Validator {\n    ....\n}\n\n\n-------------- 3rd sample ( validation in the backing bean) --------------\n----> JSP file:\n<h:inputText id=\"emailInput\"\n            validator=\"#{registrationBean.validateEmail}\" // FIXED\n            value=\"#{registrationBean.email}/>\n\n----> faces-config.xml\n<faces-config>\n...\n    <managed-bean>\n        <managed-bean-name>registrationBean</managed-bean-name>\n        <managed-bean-class>\n            com.sample.registrationBean\n        </managed-bean-class>\n        <managed-bean-scope>session</managed-bean-scope>\n    </managed-bean> \n...\n</faces-config>\n\n----> RegistrationBean.java\npackage com.sample;\n\n\npublic class RegistrationBean {\n    ...\n    public void validateEmail(FacesContext context, UIComponent validate, Object value){\n       ...\n    }\n}",
    "sample": "----> JSP file (1st sample: standard validation)\n<%@taglib prefix=\"f\" uri=\"http://java.sun.com/jsf/core\"%>\n<%@taglib prefix=\"h\" uri=\"http://java.sun.com/jsf/html\"%>\n\n<h:inputText id=\"age\" value=\"#{UserRegistration.user.age}\"> // VIOLATION\n</h:inputText>\n\n----> JSP file (for 2nd, 3rd and 4th sample)\n<%@taglib prefix=\"f\" uri=\"http://java.sun.com/jsf/core\"%>\n<%@taglib prefix=\"h\" uri=\"http://java.sun.com/jsf/html\"%>\n\n<h:form id=\"create\"> \n     ....\n\n     <h:inputText id=\"emailInput\"\n            value=\"#{registrationBean.email}/> // VIOLATION\n\n     <h:commandButton id=\"submit\" \n                                  value=\"CreateEmail\"\n                                  action=\"#{registrationBean.createEmail}\"/>\n     ....\n</h:form>\n\n---> faces-config.xml\n<faces-config>\n...\n    <managed-bean>\n        <managed-bean-name>registrationBean</managed-bean-name>\n        <managed-bean-class>\n            com.sample.registrationBean\n        </managed-bean-class>\n        <managed-bean-scope>session</managed-bean-scope>\n    </managed-bean> \n...\n</faces-config>\n\n---> RegistrationBean.java\npackage com.sample;\n\npublic class RegistrationBean {\n    ...\n\n    }\n}",
    "total": "Number of input fields, 0 if JSF is not used",
    "alternativeName": "Ensure validating all inputs in JSP files that use JSF",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062191,
            "name": "ASCSM-CWE-79 - Cross-site Scripting Improper Input Neutralization",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061015,
            "name": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062303,
            "name": "OWASP-2013-A3 Cross-Site Scripting (XSS)",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062327,
            "name": "OWASP-2017-A7 Cross-Site Scripting (XSS)",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCSM-CWE-79",
            "name": "Cross-site Scripting Improper Input Neutralization",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-79",
            "standard": "CISQ"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/CWE/items/CWE-79",
            "standard": "CWE"
        },
        {
            "id": "CWE-1173",
            "name": "Improper Use of Validation Framework",
            "href": "AIP/quality-standards/CWE/items/CWE-1173",
            "standard": "CWE"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-79",
            "standard": "ISO-5055"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-79",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "A3-2013",
            "name": "Cross-Site Scripting (XSS)",
            "href": "AIP/quality-standards/OWASP/items/A3-2013",
            "standard": "OWASP"
        },
        {
            "id": "A7-2017",
            "name": "Cross-Site Scripting (XSS)",
            "href": "AIP/quality-standards/OWASP/items/A7-2017",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.7",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.7",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "STIG-V-70257",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V4R8/items/STIG-V-70257",
            "standard": "STIG-V4R8"
        },
        {
            "id": "STIG-V-70265",
            "name": "The application must validate all input.",
            "href": "AIP/quality-standards/STIG-V4R8/items/STIG-V-70265",
            "standard": "STIG-V4R8"
        },
        {
            "id": "STIG-V-70271",
            "name": "The application must not be subject to input handling vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V4R8/items/STIG-V-70271",
            "standard": "STIG-V4R8"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
