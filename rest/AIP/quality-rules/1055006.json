{
    "id": 1055006,
    "name": "Avoid using risky cryptographic hash (Swift)",
    "href": "AIP/quality-rules/1055006",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "When using FileManager createFile() function, you must provide file protection option. This rule is compliant with OWASP M2 2016 recommendation.",
    "output": "This report lists all functions (and source codes) containing URLCredential class instances with object full name, and number of violationsThis report lists all uses of FileManager createFile() function with FileAttributeKey.protectionKey option. \n\nIt provides the following information: \nObject full name, number of violations",
    "rationale": "Insecure data storage vulnerabilities occur when development teams assume that users or malware will not have access to a mobile device's filesystem and subsequent sensitive information in data-stores on the device or are cloud synced.Insecure data storage vulnerabilities occur when development teams assume that users or malware will not have access to a mobile device's filesystem and subsequent sensitive information in data-stores on the device. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.",
    "remediation": "\nInstead of using FileProtectionType.none or URLFileProtection.none options, please use one of the following option: \n\nFileProtection.complete \nFileProtection.completeUnlessOpen \nFileProtection.completeUntilFirstUserAuthentication \n\nURLFileProtection.complete \nURLFileProtection.completeUnlessOpen \nURLFileProtection.completeUntilFirstUserAuthentication",
    "remediationSample": "let credential = URLCredential.init(user: user, password: password, persistence: URLCredential.Persistence.none) \nlet shared = URLCredentialStorage.shared \nlet protectionSpace = URLProtectionSpace.init() \nshared.setDefaultCredential(credential, for: protectionSpace) FileManager.default.createFile(atPath:PATH, contents:someData, attributes:[FileProtectionKey.protectionKey:FileProtection.complete]) \n\nFileManager.default.createFile(atPath:PATH, contents:someData, attributes:[FileProtectionKey.protectionKey:URLFileProtection.complete])",
    "sample": "let credential = URLCredential.init(user: user, password: password, persistence: URLCredential.Persistence.synchronizable)\nlet shared = URLCredentialStorage.shared\nlet protectionSpace = URLProtectionSpace.init()\nshared.setDefaultCredential(credential, for: protectionSpace)FileManager.default.createFile(atPath:PATH, contents:someData, attributes:[FileProtectionKey.protectionKey:FileProtection.none]) \n\nFileManager.default.createFile(atPath:PATH, contents:someData, attributes:[FileProtectionKey.protectionKey:URLFileProtection.none])",
    "total": "swift functions",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1055000,
            "name": "Swift",
            "href": "AIP/technologies/1055000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-327",
            "name": "Unvetted cryptographic algorithms",
            "url": null,
            "description": "Remove instances where the application uses a cryptographic list which is not part of the list of vetted cryptographic libraries. "
        }
    ]
}
