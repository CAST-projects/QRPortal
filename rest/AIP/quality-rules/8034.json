{
    "id": 8034,
    "name": "Variables defined in Working-Storage section must be initialized before to be read",
    "href": "AIP/quality-rules/8034",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for Cobol Programs containing variables that are used without having been initialized. Only variables defined in the WORKING-STORAGE section are taken into account. A variable is considered as initialized in the following conditions:\n- Its definition has a VALUE clause\n- It is valued by a statement (for instance, MOVE, ADD, COMPUTE, INITIALIZE, ...)",
    "output": "Associated to each COBOL Program with violations, the Quality Rule provides:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in source code:\n  - Statement using the variable",
    "rationale": "Data defined in the WORKING-STORAGE section is used to perform specific operations in programs. It must be initialized before being read (in assignment and comparison statements). If data is moved or compared to other data without having been initialized, then the logic of the code could be unpredictable and problems can occur in production.",
    "remediation": "Data defined in the WORKING-STORAGE section can be initialized by using the VALUE clause in the DATA division. They can also be initialized in the PROCEDURE division at the beginning of the section or paragraph using them.",
    "remediationSample": "01 VARIN PIC X(10) VALUE SPACES.\n...\nMOVE VARIN TO VARSTATE.\nIF VARSTATE EQUALS SPACES\n    PERFORM P100-BEG\nELSE\n    PERFORM P200-GO\nEND-IF",
    "sample": "01 VARIN PIC X(10).\n...\nMOVE VARIN TO VARSTATE.\nIF VARSTATE EQUALS SPACES\n    PERFORM P100-BEG\nELSE\n    PERFORM P200-GO\nEND-IF",
    "total": "Number of Cobol Programs",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -4,
            "name": "Cobol",
            "href": "AIP/technologies/-4"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-456",
            "name": "Storable and Member Data Element Missing Initialization",
            "url": null,
            "description": "Objective\nAvoid failure to explicitly initialize software data elements in use\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances where a storable data element or member data element is declared by the \u2018Create\u2019 action, then is evaluated in a \u2018Read\u2019 action without ever being initialized by a \u2018Write\u2019 action prior to the evaluation\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-456",
            "name": "Storable and Member Data Element Missing Initialization",
            "url": null,
            "description": "Objective\nAvoid failure to explicitly initialize software data elements in use\n\nConsequence\nSoftware featuring weak initialization practices incurs the risk of logic errors within the program, possibly leading to a security problem\n\nMeasure Element\nNumber of instances where a storable data element or member data element is declared by the \u2018Create\u2019 action, then is evaluated in a \u2018Read\u2019 action without ever being initialized by a \u2018Write\u2019 action prior to the evaluation\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-456",
            "name": "Missing Initialization of a Variable",
            "url": "https://cwe.mitre.org/data/definitions/456.html",
            "description": "The software does not initialize critical variables, which causes the execution environment to use unexpected values."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
