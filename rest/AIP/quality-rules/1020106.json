{
    "id": 1020106,
    "name": "Avoid hidden form fields to prevent parameter tampering (Javascript/HTML5)",
    "href": "AIP/quality-rules/1020106",
    "critical": false,
    "severity": 10,
    "maxWeight": 8,
    "extension": {
        "name": "com.castsoftware.html5",
        "href": "AIP/extensions/com.castsoftware.html5"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule reports usage of hidden form fields in HTML5, Struts, JSF and ASP.Net tags.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Since they are not rendered visible, hidden inputs are sometimes erroneously perceived as safe. But similar to session cookies, hidden form inputs store the software\u2019s state information client-side, instead of server-side. This makes it vulnerable.\n\nIf a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.",
    "reference": "CWE-472: External Control of Assumed-Immutable Web Parameter\nhttps://cwe.mitre.org/data/definitions/472.html\n\nCWE-642: External Control of Critical State Data\nhttps://cwe.mitre.org/data/definitions/642.html\n\nOWASP Attacks - Web Parameter Tampering\nhttps://owasp.org/www-community/attacks/Web_Parameter_Tampering",
    "remediation": "Instead of using hidden form fields, the application designer can simply use one session token to reference properties stored in a server-side cache. When an application needs to check a user property, it checks the session cookie with its session table and points to the user's data variables in the cache / database. This is by far the correct way to architect this problem.\n\nIf the above technique of using a session variable instead of a hidden field cannot be implemented, a second approach is as follows.\n\nThe name/value pairs of the hidden fields in a form can be concatenated together into a single string. A secret key that never appears in the form is also appended to the string. This string is called the Outgoing Form Message. An MD5 digest or other one-way hash is generated for the Outgoing Form Message. This is called the Outgoing Form Digest and it is added to the form as an additional hidden field.",
    "remediationSample": "Avoid hidden form field",
    "sample": "Example 1 (html):\n\n<input type=\"hidden\" id=\"1008\" name=\"cost\" value=\"70.00\">\n\n-----------------------------------------------\nExample 2 (Struts):\n\n<s:hidden name=\"url\" value=http://www.mkyong.com />\nor:\n<nested:hidden name=\"otherPayList\" property=\"rowStatus\" />\nor:\n<html:hidden property=\"message\" write=\"true\">\n\n-----------------------------------------------\nExample 3 (JSF):\n\n<h:inputHidden value = \"Hello World\" id = \"hiddenField\" />\n\n-----------------------------------------------\nExample 4 (ASP.NET):\n\n<asp:hiddenfield id=\"ValueHiddenField\" onvaluechanged=\"ValueHiddenField_ValueChanged\" value=\"\" runat=\"server\"/>\n\n-----------------------------------------------\nExample 5 (JSF/IceFaces):\n\n<ice:inputHidden value=\"#{sessionBean.userToken}\" id=\"userToken\" />\n\n-----------------------------------------------\nExample 6 (JSF/Primefaces):\n\n<p:inputText value=\"hello world\" id=\"hiddenfield\" type=\"hidden\" />\n\n-----------------------------------------------\nExample 7 (Spring):\n\n<form:hidden path = \"id\" value = \"1\" />",
    "total": "Number of HTML Contents",
    "alternativeName": "Avoid hidden form fields",
    "businessCriteria": [
        {
            "id": 1062340,
            "name": "OWASP-2021-Index",
            "href": "AIP/business-criteria/1062340"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062344,
            "name": "OWASP-2021-A04 - Insecure Design",
            "href": "AIP/technical-criteria/1062344",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-472",
            "name": "External Control of Assumed-Immutable Web Parameter",
            "href": "AIP/quality-standards/CWE/items/CWE-472",
            "standard": "CWE"
        },
        {
            "id": "A04-2021",
            "name": "Insecure Design",
            "href": "AIP/quality-standards/OWASP/items/A04-2021",
            "standard": "OWASP"
        },
        {
            "id": "API1-2019",
            "name": "Broken Object Level Authorization",
            "href": "AIP/quality-standards/OWASP/items/API1-2019",
            "standard": "OWASP"
        },
        {
            "id": "STIG-V-222609",
            "name": "The application must not be subject to input handling vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222609",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
