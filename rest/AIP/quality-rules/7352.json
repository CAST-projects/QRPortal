{
    "id": 7352,
    "name": "Avoid calling properties that clone values in loops",
    "href": "AIP/quality-rules/7352",
    "critical": false,
    "severity": 10,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "List all methods that call the get accessor of a property inside a loop whenever the accessor returns a cloned object.\nA cloned object is retrieved from a call to the System.ICloneable.Clone method.\n\nLimitation: Due to the way this quality rule is implemented, false positive can be found if:\n- a getter is doing call to Clone method AND\n- if a method calls this getter but not in a loop AND\n- if the method calls another getter in a loop",
    "output": "This report lists all artifacts with code calling properties that clone values in loops.\nIt provides the following information:\n Artifact full name",
    "rationale": "This rule warns about a property accessed inside an iteration statement when the property returns a cloned object. In this case, multiple identical objects are created. If this is not the intent, access the property outside the iteration statement. Otherwise, multiple unnecessary objects are created and afterward, these objects must be garbage collected. This degrades performance, especially in compact iteration statements.\nNote that it is possible that such a construct is intended, and in that case this violation is perfectly acceptable like in the following case:\npublic void BuildArrayOfArrayLists()\n{\n         for(int i = 0; i < arrayOfLists.Length; i++)\n         {\n            arrayOfLists[i] = cloner.List;\n         }\n}",
    "reference": "Microsoft Visual Studio 2005 - http://msdn.microsoft.com/en-us/library/ms182270(VS.80).aspx",
    "remediation": "Whenever possible assign the property to a local variable outside the iteration statement and use the local variable inside the iteration statement.",
    "remediationSample": "using System;\nusing System.Collections;\n\nnamespace BankingLibrary\n{\n   public class BankAccounts\n   {\n      ArrayList someList = new ArrayList();\n\n      public ArrayList List\n      {\n         get{ return (ArrayList)someList.Clone(); }\n      }\n\n      public void ModifyList(object anything)\n      {\n         someList.Add(anything);\n      }\n   }\n\n   public class Customer\n   {\n      BankAccounts accounts;\n      ArrayList[] arrayOfLists;\n\n      public Customer()\n      {\n         accounts = new BankAccounts();\n         accounts.ModifyList(\"Money\");\n         arrayOfLists = new ArrayList[10];\n      }\n\n      // REMEDIATION\n      public void CustomerReport()\n      {\n         ArrayList localAcccounts = accounts.List;\n\n         for(int i = 0; i < 10; i++) { Console.WriteLine(localAcccounts); }\n      }\n   }\n}",
    "sample": "using System;\nusing System.Collections;\n\nnamespace BankingLibrary\n{\n   public class BankAccounts\n   {\n      ArrayList someList = new ArrayList();\n\n      public ArrayList List\n      {\n         get{ return (ArrayList)someList.Clone(); }\n      }\n\n      public void ModifyList(object anything)\n      {\n         someList.Add(anything);\n      }\n   }\n\n   public class Customer\n   {\n      BankAccounts accounts;\n      ArrayList[] arrayOfLists;\n\n      public Customer()\n      {\n         accounts = new BankAccounts();\n         accounts.ModifyList(\"Money\");\n         arrayOfLists = new ArrayList[10];\n      }\n\n      // VIOLATION\n      public void CustomerReport()\n      {\n         for(int i = 0; i < 10; i++) { Console.WriteLine(accounts.List); }\n      }\n\n   }\n}",
    "total": "Number of methods in classes but not in interfaces",
    "alternativeName": "Avoid calling properties that clone values in loops",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops",
            "href": "AIP/technical-criteria/66068",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
