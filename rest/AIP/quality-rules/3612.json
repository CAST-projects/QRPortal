{
    "id": 3612,
    "name": "Avoid missing release of SQL connection after an effective lifetime (C#, VB.NET)",
    "href": "AIP/quality-rules/3612",
    "critical": true,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "SQL connection should be closed within the Method / Function / Sub that opened it",
    "output": "This report lists all Methods / Functions / Subs that do not close the SQL connections they opened\nIt provides the following information:  Method / Function / Sub full name",
    "rationale": "A frequent issue when dealing with database resource is resource leak. This mainly comes from an incorrect code that miss to close the connection in any cases. Incorrect resource management is a common source of failures in production applications, with the usual pitfalls being database connections and file descriptors remaining opened after an exception has occurred somewhere else in the code. This leads to application servers being frequently restarted when resource exhaustion occurs, because operating systems and server applications generally have an upper-bound limit for resources.",
    "reference": "https://cwe.mitre.org/data/definitions/772.html\nASCPEM-PRF-15,\nASCRM-CWE-772.",
    "remediation": "Close the SQL connection within the same Method\n      a) call close()/dispose() on connection exclusively in a finally block \n      b) using block with resource to declare the resource that must be closed",
    "remediationSample": "//call close()/dispose() on connection in finally block:\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nprivate static void Read_OK_1(){\n    SqlConnection conn = new SqlConnection(connString);\n    try{\n        conn.Open();\n        SqlCommand cmd = new SqlCommand(queryString,conn);\n        command.ExecuteNonQuery();\n    }\n    catch{ \n    }\n    finally{\n        if (conn != null)\n            {  conn.Close(); }     // FIX : closed in finally block\n    }\n}\n\n\n//using block :\n//~~~~~~~~~~~~~~~\nprivate static void Read_OK_2(){\n    using (SqlConnection conn = new SqlConnection(connectionString))\n            {\n            conn.Open();\n            SqlCommand cmd = new SqlCommand(queryString,conn);\n            command.ExecuteNonQuery();\n            // FIX : connection closed on following line.\n            }\n}",
    "sample": "//no close()/dispose() operation:\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nprivate static void Read_KO_1(){\n    SqlConnection conn = new SqlConnection(connString);\n    conn.Open();\n    SqlCommand cmd = new SqlCommand(queryString,conn);\n    command.ExecuteNonQuery();  //VIOLATION - \n}\n\n//No Exception Handling - close/dispose is there but not surrounded with try catch : \n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nprivate static void Read_KO_2(){\n    SqlConnection conn = new SqlConnection(connString);\n    conn.Open();\n    SqlCommand cmd = new SqlCommand(queryString,conn);\n    command.ExecuteNonQuery();\n    conn.Close();    // VIOLATION  \n}",
    "total": "Total number of methods opening a connection",
    "alternativeName": "Ensure you have released your SQL connection after an effective lifetime",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062102,
            "name": "CISQ-Performance-Efficiency",
            "href": "AIP/business-criteria/1062102"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061002,
            "name": "ISO-5055-Performance-Efficiency",
            "href": "AIP/business-criteria/1061002"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062136,
            "name": "ASCPEM-PRF-15 - Storable and Member Data Element Reference Missing De-Referencing Control Element",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062153,
            "name": "ASCRM-CWE-772 - Missing Release of Resource after Effective Lifetime",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062188,
            "name": "ASCSM-CWE-772 - Missing Release of Resource after Effective Lifetime",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061142,
            "name": "CWE-1091: Use of Object without Invoking Destructor Method",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061045,
            "name": "CWE-404: Improper Resource Shutdown or Release",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061085,
            "name": "CWE-772: Missing Release of Resource after Effective Lifetime",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61018,
            "name": "Efficiency - Memory, Network and Disk Space Management",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-15",
            "name": "Storable and Member Data Element Reference Missing De-Referencing Control Element",
            "url": null,
            "description": "Objective\nDetection of occurrences of this pattern helps decrease software resource waste by enforcing proper release of used data elements.\n\nConsequence\nSoftware featuring known under-efficient coding practices requires excessive computational resources\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-772",
            "name": "Missing Release of Resource after Effective Lifetime",
            "url": null,
            "description": "Objective\nAvoid resource hoarding and consequently resource depletion\n\nConsequence\nSoftware that is unaware of resource bounds or fails to monitor resources incurs the risk of exceeding resource and capacity limits\n\nMeasure Element\nNumber of instances where a platform resource is allocated and assigned a unique resource handler value via a manage resource action, and its unique resource handler value is used throughout the application along a transformation sequence composed of action elements with data relations, some of which are part of named callable and method control elements, but none of which is a resource release statement\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-772",
            "name": "Missing Release of Resource after Effective Lifetime",
            "url": null,
            "description": "Objective\nAvoid resource hoarding and consequently resource depletion\n\nConsequence\nSoftware unaware of resource lifecycle incurs the risk of preventing all other processes from accessing the same type of resource\n\nMeasure Element\nNumber of instances where a platform resource is allocated and assigned a unique resource handler value via a manage resource action, and its unique resource handler value is used throughout the application along a transformation sequence composed of action elements with data relations, some of which are part of named callable and method control elements, but none of which is a resource release statement\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-404",
            "name": "Improper Resource Shutdown or Release",
            "url": "https://cwe.mitre.org/data/definitions/404.html",
            "description": "The program does not release or incorrectly releases a resource before it is made available for re-use."
        },
        {
            "standard": "CWE",
            "id": "CWE-772",
            "name": "Missing Release of Resource after Effective Lifetime",
            "url": "https://cwe.mitre.org/data/definitions/772.html",
            "description": "The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed."
        },
        {
            "standard": "CWE",
            "id": "CWE-1091",
            "name": "Use of Object without Invoking Destructor Method",
            "url": "https://cwe.mitre.org/data/definitions/1091.html",
            "description": "The software contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-404",
            "name": "Improper Resource Shutdown or Release",
            "url": "https://cwe.mitre.org/data/definitions/404.html",
            "description": "The program does not release or incorrectly releases a resource before it is made available for re-use."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-772",
            "name": "Missing Release of Resource after Effective Lifetime",
            "url": "https://cwe.mitre.org/data/definitions/772.html",
            "description": "The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-1091",
            "name": "Use of Object without Invoking Destructor Method",
            "url": "https://cwe.mitre.org/data/definitions/1091.html",
            "description": "The software contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-404",
            "name": "Improper Resource Shutdown or Release",
            "url": "https://cwe.mitre.org/data/definitions/404.html",
            "description": "The program does not release or incorrectly releases a resource before it is made available for re-use."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-772",
            "name": "Missing Release of Resource after Effective Lifetime",
            "url": "https://cwe.mitre.org/data/definitions/772.html",
            "description": "The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1091",
            "name": "Use of Object without Invoking Destructor Method",
            "url": "https://cwe.mitre.org/data/definitions/1091.html",
            "description": "The software contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
