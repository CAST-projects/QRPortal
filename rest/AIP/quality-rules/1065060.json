{
    "id": 1065060,
    "name": "Avoid loops with floating point counter (C/C++)",
    "href": "AIP/quality-rules/1065060",
    "critical": false,
    "severity": 10,
    "maxWeight": 4,
    "extension": {
        "name": "com.castsoftware.cpp",
        "href": "AIP/extensions/com.castsoftware.cpp"
    },
    "description": "Floating-point variables should not be used as loop counters. For loops are best suited to simple increments and termination conditions; while loops are preferable for more complex uses.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When using a floating-point loop counter, the accumulation of rounding errors may result in a mismatch between the expected and actual number of iterations. This can happen when a loop step that is not a power of the floating-point radix is rounded to a value that can be represented.\nEven if a loop with a floating-point loop counter appears to behave correctly on one implementation, it may give a different number of iterations on another implementation.",
    "reference": "MISRA C 2012 - 14.1: A loop counter shall not have essentially floating type\n\nAUTOSAR, C++, 2014, Rule A6-5-2: A for loop shall contain a single loop-counter which shall not have floating point type.\nMISRA, C++, 2008, Rule 6-5-1: A for loop shall contain a single loop-counter which shall not have floating type.",
    "remediation": "Use an integral variable",
    "remediationSample": "float32_t f;\nfor ( uint32_t counter = 0u; counter < 1000u; ++counter )\n{\nf = ( float32_t ) counter * 0.001f;\n}\n\n\n_______________________________________________\n\n/* The following while loop is compliant because f is not being used as a loop counter.*/\nfloat32_t f;\nuint32_t u32a;\nf = read_float32 ( );\ndo\n{\nu32a = read_u32 ( );\n/* f does not change in the loop so cannot be a loop counter */\n} while ( ( ( float32_t ) u32a - f ) > 10.0f );",
    "sample": "uint32_t counter = 0u;\nfor ( float32_t f = 0.0f; f < 1.0f; f += 0.001f )\n{\n++counter;\n}\n\n/*The following while loop is non-compliant because f is being used as a loop counter. */\nfloat32_t f = 0.0f;\nwhile ( f < 1.0f )\n{\nf += 0.001f;\n}",
    "total": "Number of C / C++ method and function",
    "alternativeName": "Ensure to use an integral value to iterate in loops",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61009,
            "name": "Complexity - Algorithmic and Control Structure Complexity",
            "href": "AIP/technical-criteria/61009",
            "weight": 4,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "AUTOSAR-CPP-2014-Statements",
            "name": "Statements",
            "href": "AIP/quality-standards/C-CPP/items/AUTOSAR-CPP-2014-Statements",
            "standard": "C-CPP"
        },
        {
            "id": "MISRA-CPP-2008-Statements",
            "name": "Statements",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-CPP-2008-Statements",
            "standard": "C-CPP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        10.0,
        70.0,
        90.0,
        99.0
    ]
}
