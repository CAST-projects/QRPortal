{
    "id": 1042034,
    "name": "Avoid using Struts REST plugin with XStream createXStream to deserialise XML requests in Struts 2.1.2 - Struts 2.3.33, Struts 2.5 - Struts 2.5.12",
    "href": "AIP/quality-rules/1042034",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check the use of XStream deserializing XML request and the Struts used by the application.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The REST Plugin is using a XStreamHandler with an instance of XStream for deserialization without any type filtering and this can lead to Remote Code Execution when deserializing XML payloads.",
    "reference": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9805\nhttps://nvd.nist.gov/vuln/detail/CVE-2017-9805\nhttp://cwe.mitre.org/data/definitions/502.html",
    "remediation": "Upgrade to Struts 2.5.13 or Struts 2.3.34.\n\nUse createXStream(ActionInvocation invocation) method.",
    "remediationSample": "import org.apache.struts2.rest.handler.XStreamHandler;\n...\n\npublic class MyClass {\n\n  public MyClass(ActionInvocation invocation) {\n\n    final XStreamHandler dataHandler = new XStreamHandler();\n   \n\n    // using this API will automatically secure the instance of XStream\n    XStream dataStream = dataHandler.createXStream(invocation)\n  }\n}",
    "sample": "import org.apache.struts2.rest.handler.XStreamHandler;\n...\n\npublic class MyClass {\n\n  public MyClass() {\n\n    final XStreamHandler dataHandler = new XStreamHandler();\n\n    XStream dataStream = dataHandler.createXStream()\n  }\n}",
    "total": "Number of Java Methods",
    "alternativeName": "Avoid using Struts REST plugin with XStream createXStream to deserialise XML requests in Struts 2.1.2 - Struts 2.3.33, Struts 2.5 - Struts 2.5.12",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": "https://cwe.mitre.org/data/definitions/502.html",
            "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
        },
        {
            "standard": "OWASP",
            "id": "A8-2017",
            "name": "Insecure Deserialization",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization",
            "description": "Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks."
        },
        {
            "standard": "OWASP",
            "id": "A9-2013",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts."
        },
        {
            "standard": "OWASP",
            "id": "A9-2017",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
