{
    "id": 1065126,
    "name": "Avoid using goto to jump backwards into a statement in the same function(C/C++)",
    "href": "AIP/quality-rules/1065126",
    "critical": false,
    "maxWeight": 3,
    "description": "This rule will raise a violation in case goto statement is used to jump backward in code",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Unconstrained use of goto can lead to programs that are extremely difficult to comprehend, analyze and, for C++, can also lead to the program exhibiting unspecified behavior. However, in many cases, a total ban on goto requires the introduction of flags to ensure correct control flow, and it is possible that these flags may themselves be less transparent than the goto they replace. \n\nTherefore, the restricted use of goto is allowed where that use will not lead to semantics contrary to developer expectations. \u201cBack\u201d jumps are prohibited as they can be used to create iterations without using the well-defined iteration statements supplied by the core language",
    "reference": "Standards References:\nMISRA C++ 2008, 6-6-2: The goto statement shall jump to a label declared later in the same function body\nMISRA C 2012, 15.2: The goto statement shall jump to a label declared later in the same function",
    "remediation": "Do not use goto to create iterations, instead use defined methods for such purpose",
    "sample": "void f ( void )\n{\nint32_t j = 0;\nL1:\n++j;\nif ( 10 == j )\n{\ngoto L2; /* Compliant */\n}\ngoto L1; /* Non-compliant */\nL2 :\n++j;\n}",
    "total": "Number of C / C++ methods and function",
    "alternativeName": "Avoid using goto to jump backwards into a statement in the same function(C/C++)",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61024,
            "name": "Programming Practices - Structuredness",
            "href": "AIP/technical-criteria/61024",
            "weight": 3
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "AUTOSAR-CPP-2014-Statements",
            "name": "Statements",
            "href": "AIP/quality-standards/C-CPP/items/AUTOSAR-CPP-2014-Statements",
            "standard": "C-CPP"
        },
        {
            "id": "MISRA-CPP-2008-Statements",
            "name": "Statements",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-CPP-2008-Statements",
            "standard": "C-CPP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
