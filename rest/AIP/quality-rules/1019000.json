{
    "id": 1019000,
    "name": "Always separate service contracts from service implementation.",
    "href": "AIP/quality-rules/1019000",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "Separating the service contract from the service implementation improves clarity and makes the maintenance of the source code easier.\n\nThe service contract decoration must be done on an interface instead of a class.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Easier source code maintenance.",
    "reference": "https://docs.microsoft.com/en-us/dotnet/framework/wcf/designing-service-contracts?redirectedfrom=MSDN",
    "remediation": "Always separate service contract from service implementation.",
    "remediationSample": "using System;\nusing System.ServiceModel;\n\nnamespace GettingStartedLib\n{\n        [ServiceContract(Namespace = \"http://Microsoft.ServiceModel.Samples\")]\n        public interface ICalculator\n        {\n            [OperationContract]\n            double Add(double n1, double n2);\n            [OperationContract]\n            double Subtract(double n1, double n2);\n            [OperationContract]\n            double Multiply(double n1, double n2);\n            [OperationContract]\n            double Divide(double n1, double n2);\n        }\n}\n\n\nusing System;\nusing System.ServiceModel;\n\nnamespace GettingStartedLib\n{\n    public class CalculatorService : ICalculator\n    {\n        public double Add(double n1, double n2)\n        {\n            double result = n1 + n2;\n            Console.WriteLine(\"Received Add({0},{1})\", n1, n2);\n            // Code added to write output to the console window.\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n        public double Subtract(double n1, double n2)\n        {\n            double result = n1 - n2;\n            Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n        public double Multiply(double n1, double n2)\n        {\n            double result = n1 * n2;\n            Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n        public double Divide(double n1, double n2)\n        {\n            double result = n1 / n2;\n            Console.WriteLine(\"Received Divide({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n    }\n}",
    "sample": "using System;\nusing System.ServiceModel;\n\nnamespace GettingStartedLib\n{\n    public class CalculatorService : ICalculator\n    {\n        [OperationContract]\n        public double Add(double n1, double n2)\n        {\n            double result = n1 + n2;\n            Console.WriteLine(\"Received Add({0},{1})\", n1, n2);\n            // Code added to write output to the console window.\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n        [OperationContract]\n        public double Subtract(double n1, double n2)\n        {\n            double result = n1 - n2;\n            Console.WriteLine(\"Received Subtract({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n        [OperationContract]\n        public double Multiply(double n1, double n2)\n        {\n            double result = n1 * n2;\n            Console.WriteLine(\"Received Multiply({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n\n       \n        [OperationContract]\n        public double Divide(double n1, double n2)\n        {\n            double result = n1 / n2;\n            Console.WriteLine(\"Received Divide({0},{1})\", n1, n2);\n            Console.WriteLine(\"Return: {0}\", result);\n            return result;\n        }\n    }\n}",
    "total": "Number of service classes and interfaces interfacing a service contract",
    "alternativeName": "Always separate service contracts from service implementation.",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61024,
            "name": "Programming Practices - Structuredness",
            "href": "AIP/technical-criteria/61024",
            "weight": 5
        }
    ],
    "technologies": [
        {
            "id": 1019000,
            "name": "WCF",
            "href": "AIP/technologies/1019000"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
