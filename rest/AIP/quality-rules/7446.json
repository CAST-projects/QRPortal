{
    "id": 7446,
    "name": "Avoid double checked locking for JSE 4.x and previous version",
    "href": "AIP/quality-rules/7446",
    "critical": true,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "Double checked locking is a software design pattern used to reduce locking overhead when implementing lazy initialization in a multi-thread environment. This avoid to initializing a value until the first time it is accessed.\nThis pattern is unsafe because there is no guarantee it will work on single or multi-processor machines.\n\n\n\nFor JSE 4.x and previous version, all methods that are not synchronized and that check a value of one of its field before using synchronized and then check this field again and then assign a value to this field will be reported.\n\n\nNote also that even if this issue as been fixed in JSE 5.0 it doesn't provide performance optimization.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.",
    "reference": "https://cwe.mitre.org/data/definitions/609.html\nhttp://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\nhttp://www.artima.com/designtechniques/threadsafety.html\nhttp://www-128.ibm.com/developerworks/java/library/j-dcl.html\nhttp://www-128.ibm.com/developerworks/java/library/j-jtp03304/",
    "remediation": "To remediate, there are two solutions depending on performance choice:\n1/ synchronize the method: each call to this method will cost but the initialization will be made when needed\n2/ make the field static  (Initialize-On-Demand Holder Class idiom): the field will be initialized during the initialization of the class even if not required, but each call to the method that return this field will not cost.",
    "remediationSample": "1/ synchronized the method getHelper()\n class Foo { \n   private Helper helper = null;\n   public synchronized Helper getHelper() {\n     if (helper == null) \n         helper = new Helper();\n     return helper;\n   }\n2/ declare the field as static\n class Foo { \n   private static Helper helper = new Helper();\n   public Helper getHelper() {\n     return helper;\n   }",
    "sample": "class Foo { \n  private Helper helper = null;\n  public Helper getHelper() {\n    if (helper == null) {\n      synchronized(this) {\n        if (helper == null) {\n          helper = new Helper();\n        }    \n      }    \n    }    \n    return helper;\n  }\n}",
    "total": "Number of methods that are synchronized or use the synchronized keyword",
    "alternativeName": "Prefer not using Double checked locking for JSE 4.x and previous version",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-609",
            "name": "Double-Checked Locking",
            "url": "https://cwe.mitre.org/data/definitions/609.html",
            "description": "The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-16",
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
