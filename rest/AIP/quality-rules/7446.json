{
    "id": 7446,
    "name": "Avoid double checked locking",
    "href": "AIP/quality-rules/7446",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "associatedValueName": "Associated Value",
    "description": "For JSE 4.x and previous version, all methods that are not synchronized and that check a value of one of its field before using synchronized and then check this field again and then assign a value to this field will be reported.",
    "output": "This report lists all Methods that use double checked locking pattern.\nIt provides the following information:\n Method full name",
    "rationale": "Double checked locking is a software design pattern used to reduce locking overhead when implementing lazy initialization in a multi-thread environment. This avoid to initializing a value until the first time it is accessed.\nThis pattern is unsafe because there is no guarantee it will work on single or multi-processor machines.\nNote also that even if this issue as been fixed in JSE 5.0 it doesn't provide performance optimization.",
    "reference": "http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\nhttp://www.artima.com/designtechniques/threadsafety.html\nhttp://www-128.ibm.com/developerworks/java/library/j-dcl.html\nhttp://www-128.ibm.com/developerworks/java/library/j-jtp03304/",
    "remediation": "To remediate, there are two solutions depending on performance choice:\n1/ synchronize the method: each call to this method will cost but the initialization will be made when needed\n2/ make the field static  (Initialize-On-Demand Holder Class idiom): the field will be initialized during the initialization of the class even if not required, but each call to the method that return this field will not cost.",
    "remediationSample": "1/ synchronized the method getHelper()\n class Foo { \n   private Helper helper = null;\n   public synchronized Helper getHelper() {\n     if (helper == null) \n         helper = new Helper();\n     return helper;\n   }\n2/ declare the field as static\n class Foo { \n   private static Helper helper = new Helper();\n   public Helper getHelper() {\n     return helper;\n   }",
    "sample": "class Foo { \n  private Helper helper = null;\n  public Helper getHelper() {\n    if (helper == null) {\n      synchronized(this) {\n        if (helper == null) {\n          helper = new Helper();\n        }    \n      }    \n    }    \n    return helper;\n  }\n}",
    "total": "The total will be the total of methods that are synchronized or use the synchronized keyword",
    "alternativeName": "Prefer not using Double checked locking for JSE 4.x and previous version",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "href": "AIP/technical-criteria/66065",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-609",
            "name": "Double-Checked Locking",
            "href": "AIP/quality-standards/CWE/items/CWE-609",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-16",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-16",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
