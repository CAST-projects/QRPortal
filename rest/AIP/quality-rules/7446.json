{
    "id": 7446,
    "name": "Avoid double checked locking for JSE 4.x and previous version",
    "href": "AIP/quality-rules/7446",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.jee",
        "href": "AIP/extensions/com.castsoftware.jee"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "Double checked locking is a software design pattern used to reduce locking overhead when implementing lazy initialization in a multi-thread environment. This avoids initializing a value until the first time it is accessed.\nThis pattern is unsafe because there is no guarantee it will work on single or multi-processor machines.\n\nFor JSE 4.x and previous versions, all methods that are not synchronized and that use double checked locking will be reported.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.",
    "reference": "https://cwe.mitre.org/data/definitions/609.html\nhttp://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\nhttp://www.artima.com/designtechniques/threadsafety.html\nhttp://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#dcl",
    "remediation": "To remediate, there are three solutions depending on performance considerations:\n1/ synchronize the method: each call to this method will cost more but the initialization will be made when needed\n2/ use Initialize-On-Demand Holder Class idiom: the field will be initialized during the initialization of the class even if is not required, but each call to the method that returns this field will not.\n3/ make the field volatile - Java 5 and above",
    "remediationSample": "1/ synchronized the method getUnsafeResource()\npublic class UserClass {\n    private UnsafeResource unsafeResource = null;\n\n    // make getUnsafeResource() synchronized\n    public synchronized UnsafeResource getUnsafeResource() {\n        if (unsafeResource == null)\n            unsafeResource = new UnsafeResource();\n        return unsafeResource;\n    }\n}\n\n2/ use Initialize-On-Demand Holder Class idiom\npublic class UserClass {\n// Use initialize-on-demand holder class idiom\n    private static class HolderClass {\n        public static UnsafeResource unsafeResource = new UnsafeResource();\n    }\n\n    public static UnsafeResource getUnsafeResource() {\n        return HolderClass.unsafeResource;\n    }\n}\n\n3/ make the field volatile\npublic class UserClass {\n    private volatile UnsafeResource unsafeResource = null; // field is volatile\n\n    public UnsafeResource getUnsafeResource() {\n        if (unsafeResource == null) { //Double checked locking used\n            synchronized (this) {\n                if (unsafeResource == null) {\n                    unsafeResource = new UnsafeResource();\n                }\n            }\n        }\n        return unsafeResource;\n    }\n}",
    "sample": "public class UserClass {\n    private UnsafeResource unsafeResource = null;\n\n    public UnsafeResource getUnsafeResource() {\n        //Double checked locking used for unsafeResource\n        if (unsafeResource == null) {\n            synchronized (this) {\n                if (unsafeResource == null) {\n                    unsafeResource = new UnsafeResource();\n                }\n            }\n        }\n        return unsafeResource;\n    }\n}",
    "total": "Number of methods that are synchronized or use the synchronized keyword",
    "alternativeName": "Prefer not using Double checked locking for JSE 4.x and previous version",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063120,
            "name": "PCI-Requirement-6.5.6 - All high risk vulnerabilities",
            "href": "AIP/technical-criteria/1063120",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "href": "AIP/technical-criteria/66065",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-609",
            "name": "Double-Checked Locking",
            "href": "AIP/quality-standards/CWE/items/CWE-609",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-16",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-16",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/quality-standards/PCI-DSS4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
