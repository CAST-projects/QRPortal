{
    "id": 1020856,
    "name": "Ensure catching Typescript error in React components",
    "href": "AIP/quality-rules/1020856",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "extension": {
        "name": "com.castsoftware.typescript",
        "href": "AIP/extensions/com.castsoftware.typescript"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule expects that you have implemented an error boundary catch method to catch TypeScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Ensure that ReactJS component have implemented a componentDidCatch method in order to check you will not miss any problem that occurred in your application and you will give the information to the user .",
    "reference": "CISQ OMG",
    "remediation": "Check that all the callback error are checked and used.",
    "remediationSample": "\"use strict\";\nclass MyComponentWithErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n    componentDidCatch(error, info) {\n        // Display fallback UI\n        this.setState({ hasError: true });\n        // You can also log the error to an error reporting service\n        logErrorToMyService(error, info);\n    }\n    render() {\n        if (this.state.hasError) {\n            // You can render any custom fallback UI\n            return '<h1>Something went wrong.</h1>';\n        }\n        return this.props.children;\n    }\n}",
    "sample": "\"use strict\";\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n}",
    "total": "Number of ReactJS components",
    "alternativeName": "Ensure you have overwritten component methods to properly catch errors",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062148,
            "name": "ASCRM-CWE-396 - Declaration of Catch for Generic Exception",
            "href": "AIP/technical-criteria/1062148",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062180,
            "name": "ASCSM-CWE-396 - Declaration of Catch for Generic Exception",
            "href": "AIP/technical-criteria/1062180",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062181,
            "name": "ASCSM-CWE-397 - Declaration of Throws for Generic Exception",
            "href": "AIP/technical-criteria/1062181",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063119,
            "name": "PCI-Requirement-6.5.5 - Improper error handling",
            "href": "AIP/technical-criteria/1063119",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "href": "AIP/technical-criteria/61014",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCRM-CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "href": "AIP/quality-standards/CISQ/items/ASCRM-CWE-396",
            "standard": "CISQ"
        },
        {
            "id": "ASCSM-CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-396",
            "standard": "CISQ"
        },
        {
            "id": "ASCSM-CWE-397",
            "name": "Declaration of Throws for Generic Exception",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-397",
            "standard": "CISQ"
        },
        {
            "id": "CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "href": "AIP/quality-standards/CWE/items/CWE-396",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-11",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-11",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
