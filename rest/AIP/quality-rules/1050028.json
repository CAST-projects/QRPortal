{
    "id": 1050028,
    "name": "Always use LAContext canEvaluatePolicy: before using evaluatePolicy:",
    "href": "AIP/quality-rules/1050028",
    "critical": true,
    "description": "The Local Authentication framework provides facilities for requesting authentication from users with specified security policies. If you do not use properly the API, you can break the Touch ID security check. This rule is compliant with OWASP M1 2016 recommendation.",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "Before using evaluatePolicy: method, make sure you have checked the LAContext using canEvaluatePolicy method just before.",
    "reference": "https://developer.apple.com/library/ios/documentation/LocalAuthentication/Reference/LocalAuthentication_Framework/",
    "remediation": "Make sure you have implemented the canEvaluatePolicy method just before using the evaluatePolicy method",
    "remediationSample": "LAContext *myContext = [[LAContext alloc] init];\nNSError *authError = nil;\nNSString *myLocalizedReasonString = <#String explaining why app needs authentication#>;\n \nif ([myContext canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&authError]) {\n    [myContext evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n                  localizedReason:myLocalizedReasonString\n                            reply:^(BOOL success, NSError *error) {\n            if (success) {\n                // User authenticated successfully, take appropriate action\n            } else {\n                // User did not authenticate successfully, look at error and take appropriate action\n            }\n        }];\n} else {\n    // Could not evaluate policy; look at authError and present an appropriate message to user\n}",
    "sample": "LAContext *myContext = [[LAContext alloc] init]; \nNSError *authError = nil; \nNSString *myLocalizedReasonString = <#String explaining why app needs authentication#>; \n    [myContext evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics \n                  localizedReason:myLocalizedReasonString \n                            reply:^(BOOL success, NSError *error) { \n            if (success) { \n                // User authenticated successfully, take appropriate action \n            } else { \n                // User did not authenticate successfully, look at error and take appropriate action \n            } \n        }]; \n}",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "AIP/technologies/1050001"
        }
    ],
    "qualityStandards": [
        {
            "standard": "OWASP",
            "id": "M1-2016",
            "name": "Improper Platform Usage",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M1-Improper_Platform_Usage",
            "description": "In order for this vulnerability to be exploited, the organization must expose a web service or API call that is consumed by the mobile app. The exposed service or API call is implemented using insecure coding techniques that produce an OWASP Top Ten vulnerability within the server. Through the mobile interface, an adversary is able to feed malicious inputs or unexpected sequences of events to the vulnerable endpoint. Hence, the adversary realizes the original OWASP Top Ten vulnerability on the server."
        }
    ]
}
