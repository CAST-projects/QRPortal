{
    "id": 7510,
    "name": "DEPRECATED: Use only Hibernate API to access to the database",
    "href": "AIP/quality-rules/7510",
    "critical": false,
    "severity": 10,
    "maxWeight": 9,
    "associatedValueName": "Number of reference",
    "description": "Reports all objects that reference the following java.sql interface and their methods\n- java.sql.Connection\n- java.sql.Statement\n- java.sql.PreparedStatement\n- java.sql.CallableStatement\nexcept when they are used as parameters of hibernate methods (methods whose FQDN begin with net.sf.hibernate or org.hibernate)\n\nThe threshold permits to add other interfaces or classes from other framework to the previous list.",
    "output": "List objects that use other API than hibernate API\nIt provides the following information:\n - Artifact Full Name\n - Number of reference",
    "rationale": "Using Hibernate API only brings several benefits:\n- Performances: Hibernate provides potential for caching that is expected to outperforms queries that use direct JDBC access.\n- Implementation: object mapping takes care of mapping the JDBC result sets to graph of persistent objects. Using direct JDBC API means writing the tedious code by hand to transform a JDBC ResultSet to an object graph.\n- Database independence: the code can be used with all supported databases\n- Transparent support of JDBC and JTA in both managed and non-managed environments",
    "reference": "Hibernate in Action (ISBN 1932394-15-X)",
    "remediation": "If you really need to use SQL for feature that are not supported by Hibernate (like specifying SQL query hints or hierarchical queries such as Oracle CONNECT BY clause), you can use either SQL queries defined in the hibernate XML file or by using native SQL with org.hibernate.Session.createSQLQuery(java.lang.String queryString).",
    "remediationSample": "Session session = sessionFactory.openSession(); \n\nQuery query = session.createQuery(\"from EmployeeBean\"); \n// FIXED\nList<EmployeeBean> finalList = query.list();",
    "sample": "List<EmployeeBean> employeeList = new ArrayList<EmployeeBean>(); \n\nConnection con = DriverManager.getConnection(url); \nStatement stmt = con.createStatement();\n// VIOLATION\nResultSet rs = stmt.executeQuery(\"SELECT * FROM COMPANY\"); \nwhile ( rs.next() ) { \n   EmployeeBean eb = new Employeebean(); \n   eb.setName(rs.getString(\"name\")); \n   eb.setSalary(rs.getFloat(\"salary\")); \n   employeeList.add(eb); \n}",
    "total": "Number of artifacts that violate this rule plus the artifacts that reference net.sf.hibernate.Query, org.hiberate.Query, net.sf.hibernate.Session, org.hibernate.Session",
    "alternativeName": "Ensure using only Hibernate API to access to the database in order to improve the performances",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61001,
            "name": "Architecture - Multi-Layers and Data Access",
            "href": "AIP/technical-criteria/61001",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        {
            "name": "interface_1",
            "description": null,
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        "java.sql.Connection"
                    ]
                }
            ]
        },
        {
            "name": "interface_2",
            "description": null,
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        "java.sql.Statement"
                    ]
                }
            ]
        },
        {
            "name": "interface_3",
            "description": null,
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        "java.sql.PreparedStatement"
                    ]
                }
            ]
        },
        {
            "name": "interface_4",
            "description": null,
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        "java.sql.CallableStatement"
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
