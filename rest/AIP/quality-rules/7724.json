{
    "id": 7724,
    "name": "Overriden equals() Methods in persistent Subclasses should only reference properties from the persistent base Class",
    "href": "AIP/quality-rules/7724",
    "critical": true,
    "description": "Reports all equals() methods of persistent subclasses that involves an attribute or a getter of the subclasses of the persistent base class (subclass or joined-subclass).",
    "output": "Lists all overriden equals() methods of persistent subclasses (subclass or joined-subclass) that involves an attribute or the getter of the subclasses of the persitent class.\n\nIt provides the following information:\n Method full name",
    "rationale": "It's almost never correct to override equals() on a persistant subclass and include properties that do not belong to the persistent base class in the comparison. It's tricky to satisfy the requirements that equality be both symmetric and transitive in this case; and, more important, the business key wouldn't correspond to any well-defined candidate natural key in the database (subclass properties may be mapped to a different table).",
    "reference": "Hibernate in Action (ISBN 1932394-15-X) p 125",
    "remediation": "Reconsider your business key attributes and use only attributes from the base class.",
    "remediationSample": "Remove the equals() method from Cat and Dog. If necessary, race and color attributes must be moved to the Animal class and be used into the equals() method. They will become a part of the business key.",
    "sample": "----> Java files:\n\npublic class Animal {\n  private Long id;\n  private String name;\n  ...\n  public Long getId() {\n    return this.id;\n  }\n\n  public String getName() {\n    return this.name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n...\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof Animal)) return false;\n    final Animal animal = (Animal) o;\n    if (! (this.getName() == animal.getName()) ) return false;\n    return true;\n  }\n}\n\npublic class Dog extends Animal {\n   private String race;\n   ...\n   \n   public String getRace() {\n      return this.race;\n   }\n\n  public String setRace(String race) {\n     this.race = race;\n  }\n\n  public boolean equals(Object o) {  // VIOLATION\n    if (this == o) return true;\n    if (!(o instanceof Dog)) return false;\n    final Dog dog = (Dog) o;\n    if (! (this.getName() == dog.getName())) return false;\n    if (! (this.getRace() == dog.getRace())) return false;\n\n    return true;\n  }\n}\n\npublic class Cat extends Animal {\n   private String color;\n   ...\n   \n   public String getColor() {\n      return this.color;\n   }\n\n  public String setColor(String color) {\n     this.color = color;\n  }\n\n  public boolean equals(Object o) {  // VIOLATION\n    if (this == o) return true;\n    if (!(o instanceof Cat)) return false;\n    final Cat cat = (Cat) o;\n    if (! (this.getName() == cat.getName())) return false;\n    if (! (this.getColor() == cat.getColor())) return false;\n\n    return true;\n  }\n}\n\n----> animal.hbm.xml\n<class name=\"Animal\" table=\"animal\">\n    <id name=\"id\" type=\"long\" column=\"animal_id\">\n        <generator class=\"native\"/>\n    </id>\n    <discriminator column=\"type\" type=\"string\"/>\n    <property name=\"name\" column=\"name\"/>\n    ...\n    <subclass name=\"Dog\" discriminator-value=\"DOG\">\n        <property name=\"race\" column=\"race\"/>\n        ...\n    </subclass>\n    <subclass name=\"Cat\" discriminator-value=\"CAT\">\n        <property name=\"color\" column=\"color\"/>\n        ...\n    </subclass>\n</class>",
    "total": "Number of persistent subclasses (subclass or joined-subclass) that override the equals method",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
