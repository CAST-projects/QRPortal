{
    "id": 8078,
    "name": "Casting from pointer to base Class to pointer to derived Class should be done through 'dynamic_cast' or 'static_cast'",
    "href": "AIP/quality-rules/8078",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Pointer incorrectly casted",
    "description": "This rule searches for C++ functions that do not cast a pointer to a base class to a pointer to a derived class by using a 'static_cast' or a 'dynamic_cast'.\nThis rule is deactivated by default. If you want to activate it, please deactivate the rule #8060.",
    "output": "Associated to each C++ method, constructor, and destructor with violations, the Quality Rule provides:\n- pointer incorrectly casted\n- Bookmarks for violation occurrences found in source code:\n  - pointer cast\n  - source class\n  - target class",
    "rationale": "Casting from pointer to base class to pointer to derived class should usually be done through 'dynamic_cast'. See rule #8060 for more information.\n\nIn performances-constrained situations, and if you know through another mean that the 'dynamic_cast' will succeed, you can instead call 'static_cast', which will be slightly more efficient. In this case, it is advised to write code that will check in debug builds that the assumption is true.\n\nIn any case, a C-style cast is unsafe to use, because it will be considered as a 'reinterpret_cast' if the classes are not related, and will do the wrong thing.",
    "reference": "MISRA C++\nC++ Coding Standard (Sutter/Alexandrescu) Item 93, http://www.gotw.ca/publications/c++cs.htm",
    "remediation": "Use 'dynamic_cast' or 'static_cast' to cast pointers to base class to pointer to derived class. See remediation example for more details.",
    "remediationSample": "void f(A *p)\n{\n    B* pb = dynamic_cast<B*>(p);\n    if (!pb)\n    {\n        // Not the expected type, handle the error \n    }\n    else\n    {\n        // Use pb\n    }\n}\n\nIn circumstances where the @dynamic_cast@ has been measured to cause unacceptable delay, a @static_cast@ could be used instead, but would benefit from being written this way:\n\ntemplate<class To, class From> To checked_cast(From* p)\n{\n    assert(dynamic_cast<To>(p) == static_cast<To>(p) && \"Error: Check cast failed\");\n    return static_cast<To>(p);\n}\n\nvoid f(A *p)\n{\n    B* pb = checked_cast<B*>(p);\n    // Use pb\n}",
    "sample": "class A\n{\n};\n\nclass B : public A\n{\n};\n\nvoid f(A *p)\n{\n    B* pb = (B*)p; // Violation\n    // Use pb\n}",
    "total": "Number of C++ methods, constructors, and destructors",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
