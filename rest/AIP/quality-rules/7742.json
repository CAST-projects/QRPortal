{
    "id": 7742,
    "name": "Avoid SQL injection",
    "href": "AIP/quality-rules/7742",
    "critical": true,
    "severity": 30,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.securityanalyzer",
        "href": "AIP/extensions/com.castsoftware.securityanalyzer"
    },
    "associatedValueName": "Call stack from user input source down to the target SQL execution method",
    "description": "This quality rule identifies SQL injection vulnerabilities by analyzing data flow paths from user input sources to SQL query execution points. The rule uses CAST's data-flow engine to detect when user-controllable data is directly concatenated or interpolated into SQL statements without proper validation, sanitization, or parameterization. It searches for patterns where untrusted input flows into SQL queries through string concatenation, string formatting, or dynamic query construction methods.",
    "output": "List all methods that make resource calls forged by user input\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target SQL execution method.",
    "rationale": "The software constructs all or part of an SQL command via user-controllable inputs. These inputs are not neutralized or are incorrectly neutralized. As a consequence, the SQL command may be completely altered.\nCritical consequences include: data breach (Attackers can access sensitive information), authentication bypass, data integrity compromise, system compromise, etc.",
    "reference": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nhttps://cwe.mitre.org/data/definitions/89.html\n\nCWE-564: SQL Injection: Hibernate\nhttps://cwe.mitre.org/data/definitions/564.html\n\nOpen Web Application Security Project (OWASP)  Top ten - Injection category\nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection\nhttps://owasp.org/Top10/A03_2021-Injection/\n\nOWASP Cheat Sheet Series - SQL Injection Prevention Cheat Sheet\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n\nCISQ rule: ASCSM-CWE-89.",
    "remediation": "To prevent SQL injection vulnerabilities, implement these security measures:\n-Use parameterized queries/prepared statements\n-Use stored procedures with parameters\n-Use vetted ORM libraries like Spring Data JPA or Entity Framework Core.",
    "remediationSample": "// ----------------------------------------------------------------------------\n// 1) Java sample\n\npublic int getUserId(String userName) throws SQLException {\n  String sql = \"SELECT user_id FROM users WHERE name = ?\";\n\n  try (Connection conn = getConnection(\"jdbc:mysql://localhost/mydb\");\n    PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n    // Parameter binding ensures user input is treated as data, not code\n    pstmt.setString(1, userName);\n\n    try (ResultSet rs = pstmt.executeQuery()) { // OK\n      return rs.next() ? rs.getInt(\"user_id\") : 0;\n    }\n  }\n}\n\n// ----------------------------------------------------------------------------\n// 2) C# sample\n\nprivate int GetUserId(string userName)\n{\n  string sql = \"SELECT [UserID] FROM [Users] WHERE [Name] = @userName\";\n\n  using (var connection = new SqlConnection(\"connectionString\"))\n  using (var command = new SqlCommand(sql, connection))\n  {\n    // Parameter binding ensures user input is treated as data, not code\n    command.Parameters.AddWithValue(\"@userName\", userName);\n\n    connection.Open();\n    using (var reader = command.ExecuteReader()) // OK\n    {\n      return reader.Read() ? reader.GetInt32(0) : 0;\n    }\n  }\n}",
    "sample": "// ----------------------------------------------------------------------------\n// 1) Java sample\n\npublic int getUserId(String userName) throws SQLException {\n  String sql = \"SELECT user_id FROM users WHERE name = '\" + userName + \"'\";\n\n  try (Connection conn = getConnection(\"jdbc:mysql://localhost/mydb\");\n    Statement stmt = conn.createStatement();\n    ResultSet rs = stmt.executeQuery(sql)) { // Possible injection, the variable sql is tainted\n\n    return rs.next() ? rs.getInt(\"user_id\") : 0;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// 2) C# sample\n\nprivate int GetUserId(string userName)\n{\n  string sql = \"SELECT [UserID] FROM [Users] WHERE [Name] = '\" + userName + \"'\";\n\n  using (var connection = new SqlConnection(\"connectionString\"))\n  using (var command = new SqlCommand(sql, connection))\n  {\n    connection.Open();\n    using (var reader = command.ExecuteReader()) // Possible injection, the variable command is tainted\n    {\n      return reader.Read() ? reader.GetInt32(0) : 0;\n    }\n  }\n}",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure you don't send unsanitized queries to SQL databases",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062194,
            "name": "ASCSM-CWE-89 - SQL Injection Improper Input Neutralization",
            "href": "AIP/technical-criteria/1062194",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061063,
            "name": "CWE-564 - SQL Injection: Hibernate",
            "href": "AIP/technical-criteria/1061063",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1066664,
            "name": "CWE-564 - SQL Injection: Hibernate",
            "href": "AIP/technical-criteria/1066664",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061017,
            "name": "CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/technical-criteria/1061017",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1066189,
            "name": "CWE-89 - Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/technical-criteria/1066189",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062301,
            "name": "OWASP-2013-A1 - Injection",
            "href": "AIP/technical-criteria/1062301",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062321,
            "name": "OWASP-2017-A1 - Injection",
            "href": "AIP/technical-criteria/1062321",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062343,
            "name": "OWASP-2021-A03 - Injection",
            "href": "AIP/technical-criteria/1062343",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "AIP-CWE-89",
            "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/quality-standards/AIP-STRUCTURAL-FLAW/items/AIP-CWE-89",
            "standard": "AIP-STRUCTURAL-FLAW"
        },
        {
            "id": "ASCSM-CWE-89",
            "name": "SQL Injection Improper Input Neutralization",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-89",
            "standard": "CISQ"
        },
        {
            "id": "CWE-89",
            "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-89",
            "standard": "CWE"
        },
        {
            "id": "CWE-564",
            "name": "SQL Injection: Hibernate",
            "href": "AIP/quality-standards/CWE/items/CWE-564",
            "standard": "CWE"
        },
        {
            "id": "CWE-89",
            "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-89",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-564",
            "name": "SQL Injection: Hibernate",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-564",
            "standard": "ISO-5055"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-10",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "CWE-89",
            "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-89",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "CWE-564",
            "name": "SQL Injection: Hibernate",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-564",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "A1-2013",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2013",
            "standard": "OWASP"
        },
        {
            "id": "A1-2017",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2017",
            "standard": "OWASP"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "API10-2023",
            "name": "Unsafe Consumption of APIs",
            "href": "AIP/quality-standards/OWASP/items/API10-2023",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        },
        {
            "id": "STIG-V-222607",
            "name": "The application must not be vulnerable to SQL Injection.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222607",
            "standard": "STIG-V5"
        },
        {
            "id": "STIG-V-222607",
            "name": "The application must not be vulnerable to SQL Injection.",
            "href": "AIP/quality-standards/STIG-V6/items/STIG-V-222607",
            "standard": "STIG-V6"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
