{
    "id": 1039062,
    "name": "Always implement readObject() to prevent untrusted deserialization when loading from ObjectInputStream",
    "href": "AIP/quality-rules/1039062",
    "critical": true,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check the deserialization class has implemented the readObject() function with final key word or not. if not it gives the violation.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code\n- Secondary Bookmarks for violation occurrences found in the source code",
    "rationale": "It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.\n\nData that is untrusted can not be trusted to be well-formed.\n\nDeserialized data or code can often be modified if the functions readObject() of ObjectInputStream is not defined in class which  include readObject() function  of ObjectInputStream with deserialize signature.",
    "reference": "https://cwe.mitre.org/data/definitions/502.html\nhttps://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html",
    "remediation": "It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.\n\nData that is untrusted can not be trusted to be well-formed.\n\nWhen developers place no restrictions on \"gadget chains,\" or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.",
    "remediationSample": "public static class Person \n{\n   private String fname = null;\n   private String lname = null;\n\n   private final void readObject(ObjectInputStream aInputSteam) throws ClassNotFoundException, IOException\n   {\n      aInputSteam.defaultReadObject();\n   }\n}\n\n\n\ntry {\n\n   ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(\"test.txt\"));\n\n   Person personRead = (Person) objectInputStream.readObject(); // no violation because Person does implement readObject as private and final method that cannot be overwritten\n\n   objectInputStream.close();\n}",
    "sample": "public static class Person \n{\n   private String fname = null;\n   private String lname = null;\n}\n\n\n\ntry {\n\n   ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(\"test.txt\"));\n\n   Person personRead = (Person) objectInputStream.readObject(); // violation because Person does not implement readObject\n\n   objectInputStream.close();\n}",
    "total": "Number of Java Artifacts",
    "alternativeName": "Ensure the readObject() has been implemented for class instantiated by ObjectInputStream to prevent untrusted deserialization",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061059,
            "name": "CWE-502: Deserialization of Untrusted Data",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062328,
            "name": "OWASP-2017-A8 Insecure Deserialization",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": "https://cwe.mitre.org/data/definitions/502.html",
            "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": "https://cwe.mitre.org/data/definitions/502.html",
            "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": "https://cwe.mitre.org/data/definitions/502.html",
            "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
        },
        {
            "standard": "OWASP",
            "id": "A8-2017",
            "name": "Insecure Deserialization",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization",
            "description": "Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
