{
    "id": 1025004,
    "name": "Avoid second order URL redirection to untrusted site",
    "href": "AIP/quality-rules/1025004",
    "critical": true,
    "severity": 30,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.securityanalyzer",
        "href": "AIP/extensions/com.castsoftware.securityanalyzer"
    },
    "associatedValueName": "Call stack from user input source down to the target method",
    "description": "Using CAST data-flow engine, this metric detects execution paths from methods returning data coming from database down to HTTP redirection, paths which are open vulnerabilities.",
    "output": "List all methods that make resource calls forged by database content\n\nIt provides the following information:\n - Method full name\n - Call stack from database source down to the target method.",
    "rationale": "Attackers may use phishing techniques or steal credentials. URL redirection to untrusted site (second order) - The application stores data in a database. At a later time, the data is subsequently read back into the application and included in an URL redirection method without sanitization.",
    "reference": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\nhttps://cwe.mitre.org/data/definitions/601.html\n\nOpen Web Application Security Project (OWASP)\nhttps://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards",
    "remediation": "Assume all input is malicious. \nAvoid using inputs. If it is not possible, use an \"accept known good\" input validation strategy, i.e., use stringent white-lists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack.",
    "remediationSample": "...\nresultSet = preparedStatement.executeQuery();\nString url = resultSet.getString(1);\n//insert a call to a strong validation code for the input received \"url\"\ncleanedUrl = mySanitization(url);\n...\nresponse.sendRedirect(cleanedUrl);",
    "sample": "...\nresultSet = preparedStatement.executeQuery();\nString url = resultSet.getString(1);\n...\nresponse.sendRedirect(url);",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure you URL redirection always goes to trusted sites",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066701,
            "name": "CWE-601 - URL Redirection to Untrusted Site ('Open Redirect')",
            "href": "AIP/technical-criteria/1066701",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062310,
            "name": "OWASP-2013-A10 - Unvalidated Redirects and Forwards",
            "href": "AIP/technical-criteria/1062310",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062341,
            "name": "OWASP-2021-A01 - Broken Access Control",
            "href": "AIP/technical-criteria/1062341",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-601",
            "name": "URL Redirection to Untrusted Site ('Open Redirect')",
            "href": "AIP/quality-standards/CWE/items/CWE-601",
            "standard": "CWE"
        },
        {
            "id": "A01-2021",
            "name": "Broken Access Control",
            "href": "AIP/quality-standards/OWASP/items/A01-2021",
            "standard": "OWASP"
        },
        {
            "id": "A10-2013",
            "name": "Unvalidated Redirects and Forwards",
            "href": "AIP/quality-standards/OWASP/items/A10-2013",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "STIG-V-222602",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222602",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
