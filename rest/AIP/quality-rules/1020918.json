{
    "id": 1020918,
    "name": "Avoid using Node.js query-mysql third-party (TypeScript)",
    "href": "AIP/quality-rules/1020918",
    "critical": true,
    "severity": 30,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check that the query-mysql library is not used.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Node.js third-party module query-mysql is vulnerable to an SQL injection vulnerability due to lack of user input sanitization. This may allow an attacker to run arbitrary SQL queries when fetching data from database. This rule has been listed as CVE-2018-3754 in the CVE registry.",
    "reference": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-3754\nhttps://hackerone.com/reports/311244",
    "remediation": "Use other third party library such as mysql.",
    "remediationSample": "import * as mysql from 'mysql'\n\nvar sql = \"SELECT * FROM ?? WHERE ?? = ?\";\nvar inserts = ['users', 'id', userId];\nsql = mysql.format(sql, inserts);",
    "sample": "import * as query from 'query-mysql'\n\nquery.configure({\n  'host': '127.0.0.1',\n  'user': 'root',\n  'password': 'root',\n  'database': 'test'\n})\n\nquery.base.fetchById('users', 'noob', 'username', (msg, res) => {\n  console.log(msg, res)\n})",
    "total": "Number of TypeScript source code using query-mysql library",
    "alternativeName": "Ensure you don't use third-party module query-mysql versions with NodeJS",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062309,
            "name": "OWASP-2013-A9 - Using Components with Known Vulnerabilities",
            "href": "AIP/technical-criteria/1062309",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062329,
            "name": "OWASP-2017-A9 - Using Components with Known Vulnerabilities",
            "href": "AIP/technical-criteria/1062329",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "href": "AIP/technical-criteria/66064",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-676",
            "name": "Use of Potentially Dangerous Function",
            "href": "AIP/quality-standards/CWE/items/CWE-676",
            "standard": "CWE"
        },
        {
            "id": "A9-2013",
            "name": "Using Components with Known Vulnerabilities",
            "href": "AIP/quality-standards/OWASP/items/A9-2013",
            "standard": "OWASP"
        },
        {
            "id": "A9-2017",
            "name": "Using Components with Known Vulnerabilities",
            "href": "AIP/quality-standards/OWASP/items/A9-2017",
            "standard": "OWASP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
