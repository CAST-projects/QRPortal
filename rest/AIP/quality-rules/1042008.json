{
    "id": 1042008,
    "name": "Avoid using ActionForward with untrusted data source to prevent file path disclosure",
    "href": "AIP/quality-rules/1042008",
    "critical": true,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "User input using Action forward with Untrusted data/Redirect pathw could allow an attacker to download application binaries or read files within protected directories.\n\n\n\nThis rule will check if ActionForward is used with safe argument. If not it gives the violation.\n\nChecks are limited to User input path in server side application for return url",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Full Path Disclosure (FPD) vulnerabilities enable the attacker to see the path to the webroot/file. e.g.: /home/omg/htdocs/file/. \nCertain vulnerabilities, such as using the load_file() (within a SQL Injection) query to view the page source, require the attacker to have the full path to the file they wish to view.",
    "reference": "https://cwe.mitre.org/data/definitions/552.html",
    "remediation": "All ways use safe argument as mentioned below to avoid untrusted access.\n\nActionForward forward6 = new ActionForward(returnURL, \"path\", true);",
    "remediationSample": "public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException{\n    try{\n        String returnURL = request.getParameter(\"returnURL\");\n        \n        /******Struts ActionForward NOT vulnerable code ******/\n        //returnURL moved from path to name (safe argument)       \n        ActionForward forward6 = new ActionForward(returnURL, \"path\", true);",
    "sample": "public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException{\n    try{\n        String returnURL = request.getParameter(\"returnURL\");\n        \n        /******Struts ActionForward vulnerable code ******/\n        ActionForward forward = new ActionForward(returnURL); //VIOLATION \n        ActionForward forward2 = new ActionForward(returnURL, true); //VIOLATION \n        ActionForward forward3 = new ActionForward(\"name\", returnURL, true); //VIOLATION \n        ActionForward forward5 = new ActionForward();\n        forward5.setPath(returnURL); //VIOLATION",
    "total": "Number of Java Servlet Method",
    "alternativeName": "Ensure not using ActionForward with untrusted data source to prevent file path disclosure",
    "businessCriteria": [
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062304,
            "name": "OWASP-2013-A4 Insecure Direct Object References",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062325,
            "name": "OWASP-2017-A5 Broken Access Control",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-552",
            "name": "Files or Directories Accessible to External Parties",
            "url": "https://cwe.mitre.org/data/definitions/552.html",
            "description": "The product makes files or directories accessible to unauthorized actors, even though they should not be."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-AC-3",
            "name": "Access Enforcement",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/AC-3",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A4-2013",
            "name": "Insecure Direct Object References",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References",
            "description": "A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data."
        },
        {
            "standard": "OWASP",
            "id": "A5-2017",
            "name": "Broken Access Control",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control",
            "description": "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users' accounts, view sensitive files, modify other users' data, change access rights, etc."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
