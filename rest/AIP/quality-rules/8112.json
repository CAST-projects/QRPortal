{
    "id": 8112,
    "name": "Avoid improper processing of the execution status of data handling operations",
    "href": "AIP/quality-rules/8112",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule identifies Java control elements that embed data resource access actions without checking return code or handling error. \n\nThis quality rule checks methods that contain calls to SQL insert, update, select, create table enclosed in a try/catch block. Cases where SQL calls in functions that throw exceptions to be caught higher in the call graph are not addressed by this rule. \nEither empty catch blocks, catch blocks with comments only, or only write to a stream are violating the rule. Appropriate logging or other treatment of exception are said to be valid. \n\nNote: This quality rule implements the rule ASCSM-CWE-252 of the CISQ standard.",
    "output": "Associated to each Method in violation, the Quality Rule provides: \n- The number of SQL accesses without any check \n- Bookmarks for violation occurrences found in source code: \n  - SQL access",
    "rationale": "Software without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.",
    "reference": "ASCSM 1.0, Automated Source Code Security Measure, Object Management Group.",
    "remediation": "Implement a consistent and complete handling of errors and exceptions to make it possible to accurately identify and adequately respond to unusual and unexpected situations. Using a logger library is a good practice.",
    "remediationSample": "public void remediation() { \n    try \n    { \n        Statement statement = connection.createStatement(); \n        String sql1 = \"INSERT INTO STUDENTS VALUES\" + \n                      \"('BOB','DAVI', {d '2001-12-16'})\"; \n        statement.execute(sql1); \n    } \n    catch (Exception e) \n    { \n        logger.error(\"SQL error\", e); \n    } \n}",
    "sample": "// Sample 1 \npublic void method1() { \n    try \n    { \n        Statement statement = connection.createStatement(); \n        String sql1 = \"INSERT INTO STUDENTS VALUES\" + \n                      \"('BOB','DAVI', {d '2001-12-16'})\"; \n        statement.execute(sql1); \n    } \n    catch (Exception e) \n    { \n        System.err.println(\"This is an output that does not handle properly the exception\"); \n        System.err.println(e.toString()); \n    } \n} \n\n// Sample 2 \npublic void method2() { \n    try \n    { \n        Statement statement = connection.createStatement(); \n        String sql1 = \"INSERT INTO STUDENTS VALUES\" + \n                      \"('BOB','DAVI', {d '2001-12-16'})\"; \n        statement.execute(sql1); \n    } \n    catch (Exception e) \n    { \n        // comments are not a good way to handle the exception \n   } \n} \n\n// Sample 3 \npublic void method3() { \n    try \n    { \n        Statement statement = connection.createStatement(); \n        String sql1 = \"INSERT INTO STUDENTS VALUES\" + \n                      \"('BOB','DAVI', {d '2001-12-16'})\"; \n        statement.execute(sql1); \n    } \n    catch (Exception e) \n    { \n         \n    } \n}",
    "total": "Number of Methods with SQL access",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-252-data",
            "name": "Unchecked Return Parameter Value of named Callable and Method Control Element with Read, Write, and Manage Access to Data Resource",
            "url": null,
            "description": "Objective\nAvoid improper processing of the execution status of data handling operations\n\nConsequence\nSoftware without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.\n\nMeasure Element\nNumber of instances where the named callable control element or method control element executes a CRUD SQL statement with an action, yet the value of the return parameter from the action is not used by any check control element\n\n"
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.9
    ]
}
