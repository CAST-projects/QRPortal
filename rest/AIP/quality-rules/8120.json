{
    "id": 8120,
    "name": "Avoid using CALL FUNCTION without error handling",
    "href": "AIP/quality-rules/8120",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for ABAP artifacts that contain calls to function modules without error handling. \nIf the function module manages exceptions, then these should be referenced in the CALL FUNCTION and SY-SUBRC variable should be tested after.\nThe rule takes in account the following cases:\n- Use of a temporary variable\n\nCALL FUNCTION zzz.\n\nTmp = SY-SUBRC.\n\nIF Tmp NE 0.\n    list of statements\nEND-IF.\n\n- Use of WRITE statement before return code checking\n\nCALL FUNCTION zzz.\n\nWRITE: / Do some testing.\n\nIF SY-SUBRC NE 0.\n    list of statements\nEND-IF.\n",
    "output": "Associated to each ABAP artifact in violation, the Quality Rule provides: \n- The number of calls to function modules without error handling\n- Bookmarks for violation occurrences found in source code: \n  - CALL FUNCTION without error handling",
    "rationale": "Function modules can generate exceptions to manage abnormal situations. It is strongly recommended to reference these exceptions when calling function modules and to test the SY-SUBRC system symbol to address these situations. If the caller does not handle an exception triggered by a function module, then the current program terminates.",
    "reference": "SAP",
    "remediation": "Add references to exceptions in CALL FUNCTION statements if the called function module implements some. \nInsert a test of the SY-SUBRC system symbol after each CALL FUNCTION statement that references exceptions.",
    "remediationSample": "FORM MY-FORM.\n* Function module FOO manages exceptions\n  call function 'FOO'\n    exporting\n      string = 'abc'.\n\n* Exceptions not managed after the call.\n  call function 'FOO'\n    exporting string = 'abc'\n    exceptions\n      string_too_small = 1\n      string_too_long = 2\n      others = 3.\nENDFORM.",
    "sample": "FORM MY-FORM.\n* Function module FOO manages exceptions\n  call function 'FOO'\n    exporting\n      string = 'abc'.\n\n* Exceptions not managed after the call.\n  call function 'FOO'\n    exporting string = 'abc'\n    exceptions\n      string_too_small = 1\n      string_too_long = 2\n      others = 3.\nENDFORM.",
    "total": "Number of ABAP Artifacts",
    "alternativeName": "Avoid using CALL FUNCTION without error handling",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061041,
            "name": "CWE-391: Unchecked Error Condition",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": "Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
