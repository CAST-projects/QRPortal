{
    "id": 1003086,
    "name": "Avoid empty catch statement (Flex)",
    "href": "AIP/quality-rules/1003086",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "no-value",
    "description": "This QR reports artifacts that have empty catch statement.",
    "output": "This QR reports artifacts that have empty catch statement. It provides following information:\n\n- Artifact full name",
    "rationale": "Catch blocks should have code to handle the thrown exception. If they are empty or have only comments, the Exception will not be handled.",
    "remediation": "Handle exception caught in catch block.",
    "sample": "public class Foo \n{\n   public function bar( x : int ) : void\n   {\n      try\n      {\n      }\n      catch( e : Exception )         // VIOLATION\n      {\n      }\n   }\n}",
    "total": "Number of artifacts",
    "alternativeName": "Avoid empty catch statement (Flex)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1007000,
            "name": "Flex",
            "href": "AIP/technologies/1007000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-1",
            "name": "Empty Exception Block",
            "url": null,
            "description": "Objective\nAvoid improper responses to unusual and unexpected situations\n\nConsequence\nSoftware without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.\n\nMeasure Element\nNumber of instances where an exception handling block (such as Catch and Finally blocks) of the named callable and method control elements does not contain any other control element\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-390",
            "name": "Detection of Error Condition Without Action",
            "url": "https://cwe.mitre.org/data/definitions/390.html",
            "description": "The software detects a specific error, but takes no actions to handle the error."
        },
        {
            "standard": "CWE",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": "Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application."
        }
    ],
    "parameters": [
        {
            "name": "FlexMetricName",
            "description": "FlexMetricName",
            "technologies": [
                {
                    "id": 1007000,
                    "name": "Flex",
                    "href": "AIP/technologies/1007000",
                    "values": [
                        "adobe.ac.pmd.rules.empty.EmptyCatchStatement"
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        70.0,
        90.0,
        98.0,
        100.0
    ]
}
