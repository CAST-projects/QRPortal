{
    "id": 8114,
    "name": "Avoid numerical data corruption during incompatible mutation (ABAP)",
    "href": "AIP/quality-rules/8114",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule identifies ABAP control elements that contain numeric data which are updated with a value which has an incompatible type. \n\nThis quality rule checks if exceptions are correctly used. \n\nNote: This quality rule implements the rule ASCSM-CWE-681 of the CISQ standard.",
    "output": "Associated to each ABAP artifact in violation, the Quality Rule provides: \n- The number of risky type cast operations \n- Bookmarks for violation occurrences found in source code: \n  - Type cast operation",
    "rationale": "Software featuring weak numerical conversion practices incurs the risk of using the wrong number and generating incorrect results, possibly introducing new vulnerability when related to resource allocation and security decision.",
    "reference": "ASCSM 1.0, Automated Source Code Security Measure, Object Management Group.",
    "sample": "Waiting for examples",
    "total": "Number of ABAP Artifacts",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-681",
            "name": "Numeric Types Incorrect Conversion",
            "url": null,
            "description": "Objective\nAvoid numerical data corruption during incompatible mutation\n\nConsequence\nSoftware featuring weak numerical conversion practices incurs the risk of using the wrong number and generating incorrect results, possibly introducing new vulnerability when related to resource allocation and security decision\n\nMeasure Element\nNumber of instances where a storable element or member element is declared with a numerical data type in the \u2018Create\u2019 action, and then is updated with a value which is cast via a type cast action into a second numerical data type, which is incompatible with the first data type\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-681",
            "name": "Incorrect Conversion between Numeric Types",
            "url": "https://cwe.mitre.org/data/definitions/681.html",
            "description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
