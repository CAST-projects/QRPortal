{
    "id": 1039010,
    "name": "Avoid using risky cryptographic hash (JEE)",
    "href": "AIP/quality-rules/1039010",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "MD5/SHA1 hashes were used as salt to hash a password or a passphrase. In cryptography, a salt is random data that's used as additional input to a one-way function. \nRecently, several exploits were developed which proved that MD2, MD4, Bouncy Castle & JCE with SHA1 or MD5 will generate identical outputs for the different input parameters. \nAs a consequence, somebody can break your encryption or log on to your website. \nHashing algorithm is either passed through parameter or by properties file.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. \n        Well-known techniques may exist to break the algorithm.",
    "reference": "https://cwe.mitre.org/data/definitions/327.html \nhttps://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure \nhttps://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
    "remediation": "Avoid using MD5 or SHA1 hashes as input to cryptographic functions or to store passwords. The following hashing algorithms: SHA256, SHA384, and SHA512 are recommanded instead. \nMake sure you choose the most appropriate one, depending on your use case, security requirements and runtime constraints. \n\nSHA-256 is a 256-bit hash function intended to provide 128 bits of security against collision attacks, \nwhile SHA-512 is a 512-bit hash function intended to provide 256 bits of security. A 384-bit hash may be obtained by truncating the SHA-512 output",
    "remediationSample": "Remediation for Sample 1 \nprivate static String getSalt() throws NoSuchAlgorithmException \n{ \nSecureRandom sr = SecureRandom.getInstance(\u201cSHA-256\u201d);\nbyte[] salt = new byte[16]; \nsr.nextBytes(salt); \nreturn salt.toString(); \n} \n____________________________________________________________ \nRemediation for Sample 2 \nSolution (Using bouncy castle): \n\npublic static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException \n { \n    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest()); \n    gen.init(password.getBytes(\"UTF-8\"), salt.getBytes(), 4096); \n    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey(); \n} \n\nSolution (Java 8 and later): \npublic static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException \n{ \n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8); \n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\"); \n    return f.generateSecret(spec).getEncoded(); \n}",
    "sample": "Sample 1 : \nprivate static String getSalt() throws NoSuchAlgorithmException \n{ \nSecureRandom sr = SecureRandom.getInstance(\u201cSHA1PRNG\u201d); \nbyte[] salt = new byte[16]; \nsr.nextBytes(salt); \nreturn salt.toString(); \n} \n___________________________________________________________ \nSample 2 \nMessageDigest md5Digest = MessageDigest.getInstance(\"MD5\"); \n    md5Digest.update(password.getBytes()); \n    byte[] hashValue = md5Digest.digest(); \n\nbyte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());\n____________________________________________________________\nSample 3 \njava.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\nbyte[] input = { (byte)'?' };\nObject inputParam = param;\n\nif (inputParam instanceof String) input = ((String) inputParam).getBytes();\n    if (inputParam instanceof java.io.InputStream) {\n        byte[] strInput = new byte[1000];\n        int i = ((java.io.InputStream) inputParam).read(strInput);\n        if (i == -1) {\n                response.getWriter().println(\n\"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\"\n);\n            return;\n            }\n            input = java.util.Arrays.copyOf(strInput, i);\n            }           \n            md.update(input);",
    "total": "Number of Java artifacts",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-327",
            "name": "Broken or Risky Cryptographic Algorithm Usage",
            "url": null,
            "description": "Objective\nAvoid failure to use vetted cryptographic libraries\n\nConsequence\nSoftware using broken or risky cryptographic algorithm incurs the risk of sensitive data being compromised\n\nMeasure Element\nNumber of instances where the application uses the cryptographic deployed component which is not part of the list of vetted cryptographic deployed components.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-327",
            "name": "Use of a Broken or Risky Cryptographic Algorithm",
            "url": "https://cwe.mitre.org/data/definitions/327.html",
            "description": "The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information."
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69259",
            "name": "The application must implement cryptographic mechanisms to protect the integrity of remote access sessions.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70189",
            "name": "The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, a...",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70193",
            "name": "The application must utilize FIPS-validated cryptographic modules when generating cryptographic hashes.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70195",
            "name": "The application must utilize FIPS-validated cryptographic modules when protecting unclassified information that requires cryptographic protection.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70217",
            "name": "The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key e...",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70225",
            "name": "The application must protect the confidentiality and integrity of stored information when required by DoD policy or the information owner.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70227",
            "name": "The application must implement approved cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system ...",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70229",
            "name": "The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70247",
            "name": "The application must implement cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission unless otherwise protected...",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
