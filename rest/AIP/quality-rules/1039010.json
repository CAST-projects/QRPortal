{
    "id": 1039010,
    "name": "Avoid using risky cryptographic hash (JEE)",
    "href": "AIP/quality-rules/1039010",
    "critical": true,
    "severity": 30,
    "maxWeight": 7,
    "extension": {
        "name": "com.castsoftware.jeerules",
        "href": "AIP/extensions/com.castsoftware.jeerules"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check the use of deprecated cryptographic hashes like MD2, MD4, MD5, SHA1 along with a cryptographic JEE API.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.\n\nMD5/SHA1 hashes were used as salt to hash a password or a passphrase. In cryptography, a salt is random data that's used as additional input to a one-way function. \nRecently, several exploits were developed which proved that MD2, MD4, Bouncy Castle & JCE with SHA1 or MD5 will generate identical outputs for the different input parameters. \n\nThe following hashing algorithms: SHA256, SHA384, and SHA512 are recommended instead. \n\nSHA-256 is a 256-bit hash function intended to provide 128 bits of security against collision attacks, \nwhile SHA-512 is a 512-bit hash function intended to provide 256 bits of security. A 384-bit hash may be obtained by truncating the SHA-512 output",
    "reference": "https://cwe.mitre.org/data/definitions/327.html \nhttps://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure \nhttps://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
    "remediation": "Use hashing algorithms based on SHA256, SHA384, and SHA512.",
    "remediationSample": "# Remediation for Sample 1 \n\nprivate static String getSalt() throws NoSuchAlgorithmException \n{ \nSecureRandom sr = SecureRandom.getInstance(\u201cSHA-256\u201d);\nbyte[] salt = new byte[16]; \nsr.nextBytes(salt); \nreturn salt.toString(); \n} \n\n# Remediation for Sample 2 \nSolution (Using bouncy castle): \n\npublic static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException \n { \n    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest()); \n    gen.init(password.getBytes(\"UTF-8\"), salt.getBytes(), 4096); \n    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey(); \n} \n\n\n# Solution (Java 8 and later): \npublic static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException \n{ \n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8); \n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\"); \n    return f.generateSecret(spec).getEncoded(); \n}",
    "sample": "# Sample 1\n\nprivate static String getSalt() throws NoSuchAlgorithmException \n{ \nSecureRandom sr = SecureRandom.getInstance(\u201cSHA1PRNG\u201d); \nbyte[] salt = new byte[16]; \nsr.nextBytes(salt); \nreturn salt.toString(); \n} \n\n# Sample 2 \nMessageDigest md5Digest = MessageDigest.getInstance(\"MD5\"); \n    md5Digest.update(password.getBytes()); \n    byte[] hashValue = md5Digest.digest(); \n\nbyte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());\n\n# Sample 3\njava.security.MessageDigest md = java.security.MessageDigest.getInstance(\"MD5\");\nbyte[] input = { (byte)'?' };\nObject inputParam = param;\n\nif (inputParam instanceof String) input = ((String) inputParam).getBytes();\n    if (inputParam instanceof java.io.InputStream) {\n        byte[] strInput = new byte[1000];\n        int i = ((java.io.InputStream) inputParam).read(strInput);\n        if (i == -1) {\n                response.getWriter().println(\n\"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\"\n);\n            return;\n            }\n            input = java.util.Arrays.copyOf(strInput, i);\n            }           \n            md.update(input);",
    "total": "Number of Java artifacts",
    "alternativeName": "Ensure not using deprecated cryptographic hash otherwise it could be broken by hackers (JEE)",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 1062340,
            "name": "OWASP-2021-Index",
            "href": "AIP/business-criteria/1062340"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062179,
            "name": "ASCSM-CWE-327 - Broken or Risky Cryptographic Algorithm Usage",
            "href": "AIP/technical-criteria/1062179",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062306,
            "name": "OWASP-2013-A6 - Sensitive Data Exposure",
            "href": "AIP/technical-criteria/1062306",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062323,
            "name": "OWASP-2017-A3 - Sensitive Data Exposure",
            "href": "AIP/technical-criteria/1062323",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062342,
            "name": "OWASP-2021-A02 - Cryptographic Failures",
            "href": "AIP/technical-criteria/1062342",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "href": "AIP/technical-criteria/66064",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCSM-CWE-327",
            "name": "Broken or Risky Cryptographic Algorithm Usage",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-327",
            "standard": "CISQ"
        },
        {
            "id": "CWE-327",
            "name": "Use of a Broken or Risky Cryptographic Algorithm",
            "href": "AIP/quality-standards/CWE/items/CWE-327",
            "standard": "CWE"
        },
        {
            "id": "CWE-328",
            "name": "Reversible One-Way Hash",
            "href": "AIP/quality-standards/CWE/items/CWE-328",
            "standard": "CWE"
        },
        {
            "id": "NIST-SC-12",
            "name": "Cryptographic Key Establishment and Management",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SC-12",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A3-2017",
            "standard": "OWASP"
        },
        {
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A6-2013",
            "standard": "OWASP"
        },
        {
            "id": "A02-2021",
            "name": "Cryptographic Failures",
            "href": "AIP/quality-standards/OWASP/items/A02-2021",
            "standard": "OWASP"
        },
        {
            "id": "M5-2016",
            "name": "Insufficient Cryptography",
            "href": "AIP/quality-standards/OWASP/items/M5-2016",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-4.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-4.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "STIG-V-222397",
            "name": "The application must implement cryptographic mechanisms to protect the integrity of remote access sessions.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222397",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
