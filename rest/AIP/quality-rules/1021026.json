{
    "id": 1021026,
    "name": "Avoid leaving open file resources",
    "href": "AIP/quality-rules/1021026",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "Reports all Python artifacts that don't guarantee unequivocal file closing. This requires correct handling of potential exceptions arising from file manipulation.\nThe preferred way (from Python 2.5) is opening files using the with statement. Otherwise file manipulation has to be performed inside try-except blocks and file closing has to be assured in the finally block. This rule is compliant with OMG CISQ ASCPEM-PRF-15, ASCRM-CWE-772 recommendations.",
    "output": "Line and column for each violation\nAssociated value => number of violations found",
    "rationale": "When a file is opened by Python, resources are allocated until the file is closed. Thus it is important to ensure the file is closed as soon as the file manipulation is done by handling correctly potential exceptions. Delegating file closing to the underlying interpreter/compiler can have a negative impact on code portability and can result in unexpected behavior.",
    "remediation": "Use the with statement to open a file, otherwise explicitly close opened files while correctly handling exceptions arising from file manipulation.",
    "remediationSample": ">>> f = open(\"hello.txt\", 'w')\n>>> try:\n>>>     f.write(\"world\")\n>>> finally:\n>>>     f.close()\n\n# or even better\n>>> with open(\"hello.txt\", 'w') as f:\n>>>     f.write(\"world\")\n        ",
    "sample": ">>> f = open(\"hello.txt\",'w')\n>>> f.write(\"world\")\n>>> f.close()\n",
    "total": "Python artifacts opening file resources",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61019,
            "name": "Efficiency - SQL and Data Handling Performance",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-15",
            "name": "Unreleased data",
            "url": null,
            "description": "Remove instances where a method references an object, without ever de-referencing it"
        },
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-772",
            "name": "Unreleased resource",
            "url": null,
            "description": "Remove instances where a platform resource (messaging, lock, file, stream, directory, etc.) is allocated and assigned a unique resource handler that is used throughout the application, but is never released"
        }
    ]
}
