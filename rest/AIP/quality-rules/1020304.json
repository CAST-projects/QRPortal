{
    "id": 1020304,
    "name": "Implement success and error or complete callbacks when using jquery web service call before jQuery 3.0",
    "href": "AIP/quality-rules/1020304",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check that you have not implemented success/error callbacks when using $.ajax, $.get, $.getJSON and check that you have used versions of jQuery older than 3.0",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Ensure that each web service callback is going to be properly checked in order to make sure you will not miss any problem that occurred in your application and you will give the information to the user.\n\nBefore jQuery 3.0, when using $.ajax, $.get, $.getJSON interface to do web service calls, always ensure you have implemented the success and error or complete callbacks.",
    "remediation": "$.ajax({ ... }).then(successHandler, failureHandler); \n// OR \nvar jqxhr = $.ajax({ ... }); \njqxhr.done(successHandler); \njqxhr.fail(failureHandler);",
    "remediationSample": "<script src=\"https://code.jquery.com/jquery-1.9.1.js\"></script>\n\nvar request = $.ajax(\"https://myrul.com\");\n\nrequest.success( function() {\n   // do something\n  });\nrequest.error( function() {\n   // do something with data\n  });",
    "sample": "<script src=\"https://code.jquery.com/jquery-1.9.1.js\"></script>\n\nvar request = $.ajax(\"https://myrul.com\");",
    "total": "Number of JQuery resource service artifacts (JQuery GET resource service, JQuery PUT resource service, JQuery POST resource service)",
    "alternativeName": "Ensure you have implemented success/error callbacks when using jQuery API calls",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-252-resource",
            "name": "Unchecked Return Parameter Value of named Callable and Method Control Element with Read, Write, and Manage Access to Platform Resource",
            "url": null,
            "description": "Objective\nAvoid improper processing of the execution status of resource handling operations\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances where the named callable control element or method control element executes a \u2018Read\u2019, \u2018Write\u2019, or \u2018Manage Access\u2019 action, yet the value of the return parameter from the action is not used by any check control element\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-1",
            "name": "Empty Exception Block",
            "url": null,
            "description": "Objective\nAvoid improper responses to unusual and unexpected situations\n\nConsequence\nSoftware without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.\n\nMeasure Element\nNumber of instances where an exception handling block (such as Catch and Finally blocks) of the named callable and method control elements does not contain any other control element\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-252-resource",
            "name": "Unchecked Return Parameter Value of named Callable and Method Control Element with Read, Write, and Manage Access to Platform Resource",
            "url": null,
            "description": "Objective\nAvoid improper processing of the execution status of resource handling operations\n\nConsequence\nSoftware unaware of execution status control incurs the risk of bad data being used in operations, possibly leading to a crash or other unintended behaviors\n\nMeasure Element\nNumber of instances where the named callable control element or method control element executes a \u2018Read\u2019, \u2018Write\u2019, or \u2018Manage Access\u2019 action, yet the value of the return parameter from the action is not used by any check control element\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-392",
            "name": "Missing Report of Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/392.html",
            "description": "The software encounters an error but does not provide a status code or return value to indicate that an error has occurred."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": "Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
