{
    "id": 8052,
    "name": "Avoid setting a pointer to the address of a local variable defined in a lower scope",
    "href": "AIP/quality-rules/8052",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for functions that set pointers to lower scope variables.",
    "output": "Associated to each C/C++ function with violations, the Quality Rule provides:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code:\n  - pointer assignment\n  - pointer declaration\n  - local variable declaration",
    "rationale": "When a variable goes out of scope, all pointers or references to this variable become invalid. Any access to this data results in undefined behavior. The best way to make sure this situation does not occur is to have the pointer itself go out of scope at the same time as the pointed-to variable.",
    "remediation": "Try to declare the local variable and the pointer in the same scope to avoid protection failures.",
    "sample": "int *p;\n\nvoid f()\n{\n int i = 0;\n p = &i; // Violation\n}",
    "total": "Number of C/C++ functions, constructors, destructors, and methods",
    "alternativeName": "Avoid setting a pointer to the address of a local variable defined in a lower scope",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-562",
            "name": "Return of Stack Variable Address",
            "href": "AIP/quality-standards/CWE/items/CWE-562",
            "standard": "CWE"
        },
        {
            "id": "CWE-562",
            "name": "Return of Stack Variable Address",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-562",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-562",
            "name": "Return of Stack Variable Address",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-562",
            "standard": "OMG-ASCQM"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
