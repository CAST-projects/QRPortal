{
    "id": 2666740,
    "name": "Unicredit - Avoid Use of Socket, ClassLoader or Thread Classes (CWE-246, CWE-578, CWE-362)",
    "href": "AIP/quality-rules/2666740",
    "critical": true,
    "description": "This metric detects the usage of defined classes that should not be used in some context. It checks the usage of the following classes : TBC\u0085",
    "output": "This report lists all Java methods that refer to Socket, ClassLoader or Thread Classes\nIt provides the following information:\n - Method full name\n - The associated value is the number of violation inside the violating method.",
    "rationale": "Sockets:\nThe J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues.\nClassLoader:\nThe Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the EJB guideline: \"The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams.\" \nThread:\nOne of the reasons why an application server has been created is thread management that is complex to develop. It manages multiple threads for different types of components, and in order to effectively maximize security, performance and resource utilization, it requires control of the threads being run on a given machine.\nMore often than not, threads are created when there is no time to implement a better solution. However, the consequences can be serious in terms of security, performance and robustness.",
    "reference": "CWE-246: J2EE Bad Practices: Direct Use of Sockets\nhttps://cwe.mitre.org/data/definitions/246.html\n\nCWE-578: EJB Bad Practices: Use of Class Loader\nhttps://cwe.mitre.org/data/definitions/578.html\n\nCWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\nhttps://cwe.mitre.org/data/definitions/362.html\nCWE-609: Double-Checked Locking\nhttps://cwe.mitre.org/data/definitions/609.html\nCWE-667: Improper Locking\nhttps://cwe.mitre.org/data/definitions/667.html",
    "remediation": "See MITRE Documentation",
    "remediationSample": "See MITRE Documentation",
    "total": "The number of identified objects that use Socket, ClassLoader or Thread Classes\nNumber of Java methods (to keep it simple)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
