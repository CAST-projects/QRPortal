{
    "id": 4596,
    "name": "Avoid using 'java.lang.System.getenv()'",
    "href": "AIP/quality-rules/4596",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "description": "The rule reports all Java artifacts using 'java.lang.System.getenv()'",
    "output": "This report lists all java artifacts using 'java.lang.System.getenv()'.\nIt provides the following information:\n - Artifact full name",
    "rationale": "For portability reasons, in Web applications, 'java.lang.System.getenv()' should not be used since it means using Operating System variables and therefore being dependent on the environment where the application is deployed.",
    "reference": "https://www.tutorialspoint.com/java/lang/system_getenv_string.htm\n\nhttps://wiki.sei.cmu.edu/confluence/display/java/ENV02-J.+Do+not+trust+the+values+of+environment+variables",
    "remediation": "Prefer using property files.",
    "sample": "package com.logicbig.example.system;\n\nimport java.util.Map;\n\npublic class GetenvExample {\n\n    public static void main(String... args) {\n        Map<String, String> map = System.getenv();\n        map.entrySet().forEach(System.out::println);\n    }\n}\n\n-----------------------------------------------------------\n\npublic class SystemSample {\n\n   public static void main(String[] args) throws Exception {\n\n      // gets the value of the specified environment variable \"PATH\"\n      System.out.println(\"System.getenv(\"PATH\") = \");\n      System.out.println(System.getenv(\"PATH\"));\n\n      // gets the value of the specified environment variable \"TEMP\"\n      System.out.print(\"System.getenv(\"TEMP\") = \");\n      System.out.println(System.getenv(\"TEMP\"));\n\n      // gets the value of the specified environment variable \"USERNAME\"\n      System.out.print(\"System.getenv(\"USERNAME\") = \");\n      System.out.println(System.getenv(\"USERNAME\"));\n   }\n}",
    "total": "Number of Java artifacts",
    "alternativeName": "Prefer using environment file instead of using java.lang.System.getenv()",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61004,
            "name": "Architecture - OS and Platform Independence",
            "href": "AIP/technical-criteria/61004",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
