{
    "id": 7880,
    "name": "Avoid nested loops",
    "href": "AIP/quality-rules/7880",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation patterns",
    "description": "This rule checks all Abap artifacts containing nested loops. These are:\n- LOOP ... ENDLOOP\n- DO ... ENDDO\n- WHILE ... ENDWHILE\n- PROVIDE ... ENDPROVIDE",
    "output": "Associated to each ABAP Artifact with violations, the Quality Rule provides:\n- The number of violation patterns",
    "rationale": "If the amount of data is large, nested loops are fully avoided due to performance issues. If the program is extracting small amount of data, then focus on SELECT statements than nested loops.\nThe indexed loop and READ statement using binary search are the best methods to avoid performance issues.",
    "remediation": "Evaluate the amount of data processed in the loop and, if necessary, replace nested loop by indexed loop or READ statement with binary search.",
    "total": "Number of ABAP Artifacts",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        }
    ],
    "qualityStandards": [
        
    ]
}
