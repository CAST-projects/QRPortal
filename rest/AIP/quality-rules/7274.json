{
    "id": 7274,
    "name": "Avoid GOTO jumps out of PERFORM range",
    "href": "AIP/quality-rules/7274",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for Cobol Programs containing sections or paragraphs that are called by PERFORM statements and that contain a GO TO statement to another section or paragraph that is not in the scope of the initial PERFORM.\n\nThe following situations are considered:\n- The calling section (the GO TO is not in a paragraph but directly in the section) does not contain the called paragraph\n- If the GO TO is in a paragraph belonging to a section called by PERFORM, then the called paragraph does not belong to this section\n- If the calling paragraph belongs to a PERFORM THRU range, then the called paragraph does not belong to this range",
    "output": "Associated to each COBOL Program with violations, the Quality Rule provides:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in source code:\n    - Calling PERFORM statement\n    - GO TO statement referencing a paragraph that is not in the scope of the initial PERFORM statement",
    "rationale": "When GOTO are used to jump out of a PERFORM range, program control flow is altered (an executable GO TO pointing on the statement located just after the calling PERFORM is inserted at runtime at the end of the called paragraph only if this code location is empty) and does not return to the calling statement. Moreover, program logic becomes difficult to understand and evolution can be risky.",
    "reference": "IBM Enterprise Cobol for z/OS - Programming Guide",
    "remediation": "Only use GOTO jumps in a section scope. GOTO jumps out of PERFORM range can be used to exit the program. It is better to use conditional expression to manage control flow.",
    "remediationSample": "PROCEDURE DIVISION\n       0000-MAIN.\n           MOVE 0 TO END-THE-PROG.\n           PERFORM 1000-PROC.\n           IF END-THE-PROG = 0\n               PERFORM 2000-PROC THRU 2100-PROC\n           END-IF\n           IF END-THE-PROG = 0\n               PERFORM 3000-PROC THRU 3100-PROC\n           END-IF\n       0100-MAIN.\n           GOBACK.\n      *\n       1000-PROC.\n           MOVE A TO B.\n           PERFORM 4000-PROC.\n      *\n      ...\n      *\n       3000-PROC.\n           ADD 1 TO B.\n           IF B = 5\n               PERFORM 4000-PROC\n               IF END-THE-PROG = 1\n      *** This GO TO does not jump out of the PERFORM range\n                   GO TO 3100-PROC\n               END-IF\n           END-IF\n           MOVE B TO C.\n       3100-PROC.\n           EXIT.\n      *\n       4000-PROC.\n           ADD 1 TO A.\n           ...\n           MOVE 1 TO END-THE-PROG.\n      *    GO TO 0100-MAIN.",
    "sample": "PROCEDURE DIVISION\n       0000-MAIN.\n           PERFORM 1000-PROC.\n           PERFORM 2000-PROC THRU 2100-PROC.\n           PERFORM 3000-PROC THRU 3100-PROC.\n       0100-MAIN.\n           GOBACK.\n      *\n       1000-PROC.\n           MOVE A TO B.\n      *** This GO TO jumps out the PERFORM range\n           GO TO 4000-PROC.\n      *\n       2000-PROC.\n           ADD 1 TO B.\n           IF B = 5\n      *** This GO TO does not jump out of the PERFORM range\n               GO TO 2100-PROC\n           END-IF\n       2100-PROC.\n           EXIT.\n      *\n       3000-PROC.\n           ADD 1 TO B.\n           IF B = 5\n      *** This GO TO jumps out of the PERFORM range\n               GO TO 4000-PROC\n           END-IF\n       3100-PROC.\n           MOVE B TO C.\n      *\n       4000-PROC.\n           ADD 1 TO A.\n           ...\n           GO TO 0100-MAIN.",
    "total": "Number of Cobol Programs",
    "alternativeName": "Avoid GOTO jumps out of PERFORM range",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062101,
            "name": "CISQ-Maintainability",
            "href": "AIP/business-criteria/1062101"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061001,
            "name": "ISO-5055-Maintainability",
            "href": "AIP/business-criteria/1061001"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062110,
            "name": "ASCMM-MNT-1 - Control Flow Transfer Control Element outside Switch Block",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061129,
            "name": "CWE-1075: Unconditional Control Flow Transfer outside of Switch Block",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61009,
            "name": "Complexity - Algorithmic and Control Structure Complexity",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -4,
            "name": "Cobol",
            "href": "AIP/technologies/-4"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-1",
            "name": "Control Flow Transfer Control Element outside Switch Block",
            "url": null,
            "description": "Objective\nAvoid the unconditional transfer of control flow outside of switch structures\n\nConsequence\nSoftware that does not follow the principles of structured programming degrades comprehensibility\n\nMeasure Element\nNumber of instances where an unconditional transfer of control is located outside the branching based on the value of a storable element\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-1075",
            "name": "Unconditional Control Flow Transfer outside of Switch Block",
            "url": "https://cwe.mitre.org/data/definitions/1075.html",
            "description": "The software performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-1075",
            "name": "Unconditional Control Flow Transfer outside of Switch Block",
            "url": "https://cwe.mitre.org/data/definitions/1075.html",
            "description": "The software performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1075",
            "name": "Unconditional Control Flow Transfer outside of Switch Block",
            "url": "https://cwe.mitre.org/data/definitions/1075.html",
            "description": "The software performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
