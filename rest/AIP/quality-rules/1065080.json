{
    "id": 1065080,
    "name": "Avoid using C-style and functional notation casts (C++)",
    "href": "AIP/quality-rules/1065080",
    "critical": false,
    "maxWeight": 5,
    "description": "This rule will raise a violation when C-style casts or functional casts are used\n\nException:\nA C-style cast to void may be used to signify that the return value for a non-void function call is being ignored",
    "output": "Information will be provided on:\n1. Methods where a violation has occurred\n2. Bookmarks for violation occurrences found in the source code",
    "rationale": "C-style (cast notation), and functional notation casts that do not invoke a converting constructor are capable of performing casts between unrelated types.\nAlso, C++ style casts clearly communicate the intent and hence improve readability.",
    "reference": "Standards References:\nMISRA C++ 2008, 5-2-4: C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used.",
    "remediation": "Use C++ style casts:\nstatic_cast<type>(expression)\nconst_cast<type>(expression)\ndynamic_cast<type>(expression)\nreinterpret_cast<type>(expression)",
    "remediationSample": "(void)g ( ); // Compliant by exception\n\nA * a3 = const_cast<A*>( &a1); // compliant",
    "sample": "class A\n{\npublic:\nexplicit A( int32_t );\n};\nint32_t g ( )\n{\nreturn 7;\n}\nvoid f ( )\n{\nA * a2 = ( A* )( &a1 ); // Non-compliant\n\n}",
    "total": "Number of Methods or Functions",
    "alternativeName": "Ensure to use C++ style notation casts to avoid unexpected type conversions",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062152,
            "name": "ASCRM-CWE-704 - Incorrect Type Conversion or Cast",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062187,
            "name": "ASCSM-CWE-681 - Numeric Types Incorrect Conversion",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061078,
            "name": "CWE-681: Incorrect Conversion between Numeric Types",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061081,
            "name": "CWE-704: Incorrect Type Conversion or Cast",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61010,
            "name": "Complexity - OO Inheritance and Polymorphism",
            "weight": 4,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "C-CPP",
            "id": "MISRA-CPP-2008-Expressions",
            "name": "Expressions",
            "url": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-704",
            "name": "Incorrect Type Conversion or Cast",
            "url": null,
            "description": "Objective\nAvoid data corruption during incompatible mutation\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances where a storable element or member element is declared with a data type in the \u2018Create\u2019 action, and then is updated with a value which is cast via a type cast action into a second data type, which is incompatible with the first data type\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-681",
            "name": "Numeric Types Incorrect Conversion",
            "url": null,
            "description": "Objective\nAvoid numerical data corruption during incompatible mutation\n\nConsequence\nSoftware featuring weak numerical conversion practices incurs the risk of using the wrong number and generating incorrect results, possibly introducing new vulnerability when related to resource allocation and security decision\n\nMeasure Element\nNumber of instances where a storable element or member element is declared with a numerical data type in the \u2018Create\u2019 action, and then is updated with a value which is cast via a type cast action into a second numerical data type, which is incompatible with the first data type\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-681",
            "name": "Incorrect Conversion between Numeric Types",
            "url": "https://cwe.mitre.org/data/definitions/681.html",
            "description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur."
        },
        {
            "standard": "CWE",
            "id": "CWE-704",
            "name": "Incorrect Type Conversion or Cast",
            "url": "https://cwe.mitre.org/data/definitions/704.html",
            "description": "The software does not correctly convert an object, resource, or structure from one type to a different type."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-681",
            "name": "Incorrect Conversion between Numeric Types",
            "url": "https://cwe.mitre.org/data/definitions/681.html",
            "description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-704",
            "name": "Incorrect Type Conversion or Cast",
            "url": "https://cwe.mitre.org/data/definitions/704.html",
            "description": "The software does not correctly convert an object, resource, or structure from one type to a different type."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-681",
            "name": "Incorrect Conversion between Numeric Types",
            "url": "https://cwe.mitre.org/data/definitions/681.html",
            "description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-704",
            "name": "Incorrect Type Conversion or Cast",
            "url": "https://cwe.mitre.org/data/definitions/704.html",
            "description": "The software does not correctly convert an object, resource, or structure from one type to a different type."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
