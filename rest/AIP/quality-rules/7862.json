{
    "id": 7862,
    "name": "Avoid catching an exception of type Exception, RuntimeException, or Throwable",
    "href": "AIP/quality-rules/7862",
    "critical": false,
    "maxWeight": 8,
    "description": "The exception Exception should never be caught in a catch statement. Always Subclass Exception and use the Subclassed Classes.",
    "output": "This rule lists all Methods catching an exception of type Exception.\nIt provides the following information:\n- Method full name",
    "rationale": "Catching the Exception class directly means that the try/catch will process all the exceptions in the same way: RuntimeException will be processed in the same way as application specific exceptions such BankingException or CredentialException. This will prevent the application from carrying out the specific recovery process that is needed and as a consequence will threaten both application robustness and security. For example, each exception related to resource allocation whose catch does not explicitly release the resource might create a resource leak. When such a leak occurs on a limited set of available resources, such as the database connection, the application can then become unusable because resources cannot be allocated any more. The application also becomes difficult to support and run in production as root-cause analysis is made more difficult. The support teams might not even be aware that something went wrong (by catching Exceptions, RuntimeException might not be visible any more).",
    "reference": "SEI CERT Oracle Coding Standard for Java\nhttps://wiki.sei.cmu.edu/confluence/display/java/ERR07-J.+Do+not+throw+RuntimeException%2C+Exception%2C+or+Throwable\n\nJava Exception Handling Best Practices\nhttps://howtodoinjava.com/best-practices/java-exception-handling-best-practices/\n\nCatching and Throwing Standard Exception Types\nhttp://msdn2.microsoft.com/en-us/library/ms229007(VS.80).aspx\n\nWarren, Nigel, and Bishop, Philip. Java in Practice. Addison-Wesley, 1999, p. 68.\n\nCISQ rule: ASCRM-CWE-396.",
    "remediation": "Always Subclass Exception and use the Subclassed Classes with appropriate and specific recovery code.",
    "remediationSample": "\" Hide\ntry\n{ ,,, }\ncatch (SpecificException /*e*/)\n{ ,,, }",
    "sample": "try\n{ ,,, }\ncatch (Exception /*e*/) // <= VIOLATION\n{ ,,, }",
    "total": "Number of methods",
    "alternativeName": "Ensure you catch subclass of Exception, RuntimeException or Throwable",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062148,
            "name": "ASCRM-CWE-396 - Declaration of Catch for Generic Exception",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062180,
            "name": "ASCSM-CWE-396 - Declaration of Catch for Generic Exception",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "url": null,
            "description": "Objective\nAvoid failure to use dedicated exception types\n\nConsequence\nSoftware without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.\n\nMeasure Element\nNumber of instances where the named callable control element or method control element contains a catch unit which declares to catch an exception parameter whose data type is part of a list of overly broad exception data types\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "url": null,
            "description": "Objective\nAvoid failure to use dedicated exception types\n\nConsequence\nSoftware unaware of accurate execution status control incurs the risk of bad data being used in operations, possibly leading to a crash or other unintended behaviors\n\nMeasure Element\nNumber of instances where the named callable control element or method control element contains a catch unit which declares to catch an exception parameter whose data type is part of a list of overly broad exception data types\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "url": "https://cwe.mitre.org/data/definitions/396.html",
            "description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
