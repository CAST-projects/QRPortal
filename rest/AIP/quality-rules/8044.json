{
    "id": 8044,
    "name": "Avoid log forging vulnerabilities",
    "href": "AIP/quality-rules/8044",
    "critical": true,
    "associatedValueName": "Call stack from user input source down to the target log method",
    "description": "This metric uses CAST data-flow engine to detect a call path where input data from the user is written into the application logs without prior validation and sanitization.",
    "output": "- Method full name\n- Call stack from user input source down to the target log method",
    "rationale": "Writing unvalidated, unsanitized user input to log files can allow an attacker to forge log entries or inject malicious content into the logs.\n\nApplications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually or sometimes automated with a tool that automatically gathers log data for important events or trending information. \nInterpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim.",
    "reference": "CWE-117: Improper Output Neutralization for Logs\nhttps://cwe.mitre.org/data/definitions/117.html",
    "remediation": "Use authorized sanitization methods.",
    "remediationSample": "String val = request.getParameter(\"value\");\ntry {\n    int value = Integer.parseInt(value);\n}\ncatch (NumberFormatException) {\n    String sanitizedValue = ... // Sanitize here the value\n    log.info(\"Failed to parse value = \" + sanitizedValue);\n}",
    "sample": "String val = request.getParameter(\"value\");\ntry {\n    int value = Integer.parseInt(value);\n}\ncatch (NumberFormatException) {\n    log.info(\"Failed to parse value = \" + value);\n}",
    "total": "Number of methods calling user input methods",
    "alternativeName": "Avoid log forging vulnerabilities",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-117",
            "name": "Improper Output Neutralization for Logs",
            "url": "https://cwe.mitre.org/data/definitions/117.html",
            "description": "The software does not neutralize or incorrectly neutralizes output that is written to logs."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-AU-9",
            "name": "Protection of Audit Information",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/AU-9",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69369",
            "name": "The application must not write sensitive data into the application logs.",
            "url": null,
            "description": "It is important to identify and exclude certain types of data that is written into the logs. If the logs are compromised and sensitive data is included in the logs, this could assist an attacker in furthering their attack or it could completely compromise the system.\n\nExamples of such data include but are not limited to; Passwords, Session IDs, Application source code, encryption keys, and sensitive data such as personal health information (PHI), Personally Identifiable Information (PII), or government identifiers (e.g., SSN)."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
