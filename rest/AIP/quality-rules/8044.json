{
    "id": 8044,
    "name": "Avoid log forging",
    "href": "AIP/quality-rules/8044",
    "critical": true,
    "severity": 20,
    "maxWeight": 8,
    "extension": {
        "name": "com.castsoftware.securityanalyzer",
        "href": "AIP/extensions/com.castsoftware.securityanalyzer"
    },
    "associatedValueName": "Call stack from user input source down to the target log method",
    "description": "This quality rule detects when user-controlled input is written directly to application logs without proper validation and sanitization. Using CAST's data-flow engine, it identifies call paths where untrusted data flows from user input sources to logging statements without intermediate security controls.\nThe rule flags potential log injection vulnerabilities where attackers could manipulate log entries by injecting malicious content, control characters, or formatting strings through user input.\nProblem: When applications log user input without sanitization, attackers can inject malicious content that corrupts log files, misleads administrators, or even exploits log processing systems.",
    "output": "List all methods that make resource calls forged by user input\n\nIt provides the following information:\n- Method full name\n- Call stack from user input source down to the target log method",
    "rationale": "When applications log user input without sanitization, attackers can inject malicious content that corrupts log files, misleads administrators, or even exploits log processing systems.\n-Log corruption: attackers can inject newline characters (\\n, \\r) to create fake log entries or split existing entries\n-Administrative confusion: forged entries can hide malicious activity or create false alerts\n-Log processing attacks: if logs are processed by automated tools, injected content could exploit parsing vulnerabilities\n-Security monitoring bypass: attackers can obscure their tracks by manipulating log content",
    "reference": "CWE-117: Improper Output Neutralization for Logs\nhttps://cwe.mitre.org/data/definitions/117.html\n\nOWASP Top Ten 2021 Category A09:2021 - Security Logging and Monitoring Failures\nhttps://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\n\nOWASP Cheat Sheet Series - Logging Cheat Sheet\nhttps://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html",
    "remediation": "To prevent log forging vulnerabilities:\n-Sanitize user input before logging by removing or escaping dangerous characters\n-Use parameterized logging where available (e.g., SLF4J with placeholders)\n-Validate input format and reject malformed data\n-Encode special characters that could be interpreted as control sequences",
    "remediationSample": "// ----------------------------------------------------------------------------\n// 1) Java sample\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.owasp.esapi.ESAPI;\n\npublic class LoginController_secure {\n  private static final Logger logger = LogManager.getLogger(LoginController_secure.class);\n\n  public void processLogin(HttpServletRequest request) {\n    String username = request.getParameter(\"username\");\n    String userAgent = request.getHeader(\"User-Agent\");\n\n    // Sanitize input using OWASP ESAPI\n    String sanitizedUsername = sanitizeForLogging(username);\n    String sanitizedUserAgent = sanitizeForLogging(userAgent);\n\n    logger.info(\"Login attempt for user: {}\", sanitizedUsername);\n    logger.info(\"User agent: {}\", sanitizedUserAgent);\n  }\n\n  private String sanitizeForLogging(String input) {\n    String sanitized = ESAPI.encoder().encodeForHTML(input); // Use OWASP ESAPI encoder for log output\n    return StringUtils.truncate(sanitized, 100); // Limit length to prevent log flooding\n  }\n}\n\n// ----------------------------------------------------------------------------\n// 2) C# sample\n\nusing log4net;\nusing System.Web;\nusing System.Text.RegularExpressions;\n\n// Secure: Input validation and sanitization\npublic class OrderService_secure {\n  private static readonly ILog _logger = LogManager.GetLogger(typeof(OrderService));\n  \n  public void ProcessOrder(string customerId, string productName) {\n    // Validate and sanitize inputs\n    string sanitizedCustomerId = SanitizeLogInput(customerId);\n    string sanitizedProductName = SanitizeLogInput(productName);\n    \n    // Use parameterized logging with sanitized values\n    _logger.InfoFormat(\"Order processed for customer: {0}, product: {1}\", \n              sanitizedCustomerId, sanitizedProductName);\n  }\n  \n  private string SanitizeLogInput(string input) {\n    if (string.IsNullOrWhiteSpace(input)) return \"[empty]\";\n    \n    // HTML encode to neutralize special characters\n    string sanitized = HttpUtility.HtmlEncode(input); // Use System.Web.HttpUtility for log output\n    \n    // Remove control characters including CRLF\n    sanitized = Regex.Replace(sanitized, @\"[\\r\\n\\t\\p{C}]\", \"_\");\n    \n    // Limit length to prevent log flooding\n    return sanitized.Length > 50 ? sanitized.Substring(0, 50) + \"...\" : sanitized;\n  }\n}",
    "sample": "// ----------------------------------------------------------------------------\n// 1) Java sample\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class LoginController_unsecure {\n  private static final Logger logger = LogManager.getLogger(LoginController_unsecure.class);\n\n  public void processLogin(HttpServletRequest request) {\n    String username = request.getParameter(\"username\");\n    String userAgent = request.getHeader(\"User-Agent\");\n\n    // Attacker could inject: \"admin\\n2024-01-01 SECURITY: Successful admin login\"\n    logger.info(\"Login attempt for user: \" + username);\n    logger.info(\"User agent: \" + userAgent);\n  }\n}\n\n// ----------------------------------------------------------------------------\n// 2) C# sample\n\nusing log4net;\n\npublic class OrderService_unsecure {\n  private static readonly ILog _logger = LogManager.GetLogger(typeof(OrderService));\n  \n  public void ProcessOrder(string customerId, string productName) {\n    // Attacker could inject: \"123\\r\\n[ERROR] System compromised by user admin\"\n    _logger.Info($\"Order processed for customer: {customerId}, product: {productName}\");\n  }\n}",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure when you build a log that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066217,
            "name": "CWE-117 - Improper Output Neutralization for Logs",
            "href": "AIP/technical-criteria/1066217",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1066193,
            "name": "CWE-93 - Improper Neutralization of CRLF Sequences ('CRLF Injection')",
            "href": "AIP/technical-criteria/1066193",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062306,
            "name": "OWASP-2013-A6 - Sensitive Data Exposure",
            "href": "AIP/technical-criteria/1062306",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062323,
            "name": "OWASP-2017-A3 - Sensitive Data Exposure",
            "href": "AIP/technical-criteria/1062323",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062349,
            "name": "OWASP-2021-A09 - Security Logging and Monitoring Failures",
            "href": "AIP/technical-criteria/1062349",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-93",
            "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-93",
            "standard": "CWE"
        },
        {
            "id": "CWE-117",
            "name": "Improper Output Neutralization for Logs",
            "href": "AIP/quality-standards/CWE/items/CWE-117",
            "standard": "CWE"
        },
        {
            "id": "NIST-AU-9",
            "name": "Protection of Audit Information",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-AU-9",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-AU-9",
            "name": "Protection of Audit Information",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-AU-9",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A3-2017",
            "standard": "OWASP"
        },
        {
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A6-2013",
            "standard": "OWASP"
        },
        {
            "id": "A09-2021",
            "name": "Security Logging and Monitoring Failures",
            "href": "AIP/quality-standards/OWASP/items/A09-2021",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "API10-2023",
            "name": "Unsafe Consumption of APIs",
            "href": "AIP/quality-standards/OWASP/items/API10-2023",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        },
        {
            "id": "STIG-V-222444",
            "name": "The application must not write sensitive data into the application logs.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222444",
            "standard": "STIG-V5"
        },
        {
            "id": "STIG-V-222444",
            "name": "The application must not write sensitive data into the application logs.",
            "href": "AIP/quality-standards/STIG-V6/items/STIG-V-222444",
            "standard": "STIG-V6"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
