{
    "id": 1027000,
    "name": "Avoid Managed type declaration for Win32 API using Overlapped IO",
    "href": "AIP/quality-rules/1027000",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "Avoid Managed type declaration for Win32 API using Overlapped IO\n\nP/Invoke declaration for an API using Overlapped IO, should use pointer to an overlapped structure instead of a reference.\n\nThis rule only checks for well known and most used Win32 APIs and will not cover native third-party or user assemblies.\n\nList of API functions checked for incorrect P/Invoke declarations - ConnectNamedPipe, LockFileEx, ReadFile, ReadFileEx, ReadFileScatter, UnlockFileEx, WriteFile, WriteFileEx, WriteFileGather, GetQueuedCompletionStatus, PostQueuedCompletionStatus, DeviceIoControl, GetOverlappedResult, CancelIoEx, GetOverlappedResultEx, TransactNamedPipe, WaitCommEvent, ReadDirectoryChangesW, ReadDirectoryChangesExW",
    "output": "Number of Methods using Overlapped IO via references (instead of pointers) and not marked UNSAFE.",
    "rationale": "Overlapped IO is used for asynchronous Win32 API.\n\nThe caller of such API initializes and passes a Overlapped structure and completion or failure of the API call is conveyed through the structure.\n\nThis means that the memory allocated for Overlapped structure should stay allocated until said IO operation is completed.\n\nWith P/Invoke, if Overlapped IO structure is allocated memory using GC, there is a good chance that this memory will be collected by GC before the IO operation is completed.\n\nTo avoid such error states, it is important that P/Invoke declarations for API using overlapped IO be made using unsafe pointer to a Overlapped structure.\nThis declaration conveys to the user of P/Invoke that allocations for this function should be made in an unsafe context.",
    "reference": "https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1415?view=vs-2019",
    "remediation": "Convert any references like \"NativeOverlapped overlapped\" or \"IntPtr overlapped\" to \"NativeOverlapped* overlapped\" and mark the P/Invoke declaration unsafe",
    "remediationSample": "[ComVisible(true)]\ninternal class UnsafeNativeMethods\n{\n    private UnsafeNativeMethods() { }\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    unsafe internal extern static uint ReadFile(\n    IntPtr hFile, IntPtr lpBuffer, int nNumberOfBytesToRead,\n    IntPtr lpNumberOfBytesRead, NativeOverlapped* overlapped);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    unsafe internal extern static bool ReadFileEx(\n    IntPtr hFile, IntPtr lpBuffer, int nNumberOfBytesToRead,\n    NativeOverlapped* overlapped, IntPtr lpCompletionRoutine);\n}",
    "sample": "[ComVisible(true)]\ninternal class NativeMethods\n{\n    private NativeMethods() { }\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    internal extern static uint ReadFile(\n       IntPtr hFile, IntPtr lpBuffer, int nNumberOfBytesToRead,\n       IntPtr lpNumberOfBytesRead, IntPtr overlapped);\n\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    internal extern static bool ReadFileEx(\n       IntPtr hFile, IntPtr lpBuffer, int nNumberOfBytesToRead,\n       NativeOverlapped overlapped, IntPtr lpCompletionRoutine);\n}",
    "total": "Number of Methods using Overlapped IO",
    "alternativeName": "Avoid Managed type declaration for Win32 API using Overlapped IO",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062145,
            "name": "ASCRM-CWE-120 - Buffer Copy without Checking Size of Input",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062174,
            "name": "ASCSM-CWE-120 - Buffer Copy without Checking Size of Input",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061022,
            "name": "CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-120",
            "name": "Buffer Copy without Checking Size of Input",
            "url": null,
            "description": "Objective\nAvoid buffer operations among buffers with incompatible sizes\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances in which the content of the first buffer is moved into the content of the second buffer while the size of the first buffer is greater than the size of the second buffer.\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-120",
            "name": "Buffer Copy without Checking Size of Input",
            "url": null,
            "description": "Objective\nAvoid buffer operations among buffers with incompatible sizes\n\nConsequence\nSoftware that is unaware of buffer bounds incurs the risk of corruption of relevant memory, and perhaps instructions, possibly leading to a crash, the risk of data integrity loss, and the risk of unauthorized access to sensitive data\n\nMeasure Element\nNumber of instances in which the content of the first buffer is moved into the content of the second buffer while the size of the first buffer is greater than the size of the second buffer.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-120",
            "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "url": "https://cwe.mitre.org/data/definitions/120.html",
            "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-120",
            "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "url": "https://cwe.mitre.org/data/definitions/120.html",
            "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-16",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-120",
            "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
            "url": "https://cwe.mitre.org/data/definitions/120.html",
            "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.2",
            "name": "Buffer overflows",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.2",
            "name": "Buffer overflows",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70277",
            "name": "The application must not be vulnerable to overflow attacks.",
            "url": null,
            "description": "A buffer overflow occurs when a program exceeds the amount of data allocated to a buffer. The buffer is a sequential section of memory and when the data is written outside the memory bounds, the program can crash or malicious code can be executed.\n\nSecurity safeguards employed to protect memory include, for example, data execution prevention and address space layout randomization. Data execution prevention safeguards can either be hardware-enforced or software-enforced with hardware providing the greater strength of mechanism.\n\nBuffer overflows can manifest as stack overflows, heap overflows integer overflows and format string overflows. Each type of overflow is dependent upon the underlying application language and the context in which the overflow is executed.\n\nInteger overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. \n\nAlmost all known web servers, application servers, and web application environments are susceptible to buffer overflows. Proper validation of user input is required to mitigate the risk. Notably, limiting the size of the strings a user is allowed to input to a program to a predetermined, acceptable length.\n\nA code review, static code analysis or active vulnerability or fuzz testing are methods used to identify overflows within application code."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
