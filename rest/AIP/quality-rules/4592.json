{
    "id": 4592,
    "name": "Avoid hiding static Methods",
    "href": "AIP/quality-rules/4592",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "Hiding Static Methods is not allowed. \nThis Quality Rule retrieves all static methods that are redefined in subclasses i.e. \"implicitly hidden\". \nA Static Method MyMethod of Class MySuperClass is \"implicitly hidden\" in Subclass MySubClass if MySubClass contains a similar declaration of MyMethod (i.e. same signature).\n\nExcept \"createUI\" for class derives from  \u201cjavax.swing.plaf.ComponentUI;\u201d",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Hiding is all about polymorphism. This means that the OO designer expects to override methods and use polymorphism so that code calling methods through a base class will end up executing different methods depending on the instance being used. This is not the case with static methods. When static methods are called, there is no polymorphism in play. It is always the static method of the type used to reference the object used that is called. Hiding static methods is a misuse of OO practices that results in misunderstanding of what is going to be executed at runtime and thus leads to unexpected behavior, jeopardizing the stability of the application.\n\nExcept for class derives from \u201cjavax.swing.plaf.ComponentUI\u201d\nSee documentation:\nhttps://docs.oracle.com/javase/7/docs/api/javax/swing/plaf/ComponentUI.html#createUI(javax.swing.JComponent)\n\npublic static ComponentUI (https://docs.oracle.com/javase/7/docs/api/javax/swing/plaf/ComponentUI.html) createUI(JComponent (https://docs.oracle.com/javase/7/docs/api/javax/swing/JComponent.html) c)\n\nReturns an instance of the UI delegate for the specified component. Each subclass must provide its own static createUI method that returns an instance of that UI delegate subclass. If the UI delegate subclass is stateless, it may return an instance that is shared by multiple components. If the UI delegate is stateful, then it should return a new instance per component. The default implementation of this method throws an error, as it should never be invoked.",
    "reference": "https://coderanch.com/wiki/659959/Overriding-Hiding\nhttps://coderanch.com/t/380069/java/overriding-static-method",
    "remediation": "Review the design of the Method.\nSimply not override the static (class) methods.",
    "remediationSample": "class Foo {\n    public static void classMethod() {\n        System.out.println(\"classMethod() in Foo\");\n    }\n \n    public void instanceMethod() {\n        System.out.println(\"instanceMethod() in Foo\");\n    }\n}\n \nclass Bar extends Foo {\n    //Simply not override the static (class) methods: classMethod.\n \n    public void instanceMethod() {\n        System.out.println(\"instanceMethod() in Bar\");\n    }\n}\n  \nclass Test {\n    public static void main(String[] args) {\n        Foo f = new Bar();\n        f.instanceMethod();\n        \n        //Rather than writing:\n        //f.classMethod();\n        \n        //It would be better coding style to write either:\n        Foo.classMethod();\n    }\n}",
    "sample": "class Foo {\n    public static void classMethod() {\n        System.out.println(\"classMethod() in Foo\");\n    }\n \n    public void instanceMethod() {\n        System.out.println(\"instanceMethod() in Foo\");\n    }\n}\n \nclass Bar extends Foo {\n    public static void classMethod() {\n        System.out.println(\"classMethod() in Bar\");\n    }\n \n    public void instanceMethod() {\n        System.out.println(\"instanceMethod() in Bar\");\n    }\n}\n  \nclass Test {\n    public static void main(String[] args) {\n        Foo f = new Bar();\n        f.instanceMethod();\n        f.classMethod();\n    }\n}\n\n// If you run this, the output is\n// instanceMethod() in Bar\n// classMethod() in Foo",
    "total": "Number of methods.",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
