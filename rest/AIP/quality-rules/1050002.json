{
    "id": 1050002,
    "name": "Avoid using NSString stringWithFormat on behalf of NSURL instance",
    "href": "AIP/quality-rules/1050002",
    "critical": true,
    "description": "An attacker can tamper with the URL and point it to an unintended server. Sensitive information may then be transmitted to the attacker's server. \nThe injection could be done in NSString using the methods \nstringWithFormat:, \ninitWithFormat: \nand used when instanciating through NSURL URLWithString. \nThis rule is compliant with CISQ OMG ASCSM-CWE-134 recommendation and with OWASP 2016-M7 recommendation",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "An attacker could access other user information thanks to string injection threw the withFormat method. This is why it is highly recommended to avoid the usage of the API",
    "reference": "https://www.owasp.org/index.php/Mobile_Top_10_2014-M7\n\nhttps://developer.apple.com/library/mac/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html#//apple_ref/doc/uid/TP40007246-SW3",
    "remediation": "Usage of unstructured, strictly structured, and weakly structured data with explicit lengths are less likely to pose security risks",
    "total": "Number of Objective-C artifacts",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "AIP/technologies/1050001"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-HA-THREATS",
            "name": "HA - external threats mitigation",
            "url": "",
            "description": "Quality rules related to the absence of protections against malevolent actions from external actors"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-134",
            "name": "Improper format string neutralization",
            "url": null,
            "description": "Remove instances where a user input is ultimately used in a formatting statement, without any sanitization (based on a list of vetted sanitization functions, methods, procedures, stored procedures, sub-routines, etc.) of the user input value between the user input and the statement."
        },
        {
            "standard": "CWE",
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "url": "https://cwe.mitre.org/data/definitions/134.html",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ]
}
