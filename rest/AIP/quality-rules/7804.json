{
    "id": 7804,
    "name": "Avoid Classes with High Weighted Methods per Class",
    "href": "AIP/quality-rules/7804",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Weighted Methods per Class",
    "description": "Avoid Classes with High Weighted Methods per Class (WMC > X).\nThe Weighted Methods per Class metric is defined as the sum of all the Classes method's cyclomatic complexity. The threshold is a parameter and can be changed at will.",
    "output": "This report lists all Classes with a Weighted Methods per Class greater than X. It provides the following information: Class full name, WMC",
    "rationale": "The number of methods and complexity of methods is an indicator of how much time and effort is required to develop and maintain the object.\nFor maintainability reasons, High Weighted Methods per Class should not be too high.",
    "reference": "A Metrics Suite for Object Oriented Design\nChidamber, S.R. and C.F. Kemerer\nIEEE Transactions on Software Engineering, 1994",
    "remediation": "Reduce the number  - by splitting the Class in two or moving method to a component Class - or the Cyclomatic Complexity of the method of the non compliant Class",
    "total": "Number of classes",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61009,
            "name": "Complexity - Algorithmic and Control Structure Complexity",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "AIP/technologies/141901"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": -8,
            "name": "PowerBuilder",
            "href": "AIP/technologies/-8"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        },
        {
            "id": -9,
            "name": "Visual Basic",
            "href": "AIP/technologies/-9"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-11",
            "name": "Callable and Method Control Element Excessive Cyclomatic Complexity Value",
            "url": null,
            "description": "Objective\nAvoid overly complex control flow\n\nConsequence\nSoftware that does not follow the principles of structured programming degrades comprehensibility\n\nMeasure Element\nNumber of instances where a named callable control element or method control element has a control flow with a Cyclomatic Complexity number that exceeds a threshold value. Default threshold value for Cyclomatic Complexity is 20\n\n"
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        {
            "name": "Maximum Weighted Methods",
            "description": "Max Weighted Methods per class",
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        100.0
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
