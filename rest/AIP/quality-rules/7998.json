{
    "id": 7998,
    "name": "Avoid local variables that are not initialized at declaration time",
    "href": "AIP/quality-rules/7998",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for C++ functions, methods, constructors, and destructors where at least one local variable is not initialized at declaration time. This applies to standard types ('char', 'int', etc) and pointers of any type. This does not apply to: \n- classes (i.e. local declarations like: 'myclass var;') as they have a constructor\n- structs and arrays\n\nVariables that are initialized after their declaration are considered as initialized as long as this is done before any program logic.",
    "output": "Associated to each C++ Function/Method/Constructor/Destructor with violations, the Quality Rule provides:\n- Number of violation occurrences\n- Bookmarks for violation occurrences found in the source code:\n  - Uninitialized variable",
    "rationale": "Using a variable that is not initialized can lead to unexpected behavior. Some compilers may detect the use of uninitialized variables in some cases, but none can detect them all. For example the following sample remains undetected: \n\nvoid take_ptr(int * ptr) \n{\n    printf(\"%lx\", *ptr); \n} \n\nvoid main() \n{ \n    int c;\n    take_ptr(&c); \n}",
    "reference": "\"Black Hat Federal 2006 : Attack on uninitialized Variables\":http://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-Flake.pdf",
    "remediation": "See samples and remediation samples.",
    "remediationSample": "// SAMPLE 1: Basic example\nint main()\n{\n int c = 0;\n}\n\n// SAMPLE 3: Initialization in branch\n// Initialization done in conditional branching or in a called method are considered as a violation.\n\nvoid main()\n{\n     int i = 0; // REMEDIATION\n     if (...)\n         i = 3; \n} \n\n// SAMPLE 4: Use in function call\n// Although this usage is safe, we cannot know it in 'g' until we read the body of 'f'. If the implementation of 'f' changes, calling 'g' may become invalid. It is safer to initialize 'i' in 'g':\n\nvoid f( int * p) { *p = 3; }\n\nvoid g() \n{\n      int i = 0; // REMEDIATION\n      f( &i);\n}",
    "sample": "// SAMPLE 1: Basic example\nint main()\n{\n    int c; // VIOLATION\n}\n\n// SAMPLE 2: Non violations\nvoid main()\n{\n     int c;\n     c = 0; // is NOT considered as a violation\n\n     double d = f(); // not a violation\n}\n\n// SAMPLE 3: Initialization in branch\n// Initialization done in conditional branching or in a called method are considered as a violation.\n\nvoid main()\n{\n     int i;\n     if (...)\n         i = 3; // VIOLATION\n}\n\n// SAMPLE 4: Use in function call\n\nvoid f( int * p) { *p = 3; }\n\nvoid g() \n{\n      int i;\n      f( &i); // VIOLATION\n}",
    "total": "Number of C++ Functions, Methods, Constructors, and Destructors",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-456",
            "name": "Storable and Member Data Element Missing Initialization",
            "url": null,
            "description": "Objective\nAvoid failure to explicitly initialize software data elements in use\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances where a storable data element or member data element is declared by the \u2018Create\u2019 action, then is evaluated in a \u2018Read\u2019 action without ever being initialized by a \u2018Write\u2019 action prior to the evaluation\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-456",
            "name": "Storable and Member Data Element Missing Initialization",
            "url": null,
            "description": "Objective\nAvoid failure to explicitly initialize software data elements in use\n\nConsequence\nSoftware featuring weak initialization practices incurs the risk of logic errors within the program, possibly leading to a security problem\n\nMeasure Element\nNumber of instances where a storable data element or member data element is declared by the \u2018Create\u2019 action, then is evaluated in a \u2018Read\u2019 action without ever being initialized by a \u2018Write\u2019 action prior to the evaluation\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-456",
            "name": "Missing Initialization of a Variable",
            "url": "https://cwe.mitre.org/data/definitions/456.html",
            "description": "The software does not initialize critical variables, which causes the execution environment to use unexpected values."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
