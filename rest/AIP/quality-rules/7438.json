{
    "id": 7438,
    "name": "Avoid non thread safe singleton",
    "href": "AIP/quality-rules/7438",
    "critical": true,
    "description": "All singleton that initialize the static field that refer to the single instance in a non synchronized method will be reported. \n\nA singleton is defined as:\n- a class with a static member with the same type or parent type (extended or implemented) as the class\n- a static method that refers the instance and return an object of same type or a parent type (extended or implemented)\n- a class that has only private constructors",
    "output": "The metric will list all singleton classes that are not thread safe.",
    "rationale": "If singleton is invoked in a multi-threaded program, you could end up creating multiple instances of the class which will make the application instable.",
    "reference": "http://tekpool.wordpress.com/2006/10/27/singleton-pattern-part-2-thread-safe-implemenation/\nhttp://www-128.ibm.com/developerworks/java/library/j-dcl.html",
    "remediation": "To remediate to this issue (in case of multi-threaded environment), there is two solutions:\n1/ declare the field that hold the unique instance as static final and initialize it in the declaration\n2/ synchronize the method that initialize the field",
    "remediationSample": "1/ declare a static final field\nclass Singleton\n{\n  private static final Singleton instance = new Singleton(); // FIXED\n  private Singleton() {}\n  public static Singleton getInstance() { \n    return instance;\n  }\n}\n\n2/ synchronize the method\nclass Singleton\n{\n  private static Singleton instance;\n  private Singleton() {}\n  public static synchronized Singleton getInstance() { \n    if (instance == null)              \n      instance = new Singleton();\n    return instance;\n  }",
    "sample": "class Singleton\n{\n  private static Singleton instance;\n  private Singleton() {}\n  public static Singleton getInstance() { \n    if (instance == null)                    // VIOLATION\n      instance = new Singleton();\n    return instance;\n  }\n}",
    "total": "Number of singleton classes (as defined in the definition)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-12",
            "name": "Singleton Class Instance Creation without Proper Lock Element Management",
            "url": null,
            "description": "Objective\nAvoid incorrect implementation of singleton patterns caused by improperly-locked instantiations\n\nConsequence\nSoftware deployed in multi-thread environments that does not protect their state can experience deadlock or livelock\n\nMeasure Element\nNumber of instances where a singleton class element, (that is, a class element that can be used only once in the 'to' association of a \u2018Create\u2019 action) is instantiated with the \u2018Creates\u2019 action element without any prior locking mechanism activation\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-543",
            "name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
            "url": "https://cwe.mitre.org/data/definitions/543.html",
            "description": "The software uses the singleton pattern when creating a resource within a multithreaded environment."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
