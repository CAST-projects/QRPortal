{
    "id": 1034032,
    "name": "Avoid second order PHP Remote File Inclusion",
    "href": "AIP/quality-rules/1034032",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.php.security",
        "href": "AIP/extensions/com.castsoftware.php.security"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric uses Psalm data-flow engine to detect a call path where result from database query is used as \"include\" (or similar function) without prior validation and sanitization.\n\nVetted database query validations can be specified to Psalm data-flow engine using the \"@psalm-taint-escape include\" annotation.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software does not properly neutralize special elements that are part of paths or file names used in XXXX\n\nPassing untrusted user input to include calls is dangerous, as it can allow an attacker to execute arbitrary scripts on your server.\n\nThis can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers.",
    "reference": "CWE-98: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\nhttps://cwe.mitre.org/data/definitions/98.html\n\nhttps://www.php.net/manual/en/function.include.php\nhttps://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php\nhttps://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion\n\nOpen Web Application Security Project (OWASP) \nOWASP Top Ten 2017 Category A1:2017-Injection\nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection\n\nOWASP Top Ten 2021 Category A03:2021 - Injection\nhttps://owasp.org/Top10/A03_2021-Injection/",
    "remediation": "Explicitly specify what to include. If that is not a viable solution, validate user input thoroughly with below functions:\nbasename($PATH, ...)\nlinkinfo($PATH, ...)\nreadlink($PATH, ...)\nrealpath($PATH, ...)\ninclude_safe(...)",
    "remediationSample": "<?php\n\n/**\n* @psalm-taint-escape include\n*/\nfunction my_escaping_function_for_included_files(string $input) : string {\n    // Check that input is part of a hard-coded white-list of permitted included files\n};\n\nfunction includeFile(PDOStatement $stmt) : void {\n    $stmt->execute();\n    $row = $stmt->fetch();\n    $name = $row[\"name\"];\n    $name = my_escaping_function_for_included_files($name);  // USE A FUNCTION ANNOTATED WITH @psalm-taint-escape include\n    include($name . '.php');                                 // FIXED\n}",
    "sample": "<?php\n\nfunction includeFile(PDOStatement $stmt) : void {\n    $stmt->execute();\n    $row = $stmt->fetch();\n    $name = $row[\"name\"];\n    include($name . '.php');   // VIOLATION\n}",
    "total": "Number of PHP artifacts",
    "alternativeName": "Ensure you sanitize file include constructed from database query",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062301,
            "name": "OWASP-2013-A1 - Injection",
            "href": "AIP/technical-criteria/1062301",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062321,
            "name": "OWASP-2017-A1 - Injection",
            "href": "AIP/technical-criteria/1062321",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062343,
            "name": "OWASP-2021-A03 - Injection",
            "href": "AIP/technical-criteria/1062343",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-98",
            "name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
            "href": "AIP/quality-standards/CWE/items/CWE-98",
            "standard": "CWE"
        },
        {
            "id": "A1-2013",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2013",
            "standard": "OWASP"
        },
        {
            "id": "A1-2017",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2017",
            "standard": "OWASP"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "STIG-V-222604",
            "name": "The application must protect from command injection.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222604",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
