{
    "id": 8046,
    "name": "Do not return non-const handles to Class data from const member Functions",
    "href": "AIP/quality-rules/8046",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for const C++ methods that return non-const handles to class data.",
    "output": "Associated to each C++ method with violations, the Quality Rule provides:\n- non-const class data\n- Bookmarks for violation occurrences found in the source code:\n  - non-const class data return",
    "rationale": "From a language point of view, the pointer 'p' is part of the class and then cannot be modified in a 'const' function. But the pointed-to value is not part of the class, and may be modified. However, from a design point of view, in this case the pointed to value is still logically part of the class, it should not be modified in a 'const' function, nor should a 'const' function allow its caller to modify it through a reference.",
    "reference": "High Integrity C++ Coding Standard Manual",
    "remediation": "To correct the violation, return a 'const' reference, or return by value.",
    "remediationSample": "class A\n{\n    //...\n    int const &correct1() const {return *p;}\n    int correct2() const {return *p;}\n}",
    "sample": "class A\n{\npublic:\n    A() : p(new int(0)) {}\n    ~A() {delete p;}\n    int &violation() const {return *p;} // Violation\n    int *p;\n};\n\nvoid f(A const &a)\n{\n    a.violation() = 42;\n}",
    "total": "Number of C++ methods",
    "alternativeName": "Do not return non-const handles to Class data from const member Functions",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
            "href": "AIP/technical-criteria/61020",
            "weight": 8
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
