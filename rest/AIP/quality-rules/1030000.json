{
    "id": 1030000,
    "name": "Avoid \"when\" statement or expression without an else (Kotlin)",
    "href": "AIP/quality-rules/1030000",
    "critical": false,
    "maxWeight": 8,
    "description": "This rule reports violation with \"when\" statement or expression is used without an else statement.",
    "rationale": "The 'else' part is executed when none of the when part is executed. Having no else keyword means that there is no backup. The cases that are \"impossible\" today are those most likely to be the causes of untraceable bugs in the future.\nSoftware should follow the principles of structured programming or else it degrades comprehensibility.",
    "reference": "CISQ rule: ASCMM-MNT-1.",
    "remediation": "Add else block to every when statement or expression",
    "remediationSample": "fun  main(args: Array<String>){\n    println(\"hello\")\n    val x = 20\n    when (x) {\n        1 -> print(\"x == 1\")\n        2 -> print(\"x == 2\")\n        else -> println(\"x is neither 1 not 2\")\n        }\n    }",
    "sample": "fun  main(args: Array<String>){\n    println(\"hello\")\n    val x = 20\n    when (x) {\n        1 -> print(\"x == 1\")\n        2 -> print(\"x == 2\")\n\n        }\n    }",
    "alternativeName": "Avoid \"when\" statement or expression without an else (Kotlin)",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062101,
            "name": "CISQ-Maintainability",
            "href": "AIP/business-criteria/1062101"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061001,
            "name": "ISO-5055-Maintainability",
            "href": "AIP/business-criteria/1061001"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062110,
            "name": "ASCMM-MNT-1 - Control Flow Transfer Control Element outside Switch Block",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061129,
            "name": "CWE-1075: Unconditional Control Flow Transfer outside of Switch Block",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061056,
            "name": "CWE-478: Missing Default Case in Switch Statement",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1030000,
            "name": "Kotlin",
            "href": "AIP/technologies/1030000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-1",
            "name": "Control Flow Transfer Control Element outside Switch Block",
            "url": null,
            "description": "Objective\nAvoid the unconditional transfer of control flow outside of switch structures\n\nConsequence\nSoftware that does not follow the principles of structured programming degrades comprehensibility\n\nMeasure Element\nNumber of instances where an unconditional transfer of control is located outside the branching based on the value of a storable element\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-478",
            "name": "Missing Default Case in Switch Statement",
            "url": "https://cwe.mitre.org/data/definitions/478.html",
            "description": "The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses."
        },
        {
            "standard": "CWE",
            "id": "CWE-1075",
            "name": "Unconditional Control Flow Transfer outside of Switch Block",
            "url": "https://cwe.mitre.org/data/definitions/1075.html",
            "description": "The software performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-478",
            "name": "Missing Default Case in Switch Statement",
            "url": "https://cwe.mitre.org/data/definitions/478.html",
            "description": "The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-1075",
            "name": "Unconditional Control Flow Transfer outside of Switch Block",
            "url": "https://cwe.mitre.org/data/definitions/1075.html",
            "description": "The software performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-478",
            "name": "Missing Default Case in Switch Statement",
            "url": "https://cwe.mitre.org/data/definitions/478.html",
            "description": "The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1075",
            "name": "Unconditional Control Flow Transfer outside of Switch Block",
            "url": "https://cwe.mitre.org/data/definitions/1075.html",
            "description": "The software performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
