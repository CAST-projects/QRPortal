{
    "id": 1027026,
    "name": "Avoid Connection String Parameter Pollution",
    "href": "AIP/quality-rules/1027026",
    "critical": true,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "Avoid Connection String Parameter Pollution (CSPP) attack Vulnerability\nThe software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When unvalidated input is concatenated into a database connection, it may allow an attacker to override the value of a request parameter, inject a new parameter or exploit variables.",
    "reference": "https://cwe.mitre.org/data/definitions/99.html",
    "remediation": "\u2022 Use ConnectionStringBuilder\n\u2022 Filter the ;)",
    "remediationSample": "private static void BuildConnectionString(string dataSource,\n    string userName, string userPassword)\n{\n    // Retrieve the partial connection string named databaseConnection\n    // from the application's app.config or web.config file.\n    ConnectionStringSettings settings =\n        ConfigurationManager.ConnectionStrings[\"partialConnectString\"];\n\n    if (null != settings)\n    {\n        // Retrieve the partial connection string.\n        string connectString = settings.ConnectionString;\n        Console.WriteLine(\"Original: {0}\", connectString);\n\n        // Create a new SqlConnectionStringBuilder based on the\n        // partial connection string retrieved from the config file.\n        SqlConnectionStringBuilder builder =\n            new SqlConnectionStringBuilder(connectString);\n\n        // Supply the additional values.\n        builder.DataSource = dataSource;\n        builder.UserID = username;\n        builder.Password = password;\n        Console.WriteLine(\"Modified: {0}\", builder.ConnectionString);\n    }\n}",
    "sample": "string userID = userModel.username;\nstring passwd = userModel.password;\n\n// connect DB with the authenticated user provided credentials\n// valid connection also implies succesfull authentication\nSqlConnection DBconn = new SqlConnection(\"Data Source= tcp:10.10.2.1,1434;Initial Catalog=mydb;User ID=\" + userID +\";Password=\" + passwd);\n\n\n//User input to perform cspp\nusername = myUsername\npassword = xxx; Integrated Security = true",
    "total": "Number of methods and fields and properties initialized using a lambda function",
    "alternativeName": "[DUPLICATE] Avoid Connection String Parameter Pollution",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062195,
            "name": "ASCSM-CWE-99 - Name or Reference Resolution Improper Input Neutralization",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061020,
            "name": "CWE-99: Improper Control of Resource Identifiers ('Resource Injection')",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062301,
            "name": "OWASP-2013-A1 Injection",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062321,
            "name": "OWASP-2017-A1 Injection",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-99",
            "name": "Name or Reference Resolution Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to sanitize user input in use as resource names or references\n\nConsequence\nSoftware unaware of resource identification control incurs the risk of unauthorized access to or modification of sensitive data and system resources, including configuration files and files containing sensitive information\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the in the platform action to access a resource by its name; none of the callable or method control element of the transformation sequence being a vetted sanitization control element from the list of vetted sanitization control elements.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-99",
            "name": "Improper Control of Resource Identifiers ('Resource Injection')",
            "url": "https://cwe.mitre.org/data/definitions/99.html",
            "description": "The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-99",
            "name": "Improper Control of Resource Identifiers ('Resource Injection')",
            "url": "https://cwe.mitre.org/data/definitions/99.html",
            "description": "The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-99",
            "name": "Improper Control of Resource Identifiers ('Resource Injection')",
            "url": "https://cwe.mitre.org/data/definitions/99.html",
            "description": "The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control."
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70271",
            "name": "The application must not be subject to input handling vulnerabilities.",
            "url": null,
            "description": "A common application vulnerability is unpredictable behavior due to improper input validation. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nData received from the user should always be suspected as being malicious and always validated prior to using it as input to the application.\n\nSome examples of input methods:\n\n- Forms Data\n- URL parameters\n- Hidden Fields\n- Cookies\n- HTTP Headers or anything in the HTTP request\n- Client data entry fields\n\nItems to validate:\n\n- Out of range values/Boundary \n- Data length \n- Validate types of characters allowed\n- Whitelist validation for known good data input while denying all other input.\n\nOther recommendations include: \n\n- Using drop down menus for lists\n- Validating input on the server, not on the client.\n\nIf validating on the client, also validate on the server:\n\n- Using regular expressions to validate input\n- Using HTML filter libraries that implement input validation tasks."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
