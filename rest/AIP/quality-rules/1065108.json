{
    "id": 1065108,
    "name": "Bit-fields shall be either unsigned integral, or enumeration (with underlying type of unsigned integral type).",
    "href": "AIP/quality-rules/1065108",
    "critical": false,
    "severity": 10,
    "maxWeight": 7,
    "extension": {
        "name": "com.castsoftware.cpp",
        "href": "AIP/extensions/com.castsoftware.cpp"
    },
    "description": "The rule will raise a violation if the bit-fields have signed type OR are enum types with enumeration base defined unsigned",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Explicitly declaring a bit-field unsigned prevents unexpected sign extension, overflows and implementation-defined behavior.\nNote that if a bit-field has enumeration type, then the enumeration base needs to be declared of an explicitly unsigned type.",
    "reference": "AUTOSAR C++ 2014, A9-6-1: Bit-fields shall be either unsigned integral or enumeration (with underlying type of unsigned integral type).\n\nJSF December 2005 [7]: AV Rule 154 Bit-fields shall have explicitly unsigned\nintegral or enumeration types only.\n\nHIC++ v4.0 [8]: 9.2.1 Declare bit-fields with an explicitly unsigned integral or\nenumeration type.\n\nhttps://cwe.mitre.org/data/definitions/190.html",
    "remediation": "Make sure bit fields are unsigned type or Enums with base defined as unsigned",
    "remediationSample": "#include <cstdint>\nenum class E1 : std::uint8_t\n{\nE11,\nE12,\nE13\n};\nenum class E2 : std::int16_t\n {\n E21,\n E22,\n E23\n };\n enum class E3\n {\n E31,\n E32,\n E33\n };\n enum E4\n {\n E41,\n E42,\n E43\n };\n class C\n {\n public:\n std::uint8_t b : 2U; // Compliant\n\n E1 f1 : 2; // Compliant\n\n }",
    "sample": "#include <cstdint>\nenum class E1 : std::uint8_t\n{\nE11,\nE12,\nE13\n};\nenum class E2 : std::int16_t\n {\n E21,\n E22,\n E23\n };\n enum class E3\n {\n E31,\n E32,\n E33\n };\n enum E4\n {\n E41,\n E42,\n E43\n };\n class C\n {\n public:\n std::int32_t a : 2; // Non-compliant - signed integral type\n bool c : 1; // Non-compliant - it is implementation-defined whether bool is\n // signed or unsigned\n char d : 2; // Non-compliant\n wchar_t e : 2; // Non-compliant\n E2 f2 : 2; // Non-compliant - E2 enum class underlying type is signed\n // int\n E3 f3 : 2; // Non-compliant - E3 enum class does not explicitly define\n // underlying type\n E4 f4 : 2; // Non-compliant - E4 enum does not explicitly define underlying\n // type\n }",
    "total": "Number of Fields (members)",
    "alternativeName": "Bit-fields shall be either unsigned integral, or enumeration (with underlying type of unsigned integral type).",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066290,
            "name": "CWE-190 - Integer Overflow or Wraparound",
            "href": "AIP/technical-criteria/1066290",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "AUTOSAR-CPP-2014-Classes",
            "name": "Classes",
            "href": "AIP/quality-standards/C-CPP/items/AUTOSAR-CPP-2014-Classes",
            "standard": "C-CPP"
        },
        {
            "id": "CWE-190",
            "name": "Integer Overflow or Wraparound",
            "href": "AIP/quality-standards/CWE/items/CWE-190",
            "standard": "CWE"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
