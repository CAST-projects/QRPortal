{
    "id": 592,
    "name": "Ensure you provide a user-defined copy constructor or disable copy when a class allocates memory in its constructor",
    "href": "AIP/quality-rules/592",
    "critical": true,
    "severity": 20,
    "maxWeight": 8,
    "extension": {
        "name": "com.castsoftware.cpp",
        "href": "AIP/extensions/com.castsoftware.cpp"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for C++ classes using the \"new\" operator to allocate instances but that do not define a copy constructor.",
    "output": "Associated to each C++ class with violations, the Quality Rule provides:\n- Bookmarks for violation occurrences found in the source code:\n- object instantiation",
    "rationale": "If an object manages the allocation and deallocation of an object on the heap (the managing object has a pointer to the object to be created by the class' constructor), and the default copy constructor is used, only the value of the pointer will be copied. This can lead to two invocations of the destructor for the same object (on the heap), probably resulting in a run-time error.",
    "remediation": "Define a copy constructor for the class, or make the class non-copyable.",
    "remediationSample": "#include <string.h>\n\n   class String\n   {\n      public:\n         String( const char* cp = \"\");   // Constructor\n         String( const String& sp );     // Copy constructor\n         ~String();                      // Destructor\n         // ...\n      private:\n         char* sp;\n         // ...\n   };\n\n   String::String( const char* cp )    // Constructor\n   {\n      sp = new char[strlen(cp)];\n      strcpy(sp,cp);\n   }\n\n   String::String( const String& stringA ) : sp( new char[strlen(stringA.sp)] )\n   {\n      strcpy(sp,stringA.sp);\n   }\n   String::~String()     // Destructor\n   {\n      delete sp;\n   }\n\n   // \"Safe\" String class\n   void\n   main()\n   {\n      String w1;\n      String w2 = w1;   // SAFE COPY: String::String( const String& ) CALLED.\n   }",
    "sample": "#include <string.h>\n\n   class String\n   {\n      public:\n         String( const char* cp = \"\");    // Constructor\n         ~String();                       // Destructor\n         // ...\n      private:\n         char* sp;\n         // ...\n   };\n\n   String::String(const char* cp)      // Constructor\n   {\n      sp = new char[strlen(cp)];\n      strcpy(sp,cp);\n   }\n   String::~String()    // Destructor\n   {\n      delete sp;\n   }\n\n   // \"Dangerous\" String class\n   void\n   main()\n   {\n      String w1;\n      String w2 = w1;\n      // WARNING: IN A BITWISE COPY OF w1::sp,\n      // THE DESTRUCTOR FOR W1::SP WILL BE CALLED TWICE:\n      // FIRST, WHEN w1 IS DESTROYED; AGAIN, WHEN w2 IS DESTROYED.\n   }",
    "total": "Number of C++ classes",
    "alternativeName": "Ensure you provide a user-defined copy constructor or disable copy when a class allocates memory in its constructor",
    "businessCriteria": [
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061077,
            "name": "CWE-672 - Operation on a Resource after Expiration or Release",
            "href": "AIP/technical-criteria/1061077",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-672",
            "name": "Operation on a Resource after Expiration or Release",
            "href": "AIP/quality-standards/CWE/items/CWE-672",
            "standard": "CWE"
        },
        {
            "id": "CWE-672",
            "name": "Operation on a Resource after Expiration or Release",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-672",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-672",
            "name": "Operation on a Resource after Expiration or Release",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-672",
            "standard": "OMG-ASCQM"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
