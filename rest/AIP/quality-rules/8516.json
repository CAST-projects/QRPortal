{
    "id": 8516,
    "name": "Avoid URL redirection to untrusted site through API requests",
    "href": "AIP/quality-rules/8516",
    "critical": true,
    "maxWeight": 9,
    "associatedValueName": "Call stack from user input source down to the target method",
    "description": "Using CAST data-flow engine, this metric detects paths from API requests down to HTTP redirection, paths which are open vulnerabilities.",
    "output": "List all methods that make resource calls forged by user input\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target method.",
    "rationale": "Attackers may use phishing techniques or steal credentials. A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect.",
    "reference": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\nhttps://cwe.mitre.org/data/definitions/601.html\n\nOpen Web Application Security Project (OWASP)\nhttps://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards",
    "remediation": "Assume all input is malicious. \nAvoid using inputs. If it is not possible, use an \"accept known good\" input validation strategy, i.e., use stringent white-lists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack.",
    "remediationSample": "String url; // value given by an API request\n//code a validate function for the input recieved \"url\"\nresponse.sendRedirect(url);",
    "sample": "String url; // value given by an API request\nresponse.sendRedirect(url);",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure your application does not redirect to an untrusted site",
    "businessCriteria": [
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061002,
            "name": "ISO-5055-Performance-Efficiency",
            "href": "AIP/business-criteria/1061002"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061049,
            "name": "CWE-424: Improper Protection of Alternate Path",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062310,
            "name": "OWASP-2013-A10 Unvalidated Redirects and Forwards",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-424",
            "name": "Improper Protection of Alternate Path",
            "url": "https://cwe.mitre.org/data/definitions/424.html",
            "description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-424",
            "name": "Improper Protection of Alternate Path",
            "url": "https://cwe.mitre.org/data/definitions/424.html",
            "description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-424",
            "name": "Improper Protection of Alternate Path",
            "url": "https://cwe.mitre.org/data/definitions/424.html",
            "description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources."
        },
        {
            "standard": "OWASP",
            "id": "A10-2013",
            "name": "Unvalidated Redirects and Forwards",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards",
            "description": "Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70257",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "url": null,
            "description": "XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.\n\nXSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, \"&lt;\" is the HTML encoding for the \"<\" character. If the encoding is performed, the script code will not execute.\n\nThere are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.\n\nWhen the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker\u2019s script is executed in the victims browser with the trust permissions assigned to the site.\n\nThere are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.\n\nTo address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.\n\nExamples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.\n  \nThe site is available by pointing your browser to https://www.owasp.org."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
