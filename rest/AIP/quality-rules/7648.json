{
    "id": 7648,
    "name": "Avoid an explicit call to finalize()",
    "href": "AIP/quality-rules/7648",
    "critical": false,
    "maxWeight": 8,
    "description": "finalize() method in Java should be only called by garbage collector thread before reclaiming the memory allocated to the object.\n\nThis rule reports violation when detecting an explicit call to finalize() except call to super.finalize() from a finalize() method.",
    "output": "The metric will list all methods that call a finalize method (filter by method signature void finalise() ) \n\nIt provides the following information:\n Method full name",
    "rationale": "While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.",
    "reference": "https://cwe.mitre.org/data/definitions/586.html\nhttps://howtodoinjava.com/java/basics/why-not-to-use-finalize-method-in-java/",
    "remediation": "If an explicit call to finalize method is required, there is two possible remediation: \n- If finalize method is used to release non-memory resources like file handles, sockets, database connections etc: you must not use this method to release these resources but create a specific method or release these resource in a finally block. Finalize() method is used only to release memory resources.\n- If it is used for memory resources, the Garbage collector will handle the invocation, so just remove the explicit call.",
    "remediationSample": "public class InvokeFinalize {\n    private MyClass mine = new MyClass();\n    ...\n    public meth () {\n       ... \n/ FIXED\n    }\n}",
    "sample": "public class MyClass  {\n     ...\n      protected void finalize() throws Throwable {\n          // some code here\n         ......\n          super.finalize();\n     }\n} \n\npublic class InvokeFinalize {\n    private MyClass mine = new MyClass();\n    ...\n    public meth () {\n       ...\n        mine.finalize();  // VIOLATION\n    }\n}",
    "total": "Number of calls to finalize methods and super.finalize()",
    "alternativeName": "Ensure not explicitly invoking the finalize() method.",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61018,
            "name": "Efficiency - Memory, Network and Disk Space Management",
            "href": "AIP/technical-criteria/61018",
            "weight": 8
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-586",
            "name": "Explicit Call to Finalize()",
            "href": "AIP/quality-standards/CWE/items/CWE-586",
            "standard": "CWE"
        },
        {
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "href": "AIP/quality-standards/OWASP/items/M7-2016",
            "standard": "OWASP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
