{
    "id": 7648,
    "name": "Avoid calling finalize()",
    "href": "AIP/quality-rules/7648",
    "critical": false,
    "maxWeight": 4,
    "description": "Report all explicit call to finalize() except call to super.finalize() from a finalize() method.",
    "output": "The metric will list all methods that call a finalize method (filter by method signature void finalise() ) \n\nIt provides the following information:\n Method full name",
    "rationale": "Object.finalize() method are supposed to be invoked at most one time by the garbage collector on Objects which are no longer referenced. This method can be invoked by another thread in parallel. Explicit invocation of a finalizer ignores the current state of the object and does not change the state of the object from unfinalized or finalizable to finalized.",
    "reference": "https://cwe.mitre.org/data/definitions/586.html",
    "remediation": "If an explicit call to finalize method is required, there is two possible remediation: \n- if finalize method is used to release non-memory resources like file handles, sockets, database connections etc: you must not use this method to release these resources but create a specific method or release these resource in a finally block. Finalize() method is used only to release memory resources.\n- if it is used for memory resources, the Garbage collector will handle the invocation, so just remove the explicit call.",
    "remediationSample": "public class InvokeFinalize {\n    private MyClass mine = new MyClass();\n    ...\n    public meth () {\n       ... \n/ FIXED\n    }\n}",
    "sample": "public class MyClass  {\n     ...\n      protected void finalize() throws Throwable {\n          // some code here\n         ......\n          super.finalize();\n     }\n} \n\npublic class InvokeFinalize {\n    private MyClass mine = new MyClass();\n    ...\n    public meth () {\n       ...\n        mine.finalize();  // VIOLATION\n    }\n}",
    "total": "Number of calls to finalize methods",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61018,
            "name": "Efficiency - Memory, Network and Disk Space Management",
            "weight": 4,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-586",
            "name": "Explicit Call to Finalize()",
            "url": "https://cwe.mitre.org/data/definitions/586.html",
            "description": "The software makes an explicit call to the finalize() method from outside the finalizer."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
