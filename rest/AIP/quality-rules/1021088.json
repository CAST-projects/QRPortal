{
    "id": 1021088,
    "name": "Avoid uncontrolled sleep calls to prevent DoS attacks (Python)",
    "href": "AIP/quality-rules/1021088",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.python",
        "href": "AIP/extensions/com.castsoftware.python"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule reports calls to sleep functions that are vulnerable to DoS attacks.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software receives a user input, but it does not restrict or incorrectly restricts the input before it is used in the waiting duration value passed to a sleep function such as \"time.sleep()\".\nThis may enable an attacker to perform a denial-of-service attack (DoS) by injecting a too-large sleep time value.",
    "reference": "CWE-400: Uncontrolled Resource Consumption\nhttps://cwe.mitre.org/data/definitions/400.html",
    "remediation": "Assume all input is malicious. \nAvoid using inputs. If it is not possible, use an \"accept known good\" input validation strategy, i.e., use stringent allow-lists that limit the value set based on the expected value of the parameter in the request. Another option is to define a range of acceptable waiting durations, specifying both a maximum and minimum value. This will indirectly limit the scope of an attack.",
    "remediationSample": "import time\n\n# solution 1\nduration = get_waiting_duration() # tainted_source\nwaiting_time = {\n    \"short\": 1,\n    \"medium\": 3,\n    \"long\": 10,\n}\nseconds = waiting_time[duration]  # range of acceptable durations\ntime.sleep(seconds)\n\n\n# solution 2\nmax_waiting_time = 10\nmin_waiting_time = 1\nseconds = get_waiting_duration() # tainted_source\nseconds = min(seconds, max_waiting_time)  # establish upper limit\nseconds = max(seconds, min_waiting_time)  # establish lower limit\ntime.sleep(seconds)",
    "sample": "import time\n\nseconds = get_waiting_duration() # tainted_source\ntime.sleep(seconds)",
    "total": "Number of Python artifacts",
    "alternativeName": "Avoid uncontrolled sleep calls to prevent DoS attacks (Python)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066500,
            "name": "CWE-400 - Uncontrolled Resource Consumption",
            "href": "AIP/technical-criteria/1066500",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-400",
            "name": "Uncontrolled Resource Consumption",
            "href": "AIP/quality-standards/CWE/items/CWE-400",
            "standard": "CWE"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
