{
    "id": 7926,
    "name": "Abstract Classes should be non copy-assignable",
    "href": "AIP/quality-rules/7926",
    "critical": false,
    "maxWeight": 1,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for abstract C++ classes/structs that define at least one public copy assignment operator.",
    "output": "Associated to each C++ class and struct with violations, the Quality Rule provides:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code:\n  - Explicit public assignment operator or class if missing",
    "rationale": "The copy assignment operator lets you create a new object from an existing object through initialization. A copy assignment operator of a class A is a non-static, non-template member function that has one of the following forms: \n- 'A::operator=(A)' \n- 'A::operator=(A&) // This is the most common form' \n- 'A::operator=(const A&)' \n- 'A::operator=(volatile A&)' \n- 'A::operator=(const volatile A&)'\n\nIf you do not declare a copy assignment operator for a class A, the compiler will implicitly declare one for you which will be public.\n\nAssignment operators using pointers are also taken into account: \n- 'A::operator=(A*)'\n- 'A::operator=(const A*)'\n- 'A::operator=(volatile A*)'\n- 'A::operator=(const volatile A*)'\n\nThe problem with these assignments is that abstract classes are used to manipulate instances of concrete derived classes through a common interface. Which means that if you provide a user accessible assignment operator, you will end up:\n- Either doing partial assignment and only copying members from the base class\n- Or doing mixed-type assignment if you declared the 'operator=' as 'virtual', which is not recommended.\n\nBy ensuring that the copy assignment operator is protected, it can only be called by a derived class, for instance when the class wants to implement its own assignment operator. \n\nNote that most of the time, the concrete derived classes will not provide an assignment operator either, since they will be manipulated through pointers to their base classes, and an additional operation might not prove particularly useful.",
    "reference": "More Effective C++, Item 33 \nHigh Integrity C++, Rule 3.3.14",
    "remediation": "Make the operator protected and non-virtual. Create it if it is not present. Optionally define a non virtual version in the concrete classes.",
    "remediationSample": "class Vegetable \n{ \npublic: \n    virtual void f() = 0;\nprotected:\n    Vegetable& operator=(const Vegetable &); \n}; \n\nclass Carrot : public Vegetable \n{ \npublic: \n    Carrot& operator=( const Carrot& c); \nprivate:\n    double length;\n}; \n\nvoid foo() \n{ \n   Carrot carrot1, carrot2; \n   Broccoli broccoli1; \n   Vegetable* ptr1 = &carrot1; \n   Vegetable* ptr2 = &broccoli1; \n   *ptr1 = *ptr2; // Compilation error, which is a good thing \n   carrot2 = carrot1; // Ok\n}",
    "sample": "class Vegetable \n{ \npublic: \n    virtual void f() = 0;\n    /*virtual*/ Vegetable& operator=(const vegetable & v); // should have protected access \n}; \n\nclass Carrot : public Vegetable \n{ \nprivate:\n    double length;\n}; \n\nclass Broccoli : public Vegetable \n{ \nprivate:\n    int flowerHeadCount;\n}; \n\nvoid foo() \n{ \n   Carrot obj1; \n   Broccoli obj2; \n   Vegetable* ptr1 = &obj1; \n   Vegetable* ptr2 = &obj2; \n   *ptr1 = *ptr2; // problem: partial assignment or mixed type assignment \n}",
    "total": "Number of C++ Classes and Structs",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 1,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
