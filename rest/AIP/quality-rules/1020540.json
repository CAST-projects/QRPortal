{
    "id": 1020540,
    "name": "Avoid using $http success and error function",
    "href": "AIP/quality-rules/1020540",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule expects that when you're not using the $http methods success() and error().",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Ensure that each web service callback is going to be properly checked in order to make sure you will not miss any problem that occurred in your application and you will give the information to the user.",
    "reference": "CISQ OMG \nhttps://github.com/Gillespie59/eslint-plugin-angular/blob/master/docs/no-http-callback.md",
    "remediation": "Use then() or catch() instead of success() or error()",
    "remediationSample": "$http.get('api/data').then(function onSuccess() { \n  // ... \n  }, function onReject() { \n    // ... \n  });",
    "sample": "$http.get('api/data').success(function onSuccess() { \n    // ... \n}); // error: $http success is deprecated. Use then instead \n\n// invalid \n$http.get('api/data').error(function onReject() { \n    // ... \n}); // error: $http error is deprecated. Use then or catch instead",
    "total": "Number of angular services/factories using $http",
    "alternativeName": "Prefer using $http methods 'then' and 'catch' instead of 'success' and 'error' as the latter returns original promise when you chain off of them",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062148,
            "name": "ASCRM-CWE-396 - Declaration of Catch for Generic Exception",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062149,
            "name": "ASCRM-CWE-397 - Declaration of Throws for Generic Exception",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062155,
            "name": "ASCRM-RLB-1 - Empty Exception Block",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062180,
            "name": "ASCSM-CWE-396 - Declaration of Catch for Generic Exception",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "url": null,
            "description": "Objective\nAvoid failure to use dedicated exception types\n\nConsequence\nSoftware without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.\n\nMeasure Element\nNumber of instances where the named callable control element or method control element contains a catch unit which declares to catch an exception parameter whose data type is part of a list of overly broad exception data types\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-397",
            "name": "Declaration of Throws for Generic Exception",
            "url": null,
            "description": "Objective\nAvoid failure to use dedicated exception types\n\nConsequence\nSoftware without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.\n\nMeasure Element\nNumber of instances where the named callable control element or method control element throws an exception parameter whose data type is part of a list of overly broad exception data types\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-1",
            "name": "Empty Exception Block",
            "url": null,
            "description": "Objective\nAvoid improper responses to unusual and unexpected situations\n\nConsequence\nSoftware without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.\n\nMeasure Element\nNumber of instances where an exception handling block (such as Catch and Finally blocks) of the named callable and method control elements does not contain any other control element\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "url": null,
            "description": "Objective\nAvoid failure to use dedicated exception types\n\nConsequence\nSoftware unaware of accurate execution status control incurs the risk of bad data being used in operations, possibly leading to a crash or other unintended behaviors\n\nMeasure Element\nNumber of instances where the named callable control element or method control element contains a catch unit which declares to catch an exception parameter whose data type is part of a list of overly broad exception data types\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-395",
            "name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference",
            "url": "https://cwe.mitre.org/data/definitions/395.html",
            "description": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer."
        },
        {
            "standard": "CWE",
            "id": "CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "url": "https://cwe.mitre.org/data/definitions/396.html",
            "description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
