{
    "id": 1042026,
    "name": "Avoid Action Mapping based on wildcards with Struts 2.3.14.2 and older versions",
    "href": "AIP/quality-rules/1042026",
    "critical": true,
    "associatedValueName": "The number of violation occurrences",
    "description": "Struts 2 allows define action mapping base on wildcards, like in example below:\n\n<action name=\"*\" class=\"example.ExampleSupport\">\n    <result>/example/{1}.jsp</result>\n</action>\n\n\nIf a request doesn't match any other defined action, it will be matched by * and requested action name will be used to load JSP file base on the name of action. And as value of {1} is threaten as an OGNL expression, thus allow to execute arbitrary Java code on server side. This vulnerability is combination of two problems:\n\nrequested action name isn't escaped or checked agains whitelist\ndouble evaluation of an OGNL expression in TextParseUtil.translateVariables when combination of $ and % open chars is used.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",
    "reference": "https://cwe.mitre.org/data/definitions/917\nhttps://cwiki.apache.org/confluence/display/WW/S2-015\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2135\nhttp://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2134\n\nOWASP Top Ten 2017 Category A1 - Injection",
    "remediation": "It is strongly recommended to upgrade to Struts 2.3.14.3.\n\nif not possible, You should change the definition by setting up a new constant in struts.xml as below:\n\n<constant name=\"struts.allowed.action.names\" value=\"[a-zA-Z]*\" />",
    "remediationSample": "upgrade to Struts 2.3.14.3.",
    "sample": "<action name=\"MyAction_*\" class=\"MyActionClass\" method=\"{1}\">",
    "total": "Number of field in struts2 config XML file",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-917",
            "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
            "url": "https://cwe.mitre.org/data/definitions/917.html",
            "description": "The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A4-2013",
            "name": "Insecure Direct Object References",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References",
            "description": "A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data."
        },
        {
            "standard": "OWASP",
            "id": "A5-2017",
            "name": "Broken Access Control",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control",
            "description": "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users' accounts, view sensitive files, modify other users' data, change access rights, etc."
        },
        {
            "standard": "OWASP",
            "id": "A9-2013",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts."
        },
        {
            "standard": "OWASP",
            "id": "A9-2017",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
