{
    "id": 7264,
    "name": "Avoid namespaces with High Afferent Coupling (CA)",
    "href": "AIP/quality-rules/7264",
    "critical": false,
    "maxWeight": 4,
    "associatedValueName": "Afferent Coupling",
    "description": "Afferent Coupling (also known as Incoming Dependencies and Number of Types outside a namespace that Depend on Types of the namespace) indicates The number of other namespaces that depend upon classes within the analyzed namespace. Afferent Coupling is a time consuming determination of couplings between namespaces, hence showing which namespaces that depend upon each other. The number of namespaces that depend upon the analyzed namespace is an indication of the analyzed namespace's level of responsibility. In order to improve modularity and promote encapsulation, inter-object class couples should be kept to a minimum. If the namespace is relatively abstract then a large number of incoming dependencies is acceptable but the larger the number of couples, the higher the sensitivity to changes in other parts of the design, and therefore maintenance is difficult. Excessive coupling between concrete object classes is detrimental to modular design and prevents reuse.\nA namespace will always be counted as one entity for coupling, even if it contains both C# and VB code.",
    "rationale": "If a namespace is highly abstract then it should be very stable.  If the namespace is highly concrete (un-abstract), then it would be acceptably unstable as it already has reached its maximum specialization. If a category is to be stable, it should also consist of abstract classes so that it can be extended. Stable categories that are extensible are flexible and do not constrain the design.",
    "total": "Number of namespaces",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61013,
            "name": "Architecture - Object-level Dependencies",
            "weight": 4,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "AIP/technologies/141901"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-11",
            "name": "Callable and Method Control Element Excessive Cyclomatic Complexity Value",
            "url": null,
            "description": "Objective\nAvoid overly complex control flow\n\nConsequence\nSoftware that does not follow the principles of structured programming degrades comprehensibility\n\nMeasure Element\nNumber of instances where a named callable control element or method control element has a control flow with a Cyclomatic Complexity number that exceeds a threshold value. Default threshold value for Cyclomatic Complexity is 20\n\n"
        }
    ],
    "parameters": [
        {
            "name": "CA",
            "description": "CA max value",
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        15
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
