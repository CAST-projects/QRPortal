{
    "id": 628,
    "name": "Avoid invocation of virtual Methods of the declared Class in a Constructor or Destructor",
    "href": "AIP/quality-rules/628",
    "critical": true,
    "associatedValueName": "Virtual class method invoked",
    "description": "This rule searches for virtual functions of a class called from within the constructor or destructor of this class.",
    "output": "Associated to each C++ Constructor/Destructor with violations, the Quality Rule provides:\n- Virtual member function name\n- Bookmarks for violation occurrences found in the source code:\n  - Virtual member function call",
    "rationale": "Invoking virtual functions in a constructor/destructor always invokes the function for the class under construction/destruction, even when the constructor is invoked as part of the construction of a derived Class. This behavior is not often what was expected.",
    "reference": "Effective C++ (Scott Meyers): \"Item 9: Never call virtual functions during construction or destruction\":http://www.artima.com/cppsource/nevercall.html\nC++ coding standard (Sutter/Alexandrescu): \"Item 49\":http://www.gotw.ca/publications/c++cs.htm",
    "remediation": "If you want virtual function call behavior at construction time, it must be done post construction. Several idioms exist to help you do that, however none of them are perfect (\"C++ coding standards\":http://www.gotw.ca/publications/c++cs.htm details some options).",
    "remediationSample": "class Mother \n{\npublic:\n    template <class T>\n    shared_ptr<T> create()\n    {\n        shared_ptr<T> result = make_shared<T>();\n        result->display();\n        return result;\n    }\nprotected:\n    Mother() { } // It is now protected, to prevent direct creation\nprivate:\n    virtual void display() { cout << \"Mother function call\\n\"; }\n};\n\nclass Child : public Mother \n{\nprotected:\n    Child() { } // It is now protected, to prevent direct creation\nprivate:\n    virtual void display() { cout << \"Child function call\\n\";}\n};",
    "sample": "class Mother \n{\npublic:\n    Mother() { display(); }\nprivate:\n    virtual void display() { cout << \"Mother function call\\n\"; }\n};\n\nclass Child : public Mother \n{\nprivate:\n    virtual void display() { cout << \"Child function call\\n\";}\n};\n\n\nint main()\n{\n    Child child; // will display \"Mother function call\"\n}",
    "total": "Number of Constructors and Destructors.",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
