{
    "id": 628,
    "name": "Avoid invocation of virtual Methods of the declared Class in a Constructor or Destructor",
    "href": "AIP/quality-rules/628",
    "critical": true,
    "maxWeight": 8,
    "associatedValueName": "Virtual class method invoked",
    "description": "This rule searches for virtual functions of a class called from within the constructor or destructor of this class.",
    "output": "Associated to each C++ Constructor/Destructor with violations, the Quality Rule provides:\n- Virtual member function name\n- Bookmarks for violation occurrences found in the source code:\n  - Virtual member function call",
    "rationale": "Invoking virtual functions in a constructor/destructor always invokes the function for the class under construction/destruction, even when the constructor is invoked as part of the construction of a derived Class. This behavior is not often what was expected.",
    "reference": "Effective C++ (Scott Meyers): \"Item 9: Never call virtual functions during construction or destruction\":http://www.artima.com/cppsource/nevercall.html\nC++ coding standard (Sutter/Alexandrescu): \"Item 49\":http://www.gotw.ca/publications/c++cs.htm",
    "remediation": "If you want virtual function call behavior at construction time, it must be done post construction. Several idioms exist to help you do that, however none of them are perfect (\"C++ coding standards\":http://www.gotw.ca/publications/c++cs.htm details some options).",
    "remediationSample": "class Mother \n{\npublic:\n    template <class T>\n    shared_ptr<T> create()\n    {\n        shared_ptr<T> result = make_shared<T>();\n        result->display();\n        return result;\n    }\nprotected:\n    Mother() { } // It is now protected, to prevent direct creation\nprivate:\n    virtual void display() { cout << \"Mother function call\\n\"; }\n};\n\nclass Child : public Mother \n{\nprotected:\n    Child() { } // It is now protected, to prevent direct creation\nprivate:\n    virtual void display() { cout << \"Child function call\\n\";}\n};",
    "sample": "class Mother \n{\npublic:\n    Mother() { display(); }\nprivate:\n    virtual void display() { cout << \"Mother function call\\n\"; }\n};\n\nclass Child : public Mother \n{\nprivate:\n    virtual void display() { cout << \"Child function call\\n\";}\n};\n\n\nint main()\n{\n    Child child; // will display \"Mother function call\"\n}",
    "total": "Number of Constructors and Destructors.",
    "alternativeName": "Avoid invocation of virtual Methods of the declared Class in a Constructor or Destructor",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "href": "AIP/technical-criteria/61003",
            "weight": 8
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
