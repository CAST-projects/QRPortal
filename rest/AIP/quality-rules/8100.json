{
    "id": 8100,
    "name": "Blocking synchronous calls should have associated timeouts",
    "href": "AIP/quality-rules/8100",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "This quality rule reports synchronous call that don't use timeout to prevent an infinite waiting time.\n\nHere is the list of control that are performed:\n- Socket : java.net.Socket.connect(SocketAddress endpoint) or connect(SocketAddress endpoint, int 0)\n- Future: a Future represents the result of an asynchronous computation: java.util.concurrent.Future<V>.get() \n- JMS: All call to methods that implement javax.jms.MessageConsumer.receive() or javax.jms.MessageConsumer.receive(0)",
    "output": "List all artifacts that call a blocking method without timeout\nIt provides the following information: \n - Artifact full name",
    "rationale": "Blocking calls can result in system failure if the called process fails. If the timeout is infinite that may cause the application to hang forever. Operations on the standard input/output streams depend directly on other processes outside of the Java VM. If they decide to block forever, so will reads/writes to these streams in the application.",
    "reference": "ASCRM 1.0, Automated Source Code Reliability Measure, Object Management Group.\nhttp://satishgopal.wordpress.com/2011/04/24/ejb-3-1-asynchronous-methods/\nhttp://docs.oracle.com/javaee/1.3/jms/tutorial/1_3_1-fcs/doc/client.html\nhttp://stackoverflow.com/questions/1164301/how-do-i-call-some-blocking-method-with-a-timeout-in-java",
    "remediation": "For Socket\nYou should use call connect(SocketAddress endpoint, int timeout) instead of calling java.net.Socket.connect(SocketAddress endpoint) or connect(SocketAddress endpoint, int 0)\nTrue for child classes too\n\nFor Future : As remediation, you should use java.util.concurrent.Future<V>.get(long timeout, TimeUnit unit) for all classes that implement the interface such as java.util.concurrent.FutureTask<V>, java.util.concurrent.ForkJoinTask<V> ... and all classes that implement a sub-interface of Future<V>.\n\nFor JMS: You should call javax.jms.MessageConsumer.receive(long timeout) instead of calling methods that implement javax.jms.MessageConsumer.receive() or javax.jms.MessageConsumer.receive(0)",
    "remediationSample": "public static boolean pingHost(String host, int port, int timeout) {\n  try (Socket socket = new Socket()) {\n    socket.connect(new InetSocketAddress(host, port), timeout);\n    return true;\n  } catch (IOException e) {\n    return false; // Either timeout or unreachable or failed DNS lookup.\n  }\n}\n\n--------------------------------------------------------------------------\n\nimport java.util.concurrent.*;\nimport java.util.*;\n\nclass SimpleThreadPool{\n public static void main(String args[])throws Exception{\n  \n                List<Future<String>> l1 = new ArrayList<Future<String>> ();\n  ExecutorService exec = new ThreadPoolExecutor(3, 3, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());\n   CallableTask tasks[] =new CallableTask[5];\n   for(int i=0; i<5; i++){\n    tasks[i] = new CallableTask(\"task\" + i);\n    Future<String> future = exec.submit(tasks[i]);\n                                l1.add(future);\n                                try{\n                                    System.out.println(future.get(100,TimeUnit.MILLISECONDS));\n                                }\n                                catch(TimeoutException e){\n                                       System.out.println(e); \n                                        }\n   }\n\n--------------------------------------------------------------------------------------------------------\n\npublic void testChangeMutableObjectInObjectMessageThenRollback() throws Exception {\n  ArrayList<String> list = new ArrayList<String>();\n  list.add(\"First\");\n  Message outbound = session.createObjectMessage(list);\n  outbound.setStringProperty(\"foo\", \"abc\");\n  beginTx();\n  producer.send(outbound);\n  commitTx();\n  LOG.info(\"About to consume message 1\");\n  beginTx();\n  Message message = consumer.receive(5000);",
    "sample": "FOR SOCKET:\n\nvoid TKO() throws IOException, InterruptedException\n    {\n        SocketAddress me = new InetSocketAddress(\"127.0.0.1\", SERVER_PORT);\n        Socket s = new Socket();\n        s.connect(me,0);\n        OutputStream os = s.getOutputStream();\n        os.write(\"CONNECT \\n\\n\".getBytes());\n        os.flush();\n        os.close();\n        Thread.sleep(50);\n    }\n\n-----------------------------------------------------------------------------\nFOR FUTURE:\n\nFutureTask futureTask_1 = new FutureTask(new CallableCalculater(0, MAX_NUMBER / 2, DIVISOR));\ntaskList.add(futureTask_1);\nexecutor.execute(futureTask_1);\n  \nFutureTask futureTask_2 = new FutureTask(new CallableCalculater(MAX_NUMBER / 2 + 1, MAX_NUMBER, 3));\ntaskList.add(futureTask_2);\nexecutor.execute(futureTask_2);\n------------------------------------------------------------------------------\n\nFOR JMS:\n\npublic void receiveAndRespondWithMessageIdAsCorrelationId(ConnectionFactory connectionFactory, String queueName) throws JMSException {\n    Connection connection = connectionFactory.createConnection();\n    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n    MessageConsumer consumer = session.createConsumer(session.createQueue(queueName));\n    final javax.jms.Message inMessage = consumer.receive();",
    "total": "Number of Java Artifacts that call a blocking method",
    "alternativeName": "Ensure setting timeouts for blocking synchronous calls to prevent an infinite waiting time",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062165,
            "name": "ASCRM-RLB-19 - Synchronous Call Time-Out Absence",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061139,
            "name": "CWE-1088: Synchronous Access of Remote Resource without Timeout",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061096,
            "name": "CWE-821: Incorrect Synchronization",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61018,
            "name": "Efficiency - Memory, Network and Disk Space Management",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-19",
            "name": "Synchronous Call Time-Out Absence",
            "url": null,
            "description": "Objective\nAvoid synchronous remote resource access without handling time-out capabilities\n\nConsequence\nSoftware featuring blocking calls to remote systems incurs the risk of own failure when the remote systems fails to process the call correctly.\n\nMeasure Element\nNumber of instances where a synchronous call instruction is initiated but the time-out argument is not set or is set to infinite time\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-821",
            "name": "Incorrect Synchronization",
            "url": "https://cwe.mitre.org/data/definitions/821.html",
            "description": "The software utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource."
        },
        {
            "standard": "CWE",
            "id": "CWE-1088",
            "name": "Synchronous Access of Remote Resource without Timeout",
            "url": "https://cwe.mitre.org/data/definitions/1088.html",
            "description": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-821",
            "name": "Incorrect Synchronization",
            "url": "https://cwe.mitre.org/data/definitions/821.html",
            "description": "The software utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-1088",
            "name": "Synchronous Access of Remote Resource without Timeout",
            "url": "https://cwe.mitre.org/data/definitions/1088.html",
            "description": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-821",
            "name": "Incorrect Synchronization",
            "url": "https://cwe.mitre.org/data/definitions/821.html",
            "description": "The software utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1088",
            "name": "Synchronous Access of Remote Resource without Timeout",
            "url": "https://cwe.mitre.org/data/definitions/1088.html",
            "description": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
