{
    "id": 1050026,
    "name": "Avoid using non thread-safe Objective-C singleton pattern",
    "href": "AIP/quality-rules/1050026",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "Singleton objects should use a thread-safe pattern for creating their shared instance.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "If singleton is invoked in a multi-threaded program, you could end up creating multiple instances of the class which will make the application unstable.",
    "reference": "https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Singleton.html#//apple_ref/doc/uid/TP40008195-CH49-SW1",
    "remediation": "Make sure that [[[self class] alloc] init] is done into a dispatch thread.",
    "remediationSample": "+ (instancetype)sharedInstance {\n    static id sharedInstance = nil;\n\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedInstance = [[[self class] alloc] init];\n    });\n\n    return sharedInstance;\n}",
    "sample": "+ (instancetype)sharedInstance {\n    static id sharedInstance = nil;\n\n    sharedInstance = [[[self class] alloc] init];\n\n    return sharedInstance;\n}",
    "total": "Number of Objective-C artifacts",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "AIP/technologies/1050001"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-12",
            "name": "Singleton Class Instance Creation without Proper Lock Element Management",
            "url": null,
            "description": "Objective\nAvoid incorrect implementation of singleton patterns caused by improperly-locked instantiations\n\nConsequence\nSoftware deployed in multi-thread environments that does not protect their state can experience deadlock or livelock\n\nMeasure Element\nNumber of instances where a singleton class element, (that is, a class element that can be used only once in the 'to' association of a \u2018Create\u2019 action) is instantiated with the \u2018Creates\u2019 action element without any prior locking mechanism activation\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-543",
            "name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
            "url": "https://cwe.mitre.org/data/definitions/543.html",
            "description": "The software uses the singleton pattern when creating a resource within a multithreaded environment."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
