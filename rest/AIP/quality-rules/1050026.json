{
    "id": 1050026,
    "name": "Avoid using non thread-safe Objective-C singleton pattern",
    "href": "AIP/quality-rules/1050026",
    "critical": true,
    "description": "Singleton objects should use a thread-safe pattern for creating their shared instance. This rule is compliant with CISQ-OMG ASCRM-RLB-12 recommendation.",
    "output": "It provides the following information:\nObject full name, number of violations",
    "rationale": "If singleton is invoked in a multi-threaded program, you could end up creating multiple instances of the class which will make the application unstable.",
    "reference": "https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Singleton.html#//apple_ref/doc/uid/TP40008195-CH49-SW1",
    "remediation": "Make sure that [[[self class] alloc] init] is done into a dispatch thread.",
    "remediationSample": "+ (instancetype)sharedInstance {\n    static id sharedInstance = nil;\n\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedInstance = [[[self class] alloc] init];\n    });\n\n    return sharedInstance;\n}",
    "sample": "+ (instancetype)sharedInstance {\n    static id sharedInstance = nil;\n\n    sharedInstance = [[[self class] alloc] init];\n\n    return sharedInstance;\n}",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "AIP/technologies/1050001"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-HA-INTERNAL",
            "name": "HA - internal failure mitigation",
            "url": "",
            "description": "Quality rules related to the presence of occurrences of structural coding patterns that are known to cause functional failures"
        },
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-12",
            "name": "Improper locking of singleton classes",
            "url": null,
            "description": "Remove instances where a singleton class is instantiated without any prior locking mechanism being activated"
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ]
}
