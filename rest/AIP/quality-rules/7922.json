{
    "id": 7922,
    "name": "Avoid usage of 'std::find_first_of'",
    "href": "AIP/quality-rules/7922",
    "critical": false,
    "maxWeight": 4,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for C++ functions using the 'std::find_first_of' algorithm.",
    "output": "Associated to each C++ constructor, destructor, and method with violations, the Quality Rule provides:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in source code:\n  - Call to 'std::find_first_of'",
    "rationale": "This algorithm is designed to be used in a case where you search for a limited number of candidates in a large set of data. If N is the set of searched elements and M the scope of elements to search, the time complexity of the method is 'O(N*M)'.\n\nIf the number of candidates becomes large, other methods exist whose complexity is 'O(N*log(M))' or even 'O(N)'. They use an associative container to store the list of possible candidates.\n\nIf the data type can only have a very limited number of values (such as 'char'), you can have another alternative with a bit set describing the values you are searching for. This is what a function tailored to 'char' might do (for instance, the C 'strpbrk' function).",
    "reference": "\"Jim Xochellis: find_first_of: A performance pitfall among the STL algorithms\":http://www.codeproject.com/KB/stl/find_first_of.aspx",
    "remediation": "Depending on the situation, you can either: \n- Use 'std::find_first_of' if you find yourself in the kind of situation for which it was designed\n- Use an ad-hoc specialization for small types, such as the one described in the reference\n- Use an alternative with 'std::set' \n- Use an alternative with 'std::unordered_set' or another hash set implementation",
    "remediationSample": "See reference article.",
    "sample": "See reference article.",
    "total": "Number of C++ constructors, destructors, and methods",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61018,
            "name": "Efficiency - Memory, Network and Disk Space Management",
            "weight": 4,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
