{
    "id": 1025056,
    "name": "Avoid running SQL queries inside a loop",
    "href": "AIP/quality-rules/1025056",
    "critical": true,
    "severity": 30,
    "maxWeight": 7,
    "extension": {
        "name": "com.castsoftware.securityanalyzer",
        "href": "AIP/extensions/com.castsoftware.securityanalyzer"
    },
    "associatedValueName": "Call stack from the database query down to the embedded loop",
    "description": "The analyzer detects SQL queries inside a loop (inter-procedural search at depth 2).\nThe considered loops are loops like for / while / do-while / enhanced for.\nThe considered SQL queries are actions on the database like ExecuteQuery, ExecuteScalar, etc.\n\nThis rule focuses on JEE and .Net embedded SQL. It expands dramatically the scope of persistence libraries addressed by the legacy rule 7424 - Avoid using SQL in loops.\nIt covers JDBC, JPA, Hibernate, EclipseLink, OpenJPA, ADO.NET, Dapper, NHibernate, Spring Data JDBC, Spring Data JPA, Entity Framework and more.\nHowever, some libraries are not yet covered: LINQ to SQL/Entities.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences from the database query to the embedded loop",
    "rationale": "Running SQL queries inside a loop is considered a bad practice due to performance inefficiencies and increased strain on the database server. Each iteration of the loop initiates a separate query execution, leading to a high volume of database requests that can degrade system performance, increase network traffic, and potentially cause resource contention. This approach significantly impacts the overall efficiency and scalability of the application, especially when dealing with large datasets or frequent iterations.",
    "reference": "CWE-1050: Excessive Platform Resource Consumption within a Loop\nhttps://cwe.mitre.org/data/definitions/1050.html\n\nOMG ASCPEM ASCPEM-PRF-8\nhttps://www.omg.org/spec/ASCPEM/1.0/PDF  page 31",
    "remediation": "It is generally possible to remediate this issue, using more complex SQL queries, like using JOIN  or using subqueries to retrieve some information that are used in the global SQL query.",
    "remediationSample": "using System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string[] userIds = { \"user1\", \"user2\", \"user3\" };\n        string connectionString = \"Your_DB_Connection_String\";\n\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            string query = $\"SELECT * FROM Users WHERE UserID IN ('{string.Join(\"','\", userIds)}')\";\n            SqlCommand command = new SqlCommand(query, connection);\n            SqlDataReader reader = command.ExecuteReader();\n\n            while (reader.Read())\n            {\n                // Process the retrieved data\n                Console.WriteLine($\"User ID: {reader[\"UserID\"]}, Name: {reader[\"Name\"]}\");\n            }\n\n            reader.Close();\n            connection.Close();\n        }\n    }\n}",
    "sample": "using System;\nusing System.Data.SqlClient;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        string[] userIds = { \"user1\", \"user2\", \"user3\" };\n        string connectionString = \"Your_DB_Connection_String\";\n\n        using (var connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n\n            foreach (var userId in userIds)\n            {\n                string query = $\"SELECT * FROM Users WHERE UserID = '{userId}'\";\n                SqlCommand command = new SqlCommand(query, connection);\n                SqlDataReader reader = command.ExecuteReader();\n\n                while (reader.Read())\n                {\n                    // Process the retrieved data\n                    Console.WriteLine($\"User ID: {reader[\"UserID\"]}, Name: {reader[\"Name\"]}\");\n                }\n\n                reader.Close();\n            }\n\n            connection.Close();\n        }\n    }\n}",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure you don't have SQL queries inside loops",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1062200,
            "name": "MIPS-Reduction-Index",
            "href": "AIP/business-criteria/1062200"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062143,
            "name": "ASCPEM-PRF-8 - Control Elements Requiring Significant Resource Element within Control Flow Loop Block",
            "href": "AIP/technical-criteria/1062143",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061113,
            "name": "CWE-1050 - Excessive Platform Resource Consumption within a Loop",
            "href": "AIP/technical-criteria/1061113",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1067150,
            "name": "CWE-1050 - Excessive Platform Resource Consumption within a Loop",
            "href": "AIP/technical-criteria/1067150",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops",
            "href": "AIP/technical-criteria/66068",
            "weight": 7,
            "critical": true
        },
        {
            "id": 1062202,
            "name": "MIPS-Reduction - focus on data access efficiency",
            "href": "AIP/technical-criteria/1062202",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "AIP-CWE-1050",
            "name": "Excessive Platform Resource Consumption within a Loop",
            "href": "AIP/quality-standards/AIP-STRUCTURAL-FLAW/items/AIP-CWE-1050",
            "standard": "AIP-STRUCTURAL-FLAW"
        },
        {
            "id": "ASCPEM-PRF-8",
            "name": "Control Elements Requiring Significant Resource Element within Control Flow Loop Block",
            "href": "AIP/quality-standards/CISQ/items/ASCPEM-PRF-8",
            "standard": "CISQ"
        },
        {
            "id": "CWE-1050",
            "name": "Excessive Platform Resource Consumption within a Loop",
            "href": "AIP/quality-standards/CWE/items/CWE-1050",
            "standard": "CWE"
        },
        {
            "id": "CWE-1050",
            "name": "Excessive Platform Resource Consumption within a Loop",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-1050",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-1050",
            "name": "Excessive Platform Resource Consumption within a Loop",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-1050",
            "standard": "OMG-ASCQM"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
