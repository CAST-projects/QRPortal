{
    "id": 1034004,
    "name": "Avoid LDAP injection (PHP)",
    "href": "AIP/quality-rules/1034004",
    "critical": false,
    "severity": 10,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.php.security",
        "href": "AIP/extensions/com.castsoftware.php.security"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric uses Psalm data-flow engine to detect a call path where input data from the user is sent to LDAP without prior validation and sanitization.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.\n\nIf LDAP requests like these are used for login purposes, it could result in an authentication bypass. An attacker could write a filter that would evaluate to true for any user, and thus bruteforce credentials easily.",
    "reference": "CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\nhttps://cwe.mitre.org/data/definitions/90.html\n\nOpen Web Application Security Project (OWASP) \nOWASP Top Ten 2017 Category A1:2017-Injection\nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection\n\nOWASP Top Ten 2021 Category A03:2021 - Injection\nhttps://owasp.org/Top10/A03_2021-Injection/",
    "remediation": "Use ldap_escape to escape user input to the LDAP filter and DN.",
    "remediationSample": "<?php\n\n$ds = ldap_connect('example.com');\n$dn = 'o=Psalm, c=US';\n$filter = $_GET['filter'];\n$filter = ldap_escape($filter);      // ESCAPE STRING\nldap_search($ds, $dn, $filter, []);  // FIXED",
    "sample": "<?php\n\n$ds = ldap_connect('example.com');\n$dn = 'o=Psalm, c=US';\n$filter = $_GET['filter']);\nldap_search($ds, $dn, $filter, []);  // VIOLATION",
    "total": "Number of PHP artifacts",
    "alternativeName": "Ensure you sanitize LDAP requests constructed from user input",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-90",
            "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-90",
            "standard": "CWE"
        },
        {
            "id": "CWE-90",
            "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-90",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-90",
            "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-90",
            "standard": "OMG-ASCQM"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
