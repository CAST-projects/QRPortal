{
    "id": 1021094,
    "name": "Avoid cross-site scripting (persistent) (Python)",
    "href": "AIP/quality-rules/1021094",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.python",
        "href": "AIP/extensions/com.castsoftware.python"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "The software does not neutralize or incorrectly neutralizes user-controllable input, read from a database, before it is placed in a web page that is served to other users.\n\nThe application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. \n\nThis metric detects paths from database read methods to HTML response of supported frameworks which are open vulnerabilities to Stored cross-site scripting injection (XSS - Type 2).\nSupported frameworks are: FastAPI, Flask.",
    "output": "List all methods that make resource calls forged by database content\n\nAssociated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences of input source",
    "rationale": "User Input Data entering a web application through an untrusted source and resulting for executing of untrusted code.\nOnly when the untrusted source is a database or any other back-end datastore.\n\nOnce the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\"\n\nIn many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.",
    "reference": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nhttps://cwe.mitre.org/data/definitions/79.html\n\nOpen Web Application Security Project (OWASP)\nhttps://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\n\nCISQ rule: ASCSM-CWE-79.\n\nCross Site Scripting Prevention Cheat Sheet\nhttps://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html",
    "remediation": "Depending on the context: use the framework's sanitization methods, markupsafe module, or html.escape(), use the framework's recommended way of sending JSON and HTML (Jinja template with default escaping).",
    "remediationSample": "...\n\napp = FastAPI()\ntemplates = Jinja2Templates(directory=\"templates\")\n\ndb = mysql.connector.connect(...)\n\n@app.get(\"/movies\")\ndef func(request: Request):\n    cursor = db.cursor()\n\n\n    records = cursor.execute(\"select * from posts\").fetchall()\n\n    # sanitize the response using a template that escapes HTML tags\n    return templates.TemplateResponse(\"posts.html\", {\"request\": request, \"posts\": records})",
    "sample": "...\n\napp = FastAPI()\ndb = mysql.connector.connect(...)\n\n@app.get(\"/movies\")\ndef func():\n    cursor = db.cursor()\n\n    # if records can be edited by users and contain dangerous HTML fragments\n    records = cursor.execute(\"select * from posts\").fetchall()\n\n    return Response(content=\"<h1>Posts</h1><div>%s</div>\" % records)  # violation",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure you don't use user input without validation",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066179,
            "name": "CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/technical-criteria/1066179",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062303,
            "name": "OWASP-2013-A3 - Cross-Site Scripting (XSS)",
            "href": "AIP/technical-criteria/1062303",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062327,
            "name": "OWASP-2017-A7 - Cross-Site Scripting (XSS)",
            "href": "AIP/technical-criteria/1062327",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062343,
            "name": "OWASP-2021-A03 - Injection",
            "href": "AIP/technical-criteria/1062343",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063121,
            "name": "PCI-Requirement-6.5.7 - Cross-site scripting (XSS)",
            "href": "AIP/technical-criteria/1063121",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCSM-CWE-79",
            "name": "Cross-site Scripting Improper Input Neutralization",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-79",
            "standard": "CISQ"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/CWE/items/CWE-79",
            "standard": "CWE"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-79",
            "standard": "ISO-5055"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-10",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "CWE-79",
            "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-79",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "A3-2013",
            "name": "Cross-Site Scripting (XSS)",
            "href": "AIP/quality-standards/OWASP/items/A3-2013",
            "standard": "OWASP"
        },
        {
            "id": "A7-2017",
            "name": "Cross-Site Scripting (XSS)",
            "href": "AIP/quality-standards/OWASP/items/A7-2017",
            "standard": "OWASP"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.7",
            "name": "Cross-site scripting (XSS)",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.7",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.7",
            "name": "Cross-site scripting (XSS)",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.7",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "STIG-V-222602",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222602",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
