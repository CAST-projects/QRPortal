{
    "id": 1039070,
    "name": "Avoid using URL.equals(Object obj) or URL.hashCode()",
    "href": "AIP/quality-rules/1039070",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "extension": {
        "name": "com.castsoftware.jeerules",
        "href": "AIP/extensions/com.castsoftware.jeerules"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "The  java.net.URL class's behavior was designed to model a URL being a locator of network accessible resource . Specifically equals and hashCode() were designed so that two URL instances are equal if they locate the same resource. This requires that the DNS name be resolved to an IP address.\n\nThe equals and hashCode methods may trigger a name service (usually DNS) lookup to resolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. \n\n\nThis rule checks for uses  java.net.URL class, and for explicit references to the equals and hashCode methods.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The implementation of equals() and hashcode() calls a naming service(DNS) to resolve the IP address. This may take a lot of time and causes a dependency on network connection.\n\nIt is inconsistent and may give different results with or without a network connection and takes long time to execute. The implementation is known to be incompatible with virtual hosting and should not be used.",
    "reference": "https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6810437\nhttp://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html",
    "remediation": "Use java.net.URI instead of java.net.URL",
    "remediationSample": "Remediation for Sample 1\n\npublic class Main {\n  public static void main(String[] argv) throws Exception {\n    URL relativeURL, baseURL;\n    baseURL = new URL(\"http://www.yourserver.com/\");\n    relativeURL = new URL(baseURL, \"./a.htm\");\n    URI.uri1 = relativeURL.toURI();\n    URI.uri2 = relativeURL.toURI();\n    System.out.println(uri1.equals(uri2));\n\n  }\n}\n\n--------------------------------------------------------------------------\nRemediation for Sample 2\n\npublic void setOfCompleteURL(URL url) {\n  Set<URL> urlSet = new HashSet<URL>  \n\n  URI MyPATHPage = new URI(\"http://www.javarules.com:8080/path/fileName.htm\");  \n  URI uri = url.toURI();\n  if (MyPATHPage.equals(uri)) {  \n    ...\n  }\n}\n----------------------------------------------------------------------------\nRemediation for Sample 3\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\npublic class Main {\n  public static void main(String[] args) throws NullPointerException, URISyntaxException {\n    URI uri = new URI(\"http://www.castsoftware.com\");\n    System.out.println(\"URI      : \" + uri);\n    System.out.println(uri.hashCode());\n  }\n}",
    "sample": "Sample 1\npublic class Main {\n  public static void main(String[] argv) throws Exception {\n    URL relativeURL, baseURL;\n    baseURL = new URL(\"http://www.yourserver.com/\");\n    relativeURL = new URL(baseURL, \"./a.htm\");\n    System.out.println(relativeURL.equals(baseURL)); \n\n  }\n}\n-------------------------------------------------------------------------\nSample 2\n\npublic void setOfCompleteURL(URL url) {\n    \n  Set<URL> urlSet = new HashSet<URL>();\n\n  URL MyPATHPage = new URL(\"http://www.javarules.com:8080/path/fileName.htm\"); \n  if (MyPATHPage.equals(url)) {  \n    ...\n  }\n}\n____________________________________________________________________________\nSample 3\n\nimport java.io.IOException;\nimport java.net.URL;\npublic class Main {\n\n  public static void main(String[] args) {\n    try {\n      URL url = new URL(\"http://www.castsoftware.com\");\n      System.out.println(\"URL is \" + url.hashCode());\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n}",
    "total": "Number of Java Methods",
    "alternativeName": "Prefer using java.net.URI instead of java.net.URL",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066500,
            "name": "CWE-400 - Uncontrolled Resource Consumption",
            "href": "AIP/technical-criteria/1066500",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063120,
            "name": "PCI-Requirement-6.5.6 - All high risk vulnerabilities",
            "href": "AIP/technical-criteria/1063120",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "href": "AIP/technical-criteria/66065",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-400",
            "name": "Uncontrolled Resource Consumption",
            "href": "AIP/quality-standards/CWE/items/CWE-400",
            "standard": "CWE"
        },
        {
            "id": "NIST-SC-5",
            "name": "Denial-of-service Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SC-5",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SC-5",
            "name": "Denial-of-service Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SC-5",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
