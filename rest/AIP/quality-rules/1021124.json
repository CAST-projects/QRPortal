{
    "id": 1021124,
    "name": "Avoid uncontrolled format string (Python)",
    "href": "AIP/quality-rules/1021124",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.python",
        "href": "AIP/extensions/com.castsoftware.python"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric detects execution paths from user inputs down to format string manipulation methods and operations that open vulnerabilities to uncontrolled format string flaw.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The programmer rarely intends for a format string to be user-controlled at all. This weakness is frequently introduced in code that constructs log messages, where a constant format string is omitted.\nIn cases such as localization and internationalization, the language-specific message repositories could be an avenue for exploitation, but the format string issue would be resultant, since attacker control of those repositories would also allow modification of message length, format, and content.\nAs a consequence, format string problems allow for information disclosure which can severely simplify exploitation of the program.",
    "reference": "CWE-134: Use of Externally-Controlled Format String\nhttps://cwe.mitre.org/data/definitions/134.html\n\nhttps://lucumr.pocoo.org/2016/12/29/careful-with-str-format/\n\nhttps://realpython.com/python-string-formatting/#which-string-formatting-method-should-you-use",
    "remediation": "As a best practice try to rewrite the code so that format-strings are not built with user-input data. Otherwise, use Template Strings or authorized sanitization methods.",
    "remediationSample": "user_info = {\"name\": \"John\", \"secret\": \"1234\"}\npasswd = input(\"Password: \")\n\nif not passwd == user_info[\"secret\"]:\n    message = \"Password [%s] is wrong for user %s\"\n    print(message % (passwd, user_info[\"name\"]))      # FIXED: the user-input has been moved out from the format-string",
    "sample": "user_info = {\"name\": \"John\", \"secret\": \"1234\"}\npasswd = input(\"Password: \")    # Unsaniticed input such as \"{secret}\" will leak the password\n\nif not passwd == user_info[\"secret\"]:\n    message = \"Password [\" + passwd + \"] is wrong for user %(name)s\"\n    print(message % user_info)  # VIOLATION",
    "total": "Number of Python artifacts",
    "alternativeName": "Ensure when you use a function that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062176,
            "name": "ASCSM-CWE-134 - Format String Improper Input Neutralization",
            "href": "AIP/technical-criteria/1062176",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061028,
            "name": "CWE-134 - Use of Externally-Controlled Format String",
            "href": "AIP/technical-criteria/1061028",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1066234,
            "name": "CWE-134 - Use of Externally-Controlled Format String",
            "href": "AIP/technical-criteria/1066234",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCSM-CWE-134",
            "name": "Format String Improper Input Neutralization",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-134",
            "standard": "CISQ"
        },
        {
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "href": "AIP/quality-standards/CWE/items/CWE-134",
            "standard": "CWE"
        },
        {
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-134",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-134",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/quality-standards/PCI-DSS4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
