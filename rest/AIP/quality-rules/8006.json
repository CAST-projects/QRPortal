{
    "id": 8006,
    "type": "quality-rule",
    "name": "Avoid Classes with a copy Constructor and the default Destructor or assignment operator",
    "href": "AIP/quality-rules/8006",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for classes which implement a copy constructor but which let the compiler generate a default version for the destructor or the assignment operator (operator=).",
    "output": "Associated to each C++ class with violations, the Quality Rule provides:\n- The number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - copy constructor",
    "rationale": "If you need a copy constructor, you also need a destructor and operator=. If you need a copy constructor, it's because you need something like a deep copy, or some other management of resources. Thus it is almost certain that you will need a destructor and assignment operator. \n\nIf you don't need a copy constructor (because the default-generated copy constructor would be correct), you should let the compiler generate it: it will not contain bugs, and you will often not have to update it when the class is modified.",
    "reference": "\"C++ Notes: OOP: Copy Constructors\":http://www.fredosaurus.com/notes-cpp/oop-condestructors/copyconstructors.html",
    "remediation": "Prevent default generation of the destructor and assignment operator:\n- Provide your own version\n- Or declare it private without implementing it to prevent the operation (for assignment operator)",
    "total": "Number of C++ classes",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ]
}
