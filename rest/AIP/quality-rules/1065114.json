{
    "id": 1065114,
    "name": "Avoid lines starting with \"#\" with invalid pre-processing directive",
    "href": "AIP/quality-rules/1065114",
    "critical": false,
    "severity": 10,
    "maxWeight": 3,
    "extension": {
        "name": "com.castsoftware.cpp",
        "href": "AIP/extensions/com.castsoftware.cpp"
    },
    "description": "The rule will raise a violation when a line starting with \"#\" has a malformed or syntactically incorrect pre-processing directive",
    "output": "Information will be provided on:\n1. Files where violation has occurred\n2. Bookmarks for violation occurrences found in the source code",
    "rationale": "When a section of source code is excluded by preprocessor directives, the content of each excluded statement is ignored until a #else, #elif or #endif directive is encountered (depending on the context). If one of these excluded directives is badly formed, it may be ignored without warning by a compiler with unexpected consequences.\nThe requirement of this rule is that all preprocessor directives shall be syntactically valid even\nwhen they occur within an excluded block of code.\n\nIn particular, ensure that #else and #endif directives are not followed by any characters other than\nwhite-space. Compilers are not always consistent in enforcing this requirement.",
    "reference": "MISRA C++ 2008, 16-0-8: If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token.\n\nAUTOSAR, C++, 2014, Rule M16-0-8: If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token.",
    "remediation": "Ensure that a pre-processing token follows the #else, #elif or #endif directives.\nMake sure they are syntactically correct.",
    "remediationSample": "#define AAA 2\nint32_t foo(void)\n{\nint32_t x = 0;\n...\n#ifndef AAA\nx = 1;\n#else // Compliant\nx = AAA;\n#endif\n...\nreturn x;\n}",
    "sample": "#define AAA 2\nint32_t foo(void)\n{\nint32_t x = 0;\n...\n#ifndef AAA\nx = 1;\n#else1 // Non-compliant\nx = AAA;\n#endif\n...\nreturn x;\n}",
    "total": "Number of C/C++ Files",
    "alternativeName": "Avoid lines starting with \"#\" with invalid pre-processing directive",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 3,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "AUTOSAR-CPP-2014-Preprocessing-Directives",
            "name": "Preprocessing Directives",
            "href": "AIP/quality-standards/C-CPP/items/AUTOSAR-CPP-2014-Preprocessing-Directives",
            "standard": "C-CPP"
        },
        {
            "id": "MISRA-CPP-2008-Preprocessing-Directives",
            "name": "Preprocessing Directives",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-CPP-2008-Preprocessing-Directives",
            "standard": "C-CPP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
