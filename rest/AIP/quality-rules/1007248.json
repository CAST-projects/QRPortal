{
    "id": 1007248,
    "name": "Use sufficient SSL\\TLS context (PHP)",
    "href": "AIP/quality-rules/1007248",
    "critical": false,
    "maxWeight": 5,
    "description": "This rule detects the insufficient\\absence of SSL\\TLS context or use of http protocol while getting URL contents.",
    "output": "This report lists all artifacts that use http protocol or https protocol while getting URL contents.\nThis QR provides the following information:\nArtifact Full Name",
    "rationale": "Not using correct SSL\\TLS context exposes application to \"Man in the middle\" attack.",
    "reference": "https://cwe.mitre.org/data/slices/311.html",
    "remediation": "Use https protocol with sufficient SSL\\TLS context.",
    "remediationSample": "<?php\n\n$url = 'https://www.example.com';\n$req = curl_init($url);\ncurl_setopt($req, CURLOPT_RETURNTRANSFER, TRUE);\n$result = curl_exec($req);\n\n\n$contextOptions = array(\n    'ssl' => array(\n        'verify_peer'   => true,\n        'cafile'        => '/etc/ssl/certs/ca-certificates.crt',\n        'verify_depth'  => 5,\n        'CN_match'      => 'api.twitter.com',\n        'disable_compression' => true,\n        'SNI_enabled'         => true,\n        'ciphers'             => 'ALL!EXPORT!EXPORT40!EXPORT56!aNULL!LOW!RC4'\n    )\n);\n$sslContext = stream_context_create($contextOptions);\n$result = file_get_contents('https://api.twitter.com/1/statuses/public_timeline.json', NULL, $sslContext);\n\n?>",
    "sample": "<?php\n\nfile_get_contents('http://www.example.com');\n\nfile_get_contents('https://api.twitter.com/1/statuses/public_timeline.json');\n\n?>",
    "total": "Number of Artifacts",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66066,
            "name": "Secure Coding - Encapsulation",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-311",
            "name": "Missing Encryption of Sensitive Data",
            "url": "https://cwe.mitre.org/data/definitions/311.html",
            "description": "The software does not encrypt sensitive or critical information before storage or transmission."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69551",
            "name": "Service-Oriented Applications handling non-releasable data must authenticate endpoint devices via mutual SSL/TLS.",
            "url": null,
            "description": "Without identifying devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nOne way SSL/TLS authentication is the typical form of  authentication done between a web browser client and a web server. The client requests the server certificate to validate the server's identity and establish a secure connection.\n\nWhen SSL/TLS mutual authentication is used, the server is configured to request the client\u2019s certificate as well so the server can also identify the client. This form of authentication is normally chosen for system to system communications that leverage HTTP as the transport.\n\nIt should be noted that SSL is being deprecated and replaced with TLS.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.\n\nThis requirement applies to applications that connect either locally, remotely, or through a network to an endpoint device (including but not limited to: workstations, printers, servers (outside a datacenter), VoIP Phones, VTC CODECs). Gateways and SOA applications are examples of where this requirement would apply."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70249",
            "name": "The application must maintain the confidentiality and integrity of information during preparation for transmission.",
            "url": null,
            "description": "Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing)."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70251",
            "name": "The application must maintain the confidentiality and integrity of information during reception.",
            "url": null,
            "description": "Data is subject to manipulation and other integrity related attacks whenever that data is transferred across a network. To protect data integrity during transmission, the application must implement mechanisms to ensure the integrity of all transmitted information. All transmitted information means that the protections are not restricted to just the data itself. Protection mechanisms must be extended to include data labels, security parameters or metadata if data protection requirements specify. Modern web application data transfer methods can be complex and are not necessarily just point-to-point in nature. Service-Oriented Architecture (SOA) and RESTFUL web services allow for XML-based application data to be transmitted in a manner similar to network traffic wherein the application data is transmitted along multiple servers' hops. In such cases, point-to-point protection methods like TLS or SSL may not be the best choice for ensuring data integrity and alternative data integrity protection methods like XML Integrity Signature protections where the XML payload itself is signed may be required as part of the application design. Overall application design and architecture must always be taken into account when establishing data integrity protection mechanisms. Custom-developed solutions that provide a file transfer capability should implement data integrity checks for incoming and outgoing files. Transmitted information requires mechanisms to ensure the data integrity (e.g., digital signatures, SSL, TLS, or cryptographic hashing)."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
