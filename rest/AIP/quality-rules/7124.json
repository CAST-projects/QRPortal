{
    "id": 7124,
    "name": "Functional Evolvability",
    "href": "AIP/quality-rules/7124",
    "critical": false,
    "maxWeight": null,
    "associatedValueName": "Associated Value",
    "description": "Functional Evolvability measures how much the existing structure taken as whole is filled up with logic (technical and business logic).\nFunctional Evolvability is computed the following way: Functional Evolvability = ( 100 x Number of Functional Paths / Maximum Number of Functional Paths) Where : Number of Functional Paths = Sum of Cyclomatic Complexity of all the Artifacts of the module, Maximum Number of Functional Paths = Number of Artifacts * High Cyclomatic Complexity Threshold",
    "output": "Associated to each module with violations, the Quality Rule provides: \n- The Functional Evolvability",
    "rationale": "Functional Evolvability measures the capability of a software structure to support changes and addition of new functional rules within the existing code structure without threatening the testability and the stability.\nAbove a threshold of 70%, an application becomes usually very difficult to test and stabilize without changes or extension of the existing structure of the software.",
    "reference": "CAST Consulting\n\nCarnegie Mellon's Software Engineering Institute on Cyclomatic Complexity\nhttp://www.sei.cmu.edu/str/descriptions/cyclomatic_body.html\n\nNIST (National Institute of Standards and Technology)\nStructured Testing: A Testing Methodology Using the Cyclomatic Complexity Metric\nhttp://hissa.nist.gov/HHRFdata/Artifacts/ITLdoc/235/sttoc.htm",
    "total": "The number of modules of the application.",
    "businessCriteria": [
        
    ],
    "technicalCriteria": [
        
    ],
    "technologies": [
        {
            "id": 0,
            "name": "ALL TECHNOLOGIES",
            "href": "AIP/technologies/0"
        }
    ],
    "qualityStandards": [
        
    ]
}
