{
    "id": 1027010,
    "name": "Avoid weak encryption providing sufficient key size (.NET)",
    "href": "AIP/quality-rules/1027010",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Number of violation occurrences",
    "description": "When generating cryptograpic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force attacks. For the RSA algorithm the key should be at least 2048 bits long.\nThis rule raises an issue when a RSA key-pair generator is initialized with too small a length parameter.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Rather than directly attacking crypto, attackers steal keys, execute man-in-the-middle attacks, or steal clear text data off the server, while in transit, or from the user\u2019s client, e.g. browser. A manual attack is generally required. Previously retrieved password databases could be brute forced by Graphics Processing Units (GPUs). \n\nOver the last few years, this has been the most common impactful attack. The most common flaw is simply not encrypting sensitive data. When crypto is employed, weak key generation and management, and weak algorithm, protocol and cipher usage is common, particularly for weak password hashing storage techniques. For data in transit, server side weaknesses are mainly easy to detect, but hard for data at rest. \n\nFailure frequently compromises all data that should have been protected. Typically, this information includes sensitive personal information (PII) data such as health records, credentials, personal data, and credit cards, which often require protection as defined by laws or regulations such as the EU GDPR or local privacy laws.",
    "reference": "MITRE, CWE-326 - Inadequate Encryption Strength\nOWASP Top 10 2017 Category A3 - Sensitive Data Exposure\n\nhttps://www.keylength.com/en/5/",
    "remediation": "Review the source code and have longer Cryptographic keys",
    "remediationSample": "using System;\nusing System.Security.Cryptography;\n\nnamespace MyCASTNamepace\n{\n    public class MyCASTClass\n    {\n        static void Main()\n        {\n            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider(2048);\n            // ...\n            DSACryptoServiceProvider DSA = new DSACryptoServiceProvider(2048);\n            // ...\n        }\n    }",
    "sample": "using System;\nusing System.Security.Cryptography;\n\nnamespace MyCASTApplication\n{\n    public class MyCASTClass\n    {\n        static void Main()\n        {\n            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider(1024); // Noncompliant\n            // ...\n            DSACryptoServiceProvider DSA = new DSACryptoServiceProvider(1024); // Noncompliant\n            // ...\n        }\n    }\n}",
    "total": "Number of Methods using CryptoEncryption",
    "alternativeName": "Avoid weak encryption providing not sufficient key size (.NET)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-327",
            "name": "Broken or Risky Cryptographic Algorithm Usage",
            "url": null,
            "description": "Objective\nAvoid failure to use vetted cryptographic libraries\n\nConsequence\nSoftware using broken or risky cryptographic algorithm incurs the risk of sensitive data being compromised\n\nMeasure Element\nNumber of instances where the application uses the cryptographic deployed component which is not part of the list of vetted cryptographic deployed components.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-326",
            "name": "Inadequate Encryption Strength",
            "url": "https://cwe.mitre.org/data/definitions/326.html",
            "description": "The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SC-12",
            "name": "Cryptographic Key Establishment and Management",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SC-12",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "M5-2016",
            "name": "Insufficient Cryptography",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M5-Insufficient_Cryptography",
            "description": "In order to exploit this weakness, an adversary must successfully return encrypted code or sensitive data to its original unencrypted form due to weak encryption algorithms or flaws within the encryption process."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "url": null,
            "description": "Use strong cryptography and security protocols (for example, TLS, IPSEC, SSH, etc.) to safeguard sensitive cardholder data during transmission over open, public networks, including the following:\n- Only trusted keys and certificates are accepted.\n- The protocol in use only supports secure versions or configurations.\n- The encryption strength is appropriate for the encryption methodology in use.\nNote: SSL and early TLS are not considered strong cryptography and cannot be used as a security control after June 30, 2016. Prior to this date, existing implementations that use SSL and/or early TLS must have a formal Risk Mitigation and Migration Plan in place.\nEffective immediately, new implementations must not use SSL or early TLS.\nPOS POI terminals (and the SSL/TLS termination points to which they connect) that can be verified as not being susceptible to any known exploits for SSL and early TLS may continue using these as a security control after June 30, 2016.\nExamples of open, public networks include but are not limited to:\n- The Internet\n- Wireless technologies, including 802.11 and Bluetooth\n- Cellular technologies, for example, Global System for Mobile communications (GSM), Code division multiple access (CDMA)\n- General Packet Radio Service (GPRS)\n- Satellite communications"
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70245",
            "name": "The application must protect the confidentiality and integrity of transmitted information.",
            "url": null,
            "description": "Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.\n\nThis requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nApplication and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.\n \nWhen transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.\n\nCommunication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
