{
    "id": 1065040,
    "name": "Avoid anonymous namespaces in header files (C++)",
    "href": "AIP/quality-rules/1065040",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "description": "This rule will raise a violation if there are anonymous namespaces in the header file.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "An anonymous namespace will be unique within each translation unit. Any declarations appearing in an anonymous namespace in a header will refer to different entities in each translation unit, which may not be consistent with developer expectations.\n\nProduction quality C++ code uses header files to share code between translation units through #include directive. If an anonymous namespace is defined then each translation unit will define its own instance of the unnamed namespace. This may cause:\nUnexpected behavior, undefined behavior and may bloat the resulting executable",
    "reference": "Standards Reference\nMISRA C++ 2008, 7-3-3: There shall be no unnamed namespaces in header files",
    "remediation": "Namespaces in header files should always be named.",
    "sample": "// Header.hpp\nnamespace // Non-compliant\n{\nextern int32_t x;\n}\n\n// File1.cpp\n#include \"Header.hpp\"\nnamespace\n{\nint32_t x;\n}\nvoid fn_a ( void )\n{\nx = 24;\n}\n// File2.cpp\n#include \"Header.hpp\"\nnamespace\n{\nint32_t x;\n}\nvoid fn_b ( void )\n{\nfn_a ( );\nif ( x == 24 ) // This x will not have been initialized.\n{\n}\n}",
    "total": "Number of C++ files",
    "alternativeName": "Make sure to not use unnamed namespaces in header files so that results are as expected",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
            "href": "AIP/technical-criteria/61020",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "AUTOSAR-CPP-2014-Declarations",
            "name": "Declarations",
            "href": "AIP/quality-standards/C-CPP/items/AUTOSAR-CPP-2014-Declarations",
            "standard": "C-CPP"
        },
        {
            "id": "MISRA-CPP-2008-Declarations",
            "name": "Declarations",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-CPP-2008-Declarations",
            "standard": "C-CPP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
