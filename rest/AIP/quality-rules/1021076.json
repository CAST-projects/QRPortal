{
    "id": 1021076,
    "name": "Avoid mutable default parameter values",
    "href": "AIP/quality-rules/1021076",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will raise a violation when defining a function or method with a mutable object as a default parameter value.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "In Python default parameter values in function and method definitions are evaluated only once during the module loading. When using a mutable object as a default parameter value (for a example, an empty list), every call to the function can potentially change the state of that object (adding new elements) that will persist in the next call. Indeed, this is a common way to keep a cache when calling functions several times.\n\nHowever this can be also seen as a quirk of the language design that results in surprising behavior. This is particularly true for the less seasoned Python developers. Thus it is recommended to avoid using mutable objects as default parameter values.",
    "reference": "B. Slatkin, \u201cEffective Python\u201d (Pearson Education 2015) p. 48 (\u201cItem 20: Use None and Docstrings to Specify Dynamic Default Arguments\u201d)\nhttps://docs.python.org/3/reference/compound_stmts.html#function\nhttps://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument\nhttps://stackoverflow.com/questions/9158294/good-uses-for-mutable-function-argument-default-values\nhttps://docs.python-guide.org/writing/gotchas/",
    "remediation": "Generally one can achieve the same or eventually correct results by using `None` as default value and initializing (if needed) the corresponding parameter variable to the mutable object inside the function/method code block. If the parameter is used as a cache, depending on the context, more complex constructions might be required.",
    "remediationSample": ">>> def foo(a=None):\n...    if a is None:\n...        a = []\n...    a.append(5)\n...    print(a)\n\n>>> foo()\n[5]\n>>> foo()\n[5]",
    "sample": ">>> def foo(a=[]):\n...    a.append(5)\n...    print(a)\n\n>>> foo()\n[5]\n>>> foo()    # the result here is most likely unexpected\n[5, 5]\n>>> foo()\n[5, 5, 5]",
    "total": "Number of Python artifacts",
    "alternativeName": "Avoid mutable default parameter values",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
