{
    "id": 7932,
    "name": "Avoid Constructors not supplying an initial value for all non-static data members",
    "href": "AIP/quality-rules/7932",
    "critical": false,
    "maxWeight": 1,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for C++ class constructors that do not initialize all class members defined with a scalar type or that are pointers.  \n\nInitializations can be created in the constructor declaration or in the constructor body.\n\nClass members that are not taken into account are:\n- Class instances\n- Defined with a non-scalar type",
    "output": "Associated to each C++ constructor with violations, the Quality Rule provides:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code:\n  - Class member with a scalar type and not initialized",
    "rationale": "Each constructor must initialize members defined with a scalar type or that are pointers in order to reduce the risk of an invalid state after successful construction and to ease the understanding of the code. \n\nNot initializing scalar members and pointers can lead to unexpected behavior.",
    "reference": "Effective C++, Item 12\nIndustrial Strength C++ 5.5",
    "remediation": "Initialize scalar-typed members in constructor header.",
    "remediationSample": "// Remediation \nclass C\n{\n  public:\n     C() : m_i(0) { }\n  protected:\n     int m_i;\n}",
    "sample": "class C\n{\n  public:\n     C() {  }; // VIOLATION: m_i is not initialized\n  protected:\n     int m_i;\n}",
    "total": "Number of C++ constructors",
    "alternativeName": "(undefined)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 1,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-456",
            "name": "Storable and Member Data Element Missing Initialization",
            "url": null,
            "description": "Objective\nAvoid failure to explicitly initialize software data elements in use\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances where a storable data element or member data element is declared by the \u2018Create\u2019 action, then is evaluated in a \u2018Read\u2019 action without ever being initialized by a \u2018Write\u2019 action prior to the evaluation\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-456",
            "name": "Storable and Member Data Element Missing Initialization",
            "url": null,
            "description": "Objective\nAvoid failure to explicitly initialize software data elements in use\n\nConsequence\nSoftware featuring weak initialization practices incurs the risk of logic errors within the program, possibly leading to a security problem\n\nMeasure Element\nNumber of instances where a storable data element or member data element is declared by the \u2018Create\u2019 action, then is evaluated in a \u2018Read\u2019 action without ever being initialized by a \u2018Write\u2019 action prior to the evaluation\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-456",
            "name": "Missing Initialization of a Variable",
            "url": "https://cwe.mitre.org/data/definitions/456.html",
            "description": "The software does not initialize critical variables, which causes the execution environment to use unexpected values."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
