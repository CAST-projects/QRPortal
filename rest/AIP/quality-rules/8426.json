{
    "id": 8426,
    "name": "Avoid calling database commands directly using system functions as \"C_DB_EXECUTE\" and \"C_DB_FUNCTION\"",
    "href": "AIP/quality-rules/8426",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The system functions \u201cC_DB_EXECUTE\u201d and \u201cC_DB_FUNCTION\u201d are are used to call for database commands directly.\n\nIn this rule, we are reporting violation when using one of the following function, when their parameter containing the SQL statement is declared with a PARAMETERS statement, as they can be sources of SQL injections: C_DB_EXECUTE or C_DB_FUNCTION",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "By exploiting a SQL injection vulnerability, an attacker can get access to business-critical information or system data. Moreover, a denial of service attack can be performed by executing a complicated SQL statement. For example, a perpetrator can pass a query, which will search for a certain pattern through all the records in the database (via a LIKE statement). This query will take a long time to run and, at the same time, will significantly increase the server load, thus blocking access to the application for legitimate users.",
    "reference": "https://dzone.com/articles/sap-sql-injections",
    "remediation": "Avoid Using all of these functions\n\nIf it is not possible, filter user input via special methods QUOTE_STR and QUOTE of the CL_ABAP_DYN_PRG class. In ABAP, strings are usually enclosed with backticks (\u2018) and char arrays are usually enclosed in single quotation marks (\u2018). Use different methods of CL_ABAP_DYN_PRG depending on the type of enclosing symbol: use QUOTE_STR with backticks and QUOTE with single quotation marks.",
    "sample": "PARAMETERS STMT(65535) TYPE C.\nCALL 'C_DB_EXECUTE'\n    ID 'STATLEN' FIELD LN\n    ID 'STATTXT' FIELD STMT\n    ID 'SQLERR' FIELD SQL_CODE\n    ID 'ERRTXT' FIELD SQL_MSG\n    ID 'ROWNUM' FIELD ROW_NUM.\n\nThe field 'STATTXT' contains a SQL statement. The variable STMT is declared as a parameter and transmitted to this field. Therefore, an attacker can pass a specially crafted SQL statement to the variable STMT and reach the malicious goals by executing it.\n\n---------------------------------------------------\nPARAMETERS lv_stmt TYPE c LENGTH 80.\nCALL 'C_DB_FUNCTION' ID 'FUNCTION' FIELD 'DB_SQL'\n ID 'FCODE' FIELD 'PO'\n ID 'STMT_STR' FIELD lv_stmt\n ...\n\nThe field 'STMT_STR' contains a SQL statement. The variable lv_stmtis declared as a parameter and transmitted to this field. Therefore, an attacker can pass a specially crafted SQL statement to the variable lv_stmt and reach the malicious goals by executing it.",
    "total": "Number of ABAP Artifacts",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        }
    ],
    "qualityStandards": [
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
