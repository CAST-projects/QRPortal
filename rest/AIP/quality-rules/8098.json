{
    "id": 8098,
    "name": "Avoid uncontrolled format string",
    "href": "AIP/quality-rules/8098",
    "critical": true,
    "associatedValueName": "Call stack from user input source down to the string format method",
    "description": "Using CAST data flow engine, this metric detects execution paths from user input methods down to format string manipulation methods which open vulnerabilities to uncontrolled format string flaw.",
    "output": "List all methods that miss calling the required input validation calls \n\nIt provides the following information: \n - Method full name \n - Call stack from user input source down to the string format method.",
    "rationale": "The programmer rarely intends for a format string to be user-controlled at all. This weakness is frequently introduced in code that constructs log messages, where a constant format string is omitted.\nIn cases such as localization and internationalization, the language-specific message repositories could be an avenue for exploitation, but the format string issue would be resultant, since attacker control of those repositories would also allow modification of message length, format, and content.\nAs a consequence, format string problems allow for information disclosure which can severely simplify exploitation of the program.",
    "reference": "ASCSM 1.0, Automated Source Code Security Measure, Object Management Group. \nCWE-134: http://cwe.mitre.org/data/definitions/134.html",
    "remediation": "Use authorized sanitization methods.",
    "remediationSample": "Review all inputs.\nDon't use inputs in formatters.",
    "sample": "public class FormatterCase {\n    FormatterCase() {}\n \n    public void printStreamFormat(String val) throws SQLException {\n        PrintStream ps = new PrintStream(new FileOutputStream(FileDescriptor.out));\n        // format a string\n        ps.printf(val, \"Hello\");// VIOLATION\n        // flush the stream\n        ps.flush();\n    }\n}\n\npublic class PrintWithReqFormat {\n        FormatterCase formatter = FormatterCase();\n \n        PrintReq() {}\n \n        public void execute(ServletRequest req) throws Exception {\n               String format = req.getParameter(\"format\");\n               formatter.printStreamFormat(format);\n       }\n}",
    "total": "Number of methods calling user input methods",
    "alternativeName": "(undefined)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-134",
            "name": "Format String Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to sanitize user input in use in formatting operations\n\nConsequence\nSoftware that is unaware of formatting control incurs the risk of execution of arbitrary code and the risk of information disclosure which can severely simplify exploitation of the software\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the formating statement; none of the callable or method control element of the transformation sequence being a vetted sanitization control element from the list of vetted sanitization control elements.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "url": "https://cwe.mitre.org/data/definitions/134.html",
            "description": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        90.0,
        95.0,
        99.0,
        100.0
    ]
}
