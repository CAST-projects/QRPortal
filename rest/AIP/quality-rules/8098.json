{
    "id": 8098,
    "name": "Avoid uncontrolled format string",
    "href": "AIP/quality-rules/8098",
    "critical": true,
    "severity": 30,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.securityanalyzer",
        "href": "AIP/extensions/com.castsoftware.securityanalyzer"
    },
    "associatedValueName": "Call stack from user input source down to the string format method",
    "description": "This quality rule detects vulnerabilities where user-controlled input is directly passed to format string functions without proper validation or sanitization. Using CAST data flow engine, this quality rule identifies execution paths from user input methods down to format string manipulation methods (such as printf, String.format, MessageFormat.format, etc.).",
    "output": "List all methods that make resource calls forged by user input\n\nIt provides the following information: \n - Method full name \n - Call stack from user input source down to the string format method.",
    "rationale": "The main security risk is the denial of Service: malicious format strings can trigger unexpected exceptions or infinite loops in the formatting logic.",
    "reference": "CWE-134: Use of Externally-Controlled Format String\nhttps://cwe.mitre.org/data/definitions/134.html",
    "remediation": "To prevent uncontrolled format string vulnerabilities:\n-Use Static Format Strings: always use predefined, static format strings rather than dynamic ones constructed from user input.\n-Parameterized Formatting: pass user data as arguments to the formatting function, not as the format string itself.\n-Alternative APIs: consider using safer alternatives like simple string concatenation or template engines that don't interpret format specifiers.",
    "remediationSample": "// ----------------------------------------------------------------------------\n// 1) Java sample\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.Date;\n\npublic class LoggingService {\n  private static final Logger logger = LoggerFactory.getLogger(LoggingService.class);\n\n  public static void logUserAction_secure(String userMessage) {\n    // SECURE: Static format string with user data as parameter\n    System.out.printf(\"User message: %s%n\", userMessage);\n\n    // SECURE: Predefined format with user data as argument\n    logger.info(\"User action logged: {} at {}\", userMessage, new Date());\n\n    // SECURE: Simple concatenation for basic cases\n    System.out.println(\"User input: \" + userMessage);\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    var message = args[0];\n    LoggingService.logUserAction_unsecure(message);\n    LoggingService.logUserAction_secure(message);\n  }\n}\n\n\n// ----------------------------------------------------------------------------\n// 2) C# sample\n\npublic class ReportGenerator\n{\n  public static void GenerateReport_unsecure(string userFormat, string data)\n  {\n    // VIOLATION: User-controlled format string\n    string result = string.Format(userFormat, data);\n    Console.WriteLine(result);\n\n    // VIOLATION: Direct user input to formatting method\n    Console.WriteLine(userFormat, \"sensitive\", \"information\");\n  }\n}\n\ninternal class Program\n{\n  static void Main(string[] args)\n  {\n    var userFormat = args[0];\n    var data = File.ReadAllText(@\"c:\\output\\file.txt\");\n    ReportGenerator.GenerateReport_secure(userFormat, data);\n  }\n}",
    "sample": "// ----------------------------------------------------------------------------\n// 1) Java sample\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.Date;\n\npublic class LoggingService {\n  private static final Logger logger = LoggerFactory.getLogger(LoggingService.class);\n\n  public static void logUserAction_unsecure(String userMessage) {\n    // VIOLATION: User input used directly as format string\n    System.out.printf(userMessage);\n\n    // VIOLATION: User input in logging format string\n    logger.info(String.format(userMessage, \"additional\", \"data\"));\n  }\n}\n\n\npublic class Main {\n  public static void main(String[] args) {\n    var message = args[0];\n    LoggingService.logUserAction_unsecure(message);\n  }\n}\n\n\n// ----------------------------------------------------------------------------\n// 2) C# sample\n\npublic class ReportGenerator\n{\n  public static void GenerateReport_unsecure(string userFormat, string data)\n  {\n    // VIOLATION: User-controlled format string\n    string result = string.Format(userFormat, data);\n    Console.WriteLine(result);\n\n    // VIOLATION: Direct user input to formatting method\n    Console.WriteLine(userFormat, \"sensitive\", \"information\");\n  }\n}\n\ninternal class Program\n{\n  static void Main(string[] args)\n  {\n    var userFormat = args[0];\n    var data = File.ReadAllText(@\"c:\\output\\file.txt\");\n    ReportGenerator.GenerateReport_unsecure(userFormat, data);\n  }\n}",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure when you use a function that accepts a format string as an argument, the argument has been sanitized when it originates from an external source.",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062176,
            "name": "ASCSM-CWE-134 - Format String Improper Input Neutralization",
            "href": "AIP/technical-criteria/1062176",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061028,
            "name": "CWE-134 - Use of Externally-Controlled Format String",
            "href": "AIP/technical-criteria/1061028",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1066234,
            "name": "CWE-134 - Use of Externally-Controlled Format String",
            "href": "AIP/technical-criteria/1066234",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062301,
            "name": "OWASP-2013-A1 - Injection",
            "href": "AIP/technical-criteria/1062301",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062321,
            "name": "OWASP-2017-A1 - Injection",
            "href": "AIP/technical-criteria/1062321",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062343,
            "name": "OWASP-2021-A03 - Injection",
            "href": "AIP/technical-criteria/1062343",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCSM-CWE-134",
            "name": "Format String Improper Input Neutralization",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-134",
            "standard": "CISQ"
        },
        {
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "href": "AIP/quality-standards/CWE/items/CWE-134",
            "standard": "CWE"
        },
        {
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-134",
            "standard": "ISO-5055"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-10",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-134",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "A1-2013",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2013",
            "standard": "OWASP"
        },
        {
            "id": "A1-2017",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2017",
            "standard": "OWASP"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "API10-2023",
            "name": "Unsafe Consumption of APIs",
            "href": "AIP/quality-standards/OWASP/items/API10-2023",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        },
        {
            "id": "STIG-V-222604",
            "name": "The application must protect from command injection.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222604",
            "standard": "STIG-V5"
        },
        {
            "id": "STIG-V-222604",
            "name": "The application must protect from command injection.",
            "href": "AIP/quality-standards/STIG-V6/items/STIG-V-222604",
            "standard": "STIG-V6"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        90.0,
        95.0,
        99.0,
        100.0
    ]
}
