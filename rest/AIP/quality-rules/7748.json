{
    "id": 7748,
    "name": "Avoid OS command injection vulnerabilities",
    "href": "AIP/quality-rules/7748",
    "critical": true,
    "associatedValueName": "Call stack from user input source down to the target OS command execution method",
    "description": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nUsing CAST data-flow engine, this metric detects paths from user input methods down to system call API methods, paths which are open vulnerabilities to operating system injection flaws.",
    "output": "List all methods that miss calling the required input validation calls\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target OS command execution method.",
    "rationale": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\nThis could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications.",
    "reference": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nhttps://cwe.mitre.org/data/definitions/78.html\n\nOpen Web Application Security Project (OWASP) \nhttps://www.owasp.org/index.php/Top_10_2007\n\nCISQ rule: ASCSM-CWE-078.",
    "remediation": "Assume all input is malicious. \nAvoid using inputs. If it is not possible, use an \"accept known good\" input validation strategy, i.e., use stringent white-lists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack.",
    "remediationSample": "Sample 1:\npublic String coordinateTransformLatLonToUTM(String coordinates)\n{\nString utmCoords = null;\ntry {\nString latlonCoords = coordinates;\nRuntime rt = Runtime.getRuntime();\n//insert a validation code for rt\nProcess exec = rt.exec(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\n// process results of coordinate transform \n\n// ... \n}\ncatch(Exception e) {...}\nreturn utmCoords;\n}\n\n\nSample 2:\nString script = System.getProperty(\"SCRIPTNAME\");\n//Insert a validation code\nif (script != null)\nSystem.exec(script);",
    "sample": "Sample 1:\npublic String coordinateTransformLatLonToUTM(String coordinates)\n{\nString utmCoords = null;\ntry {\nString latlonCoords = coordinates;\nRuntime rt = Runtime.getRuntime();\nProcess exec = rt.exec(\"cmd.exe /C latlon2utm.exe -\" + latlonCoords);\n// process results of coordinate transform \n\n// ... \n}\ncatch(Exception e) {...}\nreturn utmCoords;\n}\n\nSample 2:\nString script = System.getProperty(\"SCRIPTNAME\");\nif (script != null)\nSystem.exec(script);",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Avoid OS command injection vulnerabilities",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-78",
            "name": "OS Command Injection Improper Input Neutralization",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-78",
            "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-88",
            "name": "Argument Injection or Modification",
            "url": null,
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": null,
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-78",
            "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
            "url": null,
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-88",
            "name": "Argument Injection or Modification",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70261",
            "name": "The application must protect from command injection.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
