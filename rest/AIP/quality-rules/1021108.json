{
    "id": 1021108,
    "name": "Avoid unsafe access to object attributes",
    "href": "AIP/quality-rules/1021108",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.python",
        "href": "AIP/extensions/com.castsoftware.python"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule detects unsafe accesses to object attributes.\n\nIn particular, it detects call paths to the common attribute access functions \"getattr()\", \"setattr()\", \"hasattr()\", and \"delattr()\" with non-validated user input data. It also detects unsafe read-accesses to attributes via \"object.__dir__\".",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Unsafe access to object attributes in Python can allow an attacker to access unauthorized information, to modify maliciously internal data, or expose the system to a disruption of service (resulting in DEP (Data Execution Prevention) breaches and application shutdown).",
    "reference": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')\nhttps://cwe.mitre.org/data/definitions/470.html\n\nCWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes\nhttps://cwe.mitre.org/data/definitions/915.html",
    "remediation": "Assume all input is malicious. \nAvoid using inputs. If it is not possible, use an \"accept known good\" input validation strategy, i.e., use stringent white-lists that limit the value set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack.",
    "remediationSample": "class UserInfo:\n    def __init__(self, username, password):\n        self.info = {\n            \"username\" : username,\n        }\n        self._password = password  # conventionally \"protected\" attribute\n\n    def get_info(self, field_name):\n        # access to user info is restricted by limiting allowed fields into a dictionary\n        return self.info.get(field_name, \"User info not found\")\n\nuser = UserInfo(\"Alice\", \"secret123\")\n\n# user input\nuser_input = sys.argv[1]          # assume a malicious entry \"_password\" ..\n\nprint(user.get_info(user_input))  # .. this would print \"User info not found\"",
    "sample": "class UserInfo:\n    def __init__(self, username, password):\n        self.username = username\n        self._password = password  # conventionally \"protected\" attribute\n\n    def get_info(self, attribute_name):\n        # unsafe attribute access based on user input\n        return getattr(self, attribute_name, \"Attribute not found\")\n\nuser = UserInfo(\"Alice\", \"secret123\")\n\n# user input\nuser_input = sys.argv[1]          # assume a malicious entry \"_password\" ..\n\nprint(user.get_info(user_input))  # .. this will print \"secret123\", exposing the password!",
    "total": "Number of Python artifacts",
    "alternativeName": "Ensure object attribute accesses are safe.",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-470",
            "name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
            "href": "AIP/quality-standards/CWE/items/CWE-470",
            "standard": "CWE"
        },
        {
            "id": "CWE-915",
            "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
            "href": "AIP/quality-standards/CWE/items/CWE-915",
            "standard": "CWE"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.8",
            "name": "Improper access control",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.8",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.8",
            "name": "Improper access control",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.8",
            "standard": "PCI-DSS-V3.2.1"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
