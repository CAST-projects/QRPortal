{
    "id": 8418,
    "name": "Avoid NoSQL injection",
    "href": "AIP/quality-rules/8418",
    "critical": true,
    "associatedValueName": "Call stack from user input source down to the target SQL execution method",
    "description": "This metric uses CAST data-flow engine to detect a call path where input data from the user is sent to No-SQL database without prior validation and sanitization.",
    "output": "List all methods that miss calling the required input validation calls\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target SQL execution method.",
    "rationale": "The software constructs all or part of No-SQL command via user-controllable inputs. These inputs are not neutralized or are incorrectly neutralized. As a consequence, the No-SQL command may be completely altered.",
    "reference": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nhttps://cwe.mitre.org/data/definitions/89.html\n\nOpen Web Application Security Project (OWASP) \nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection",
    "remediation": "Use authorized sanitization methods.\nDo not expose sensible methods.",
    "remediationSample": "Use authorized sanitization methods.\nDo not expose sensible methods.",
    "sample": "var resultDoc = things.Find(new BsonDocument()).ToList();\nforeach (var item in resultDoc)\n{\n    // Exec JS command. Ok\n    JsonCommand<BsonDocument> cmd = new JsonCommand<BsonDocument>(\"{ eval: \\\"test_function(2)\\\" }\");\n    var result = db.RunCommand(cmd);\n\n    // Possible injection\n    var userInput = Console.ReadLine();\n    cmd = new JsonCommand<BsonDocument>(userInput); \n    Command<BsonDocument> cmd2 = GetCmdOfJsonCmd(cmd);\n    result = db.RunCommand(cmd2);\n}",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure you use sanitized queries to NoSQL databases",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-89",
            "name": "SQL Injection Improper Input Neutralization",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-943",
            "name": "Improper Neutralization of Special Elements in Data Query Logic",
            "url": null,
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70267",
            "name": "The application must not be vulnerable to SQL Injection.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
