{
    "id": 8416,
    "name": "Avoid use of a reversible one-way hash",
    "href": "AIP/quality-rules/8416",
    "critical": true,
    "associatedValueName": "Call stack from user input source down to the target method",
    "description": "Using CAST data-flow engine, this metric detects the use of a risky hashing algorithm.",
    "output": "List all methods that miss calling the required input validation calls\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target method.",
    "rationale": "This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.",
    "reference": "CWE-328\nhttp://cwe.mitre.org/data/definitions/328.html",
    "remediation": "Use a recommended hash method. Example: SHA-2.",
    "remediationSample": "Sample 1: \n---------\nString plainText = new String(plainTextIn);\nMessageDigest encer = MessageDigest.getInstance(\"SHA-256\");\nencer.update(plainTextIn);\nbyte[] digest = password.digest();\n\n//Login if hash matches stored hash \nif (equal(digest,secret_password())) {\nlogin_user();\n}\n\nSample 2:\n--------\nString plainText = new String(plainTextIn);\nMessageDigest encer = MessageDigest.getInstance(\"SHA-512\");\nencer.update(plainTextIn);\nbyte[] digest = password.digest();\n\n//Login if hash matches stored hash \nif (equal(digest,secret_password())) {\nlogin_user();\n}",
    "sample": "Sample 1: \n---------\nString plainText = new String(plainTextIn);\nMessageDigest encer = MessageDigest.getInstance(\"SHA\");\nencer.update(plainTextIn);\nbyte[] digest = password.digest();\n\n//Login if hash matches stored hash \nif (equal(digest,secret_password())) {\nlogin_user();\n}\n\nSample 2:\n--------\nString plainText = new String(plainTextIn);\nMessageDigest encer = MessageDigest.getInstance(\"MD5\");\nencer.update(plainTextIn);\nbyte[] digest = password.digest();\n\n//Login if hash matches stored hash \nif (equal(digest,secret_password())) {\nlogin_user();\n}",
    "total": "Number of methods calling user input methods",
    "alternativeName": "(undefined)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-328",
            "name": "Reversible One-Way Hash",
            "url": "https://cwe.mitre.org/data/definitions/328.html",
            "description": "The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.4",
            "name": "Insecure communications",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70245",
            "name": "The application must protect the confidentiality and integrity of transmitted information.",
            "url": null,
            "description": "Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.\n\nThis requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nApplication and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.\n \nWhen transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.\n\nCommunication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
