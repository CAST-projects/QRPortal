{
    "id": 1021040,
    "name": "Avoid instance attributes only differing by capitalization",
    "href": "AIP/quality-rules/1021040",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "Python is a case-sensitive language which allows reutilization of identifier names for different types by simple capitalization changes. A typical example would be using capitalized class names and the corresponding lowercase names for their instances. However defining attributes (methods and fields) in a class that only differ by capitalization can lead to confusion and to unexpected behaviour when used with case-insensitive interfaces.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Differentiating instance attributes by only changing name capitalization is a poor naming practice and source of confusion for future users of the class.",
    "remediation": "Rename the attributes in a more discernible way.",
    "remediationSample": ">>> class Transmission:\n>>>     def __init__(self, callObject):\n>>>         self.callObject = callObject\n>>>\n>>>     def call(self):\n>>>         self.callObject.call()",
    "sample": ">>> class Transmission:\n>>>     def __init__(self, callObject):\n>>>         self.Call = callObject\n>>>\n>>>     def call(self):\n>>>         self.Call.call()",
    "total": "Number of Python classes",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66033,
            "name": "Documentation",
            "href": "AIP/business-criteria/66033"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61017,
            "name": "Documentation - Naming Convention Conformity",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
