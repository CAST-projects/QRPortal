{
    "id": 7756,
    "name": "Avoid using READ statement without AT END clause or INVALID KEY clause",
    "href": "AIP/quality-rules/7756",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for COBOL programs using READ statements without the AT END or INVALID KEY clause.\n\nNotes:\n- READ statements executed against QSAM files should have an AT END clause. \n- READ statements executed against VSAM files should have an INVALID KEY clause. \n- No violation is raised on files for which the SELECT ASSIGN clause has not been found. This can occur when copybooks are missing.",
    "output": "Associated to each COBOL Program with violations, the Quality Rule provides:\n- The number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - READ statement",
    "rationale": "When reading data from files, it is important to manage all the situations that can occur and especially when there is no data to read. If the \"end of file\" is not managed or if a key is not found, then invalid data can be read and abnormal behavior can occur.",
    "remediation": "Insert a AT END or INVALID KEY clause to READ statements in order to manage errors and end of file situations.",
    "remediationSample": "* Example 1 \n            SELECT F-CARS \n            ASSIGN TO \"CARS\". \n            ... \n            1000-READ-DATA. \n            READ CARDIN INTO PEMPNO \n               AT END MOVE 'N' TO INPUT-SWITCH \n            END-READ \n\n        PERFORM PROCESS-DATA. \n\n            * Example 2 \n            SELECT F-CARS \n            ASSIGN TO \"CARS\" \n            ORGANIZATION INDEXED \n            ACCESS RANDOM \n            RECORD KEY CAR-ID. \n            ... \n            1000-READ-DATA. \n            READ F-CARS \n                INVALID KEY \n                MOVE 'N' TO INPUT-SWITCH \n            END-READ \n\n            PERFORM PROCESS-DATA. .",
    "sample": "* Example 1 \n            SELECT F-CARS \n            ASSIGN TO \"CARS\". \n            ... \n            1000-READ-DATA. \n            READ CARDIN INTO PEMPNO. \n            PERFORM PROCESS-DATA. \n\n            * Example 2 \n            SELECT F-CARS \n            ASSIGN TO \"CARS\" \n            ORGANIZATION INDEXED \n            ACCESS RANDOM \n            RECORD KEY CAR-ID. \n            ... \n            1000-READ-DATA. \n                READ F-CARS. \n            PERFORM PROCESS-DATA. ",
    "total": "Number of Cobol Programs",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -4,
            "name": "Cobol",
            "href": "AIP/technologies/-4"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-HA-FAILURES",
            "name": "HA - detect and handle failures",
            "url": "",
            "description": "Quality rules related to the absence of failure detection and handling"
        },
        {
            "standard": "AIP",
            "id": "AIP-MIPS-TRANSACTIONS-FAILURE",
            "name": "MIPS Reduction - focus on avoiding transaction failure",
            "url": null,
            "description": "MIPS Reduction assess the level of resources that are wasted on account of sub-optimal coding regarding Efficiency and Robustness areas. Sub-optimal coding regarding Efficiency cause unnecessary consumption of resources, that will ultimately cause unnecessary consumption of electrical power when applications run in production. Sub-optimal coding regarding Robustness cause unnecessary consumption of resources, when it comes down to application shutdown and restart because it failed or because its integrity was corrupted."
        }
    ]
}
