{
    "id": 8014,
    "name": "Avoid unchecked return code (SY-SUBRC) after AUTHORITY-CHECK",
    "href": "AIP/quality-rules/8014",
    "critical": true,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches in ABAP code for AUTHORITY-CHECK declarations that are not followed by a test of SY-SUBC system field.\n    The rule takes in account the following cases:\n- Use of a temporary variable\n\nAUTHORITY-CHECK OBJECT 'F_BKPF_BUK'\n    ID 'BUKRS' FIELD p_bukrs\n    ID 'ACTVT' FIELD p_actvt.\n\nTmp = SY-SUBRC.\n\nIF Tmp NE 0.\n    list of statements\nEND-IF.\n\n- Use of WRITE statement before return code checking\n\nAUTHORITY-CHECK OBJECT 'F_BKPF_BUK'\n    ID 'BUKRS' FIELD p_bukrs\n    ID 'ACTVT' FIELD p_actvt.\n    \nWRITE: / Do some testing.\n\nIF SUBRC NE 0.\n    list of statements\nEND-IF.\n",
    "output": "Associated to each ABAP Artifact with violations, the Quality Rule provides:\n- The number of violation occurrences",
    "rationale": "The AUTHORITY-CHECK object allows to verify if user who wants to execute a program has sufficient rights. If yes, then the object sets the SY-SUBRC system field to 0. Otherwise it sets a non 0 value in this system field. Not testing the SY-SUBRC system field means that the AUTHORITY-CHECK object declaration has no effect.\nFor security reason, the return code associated to AUTHORITY-CHECK object must be taken into account, especially if the value is not equal to 0.",
    "reference": "SAP",
    "remediation": "Add a test of the SY-SUBRC return code after each AUTHORITY-CHECK object and manage values that are not equal to 0.",
    "remediationSample": "AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'\n    ID 'BUKRS' FIELD p_bukrs\n    ID 'ACTVT' FIELD p_actvt.\n\nIF SY-SUBRC NE '0'.\n    MESSAGE e000(38) WITH text-e01 p_bukrs.\nENDIF.\n\n<list of statements>",
    "sample": "AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'\n    ID 'BUKRS' FIELD p_bukrs\n    ID 'ACTVT' FIELD p_actvt.\n\n<list of statements>",
    "total": "Number of ABAP Artifacts",
    "alternativeName": "Avoid unchecked return code (SY-SUBRC) after AUTHORITY-CHECK",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061041,
            "name": "CWE-391: Unchecked Error Condition",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": "Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
