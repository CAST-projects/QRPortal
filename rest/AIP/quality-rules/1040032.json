{
    "id": 1040032,
    "name": "Avoid Using ControllerAdvice And HandlerExceptionResolver simultaneously",
    "href": "AIP/quality-rules/1040032",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "extension": {
        "name": "com.castsoftware.springsecurity",
        "href": "AIP/extensions/com.castsoftware.springsecurity"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "To track all of the exceptions in Spring, we\u2019ll be making use of a global exception handler. This receives uncaught exceptions for your whole application, not just an individual controller. Spring offers two main approaches:\n\n- ControllerAdvice\n- HandlerExceptionResolver\n\nBut you cannot mix both approaches in the same application. Most applications use one approach, and using two may result in unexpected behavior.\n\n\nThis rule will check if ControllerAdvice and HandlerExceptionResolver are not used simultaneously. If not it gives the violation",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.",
    "reference": "https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc",
    "remediation": "we should not use \"ControllerAdvice\" and \"HandlerExceptionResolver\" in same application.",
    "sample": "Usage of @ControllerAdvice Sample: \n\npackage com.concretepage.controller;\nimport java.io.IOException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.servlet.ModelAndView;\nimport com.concretepage.exception.KeywordNotFoundException;\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n      @ExceptionHandler(IOException.class)\n      public ModelAndView myError(Exception exception) {\n        System.out.println(\"----Caught IOException----\");\n        ModelAndView mav = new ModelAndView();\n        mav.addObject(\"exception\", exception);\n        mav.setViewName(\"globalerror\");\n        return mav;\n      }\n      @ExceptionHandler(KeywordNotFoundException.class)\n      public String notFound() {\n            System.out.println(\"----Caught KeywordNotFoundException----\");\n            return \"404\";\n      }\n} \n\n------------------\nUsage of HandlerExceptionResolver Sample:\n\npackage com.logicbig.example;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@EnableWebMvc\npublic class Config {\n\n    @Bean\n    HandlerExceptionResolver errorHandler () {\n        return new HandlerExceptionResolver() {\n            @Override\n            public ModelAndView resolveException (HttpServletRequest request,\n                                                  HttpServletResponse response,\n                                                  Object handler,\n                                                  Exception ex) {\n                ModelAndView model = new ModelAndView(\"error-page\");\n                model.addObject(\"exceptionType\", ex);\n                model.addObject(\"handlerMethod\", handler);\n                return model;\n            }\n        };\n    }\n\n    //registering an interceptor",
    "total": "Number of Java Projects",
    "alternativeName": "Ensure not using ControllerAdvice And HandlerExceptionResolver simultaneously to avoid unexpected behavior",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066644,
            "name": "CWE-544 - Missing Standardized Error Handling Mechanism",
            "href": "AIP/technical-criteria/1066644",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063119,
            "name": "PCI-Requirement-6.5.5 - Improper error handling",
            "href": "AIP/technical-criteria/1063119",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "href": "AIP/technical-criteria/61014",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-544",
            "name": "Missing Standardized Error Handling Mechanism",
            "href": "AIP/quality-standards/CWE/items/CWE-544",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-11",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-11",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
