{
    "id": 1040034,
    "name": "\"StrictHttpFirewall\" should be set as the HttpFirewall",
    "href": "AIP/quality-rules/1040034",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule checks if Strict Http Firewall is set as the Http Firewall\nStrictHttpFirewall can be set as the HTTP Firewall by default or via configuration file.\n\nIn the following versions of spring security it is implicitly set as the Http Firewall (by default):\n5.0.1, 4.2.4, and 4.1.5 or newer versions of these.\n\nIn older versions , Strict Http Firewall is explicitly set as the Http Firewall (xml configuration or java configuration).\n\nViolation should be raised in following cases:\n\n1. If DefaultHttpFirewall is set as the Http firewall, instead of StrictHttpFirewall.\n2. If no configuration of firewall is provided and the spring security version is not among:5.0.1(>), 4.2.4(>), and 4.1.5(>)\n    (in this case make sure the application is making use of spring security)\n\nConsider following cases to prevent false positives:\n1. Java Application with no configuration of firewall and not using spring security.\n2. Java Application making use of newer versions of spring security in which strict http firewall is default firewall.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.",
    "reference": "https://pivotal.io/security/cve-2018-1199\nhttps://spring.io/blog/2018/01/30/cve-2018-1199-spring-security-5-0-1-4-2-4-4-1-5-released\nhttps://docs.spring.io/autorepo/docs/spring-security/4.2.x/reference/html/technical-overview.html",
    "remediation": "By default the StrictHttpFirewall is used. This implementation rejects requests that appear to be malicious. If it is too strict for your needs, then you can customize what types of requests are rejected. However, it is important that you do so knowing that this can open your application up to attacks. For example, if you wish to leverage Spring MVC\u2019s Matrix Variables, the following configuration could be used in XML:\n\n<b:bean id=\"httpFirewall\"\n      class=\"org.springframework.security.web.firewall.StrictHttpFirewall\"\n      p:allowSemicolon=\"true\"/>\n\n<http-firewall ref=\"httpFirewall\"/>\n\n\n\nThe same thing can be achieved with Java Configuration by exposing a StrictHttpFirewall bean.\n\n@Bean\npublic StrictHttpFirewall httpFirewall() {\n    StrictHttpFirewall firewall = new StrictHttpFirewall();\n    firewall.setAllowSemicolon(true);\n    return firewall;\n}",
    "remediationSample": "<b:bean id=\"httpFirewall\"\n      class=\"org.springframework.security.web.firewall.StrictHttpFirewall\"\n      p:allowSemicolon=\"true\"/>\n\n<http-firewall ref=\"httpFirewall\"/>\n\nThe same thing can be achieved with Java Configuration by exposing a bean.\n\n@Bean\npublic StrictHttpFirewall httpFirewall() {\n    StrictHttpFirewall firewall = new StrictHttpFirewall();\n    firewall.setAllowSemicolon(true);\n    return firewall;\n}",
    "sample": "In the XML configutaion:\n\n<b:bean id=\"httpFirewall\"\n      class=\"org.springframework.security.web.firewall.DefaultHttpFirewall\"\n      p:allowSemicolon=\"true\"/>\n\n<http-firewall ref=\"httpFirewall\"/>\n\n\n\nThe same thing can be achieved with Java Configuration by exposing a bean.\n\n@Bean\npublic DefaultHttpFirewall httpFirewall() {\n    DefaultHttpFirewall firewall = new DefaultHttpFirewall();\n    firewall.setAllowSemicolon(true);\n    return firewall;\n}",
    "total": "Number of Java Project and JSP Project",
    "alternativeName": "Ensure setting \"StrictHttpFirewall\" as Http Firewall before Spring 5.0.1, 4.2.4, and 4.1.5 to reject requests that appear to be malicious.",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "OWASP",
            "id": "A9-2013",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts."
        },
        {
            "standard": "OWASP",
            "id": "A9-2017",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "url": null,
            "description": "Use strong cryptography and security protocols (for example, TLS, IPSEC, SSH, etc.) to safeguard sensitive cardholder data during transmission over open, public networks, including the following:\n- Only trusted keys and certificates are accepted.\n- The protocol in use only supports secure versions or configurations.\n- The encryption strength is appropriate for the encryption methodology in use.\nNote: SSL and early TLS are not considered strong cryptography and cannot be used as a security control after June 30, 2016. Prior to this date, existing implementations that use SSL and/or early TLS must have a formal Risk Mitigation and Migration Plan in place.\nEffective immediately, new implementations must not use SSL or early TLS.\nPOS POI terminals (and the SSL/TLS termination points to which they connect) that can be verified as not being susceptible to any known exploits for SSL and early TLS may continue using these as a security control after June 30, 2016.\nExamples of open, public networks include but are not limited to:\n- The Internet\n- Wireless technologies, including 802.11 and Bluetooth\n- Cellular technologies, for example, Global System for Mobile communications (GSM), Code division multiple access (CDMA)\n- General Packet Radio Service (GPRS)\n- Satellite communications"
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.4",
            "name": "Insecure communications",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
