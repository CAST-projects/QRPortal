{
    "id": 7704,
    "name": "Avoid static Fields that are not final",
    "href": "AIP/quality-rules/7704",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Non final static fields",
    "description": "Reports all enterprise beans (session, message and entity) that have not final static fields even if these static fields are hold by a class in its inheritance tree.",
    "output": "This report lists all java enterprise classes that have non final static fields.\nIt provides the following information:\n - Class full name\n - list of non final static fields",
    "rationale": "An enterprise bean must not use read/write static fields. Using read-only static fields is allowed. Therefore, it is recommended that all static fields in the enterprise bean class be declared as final.\nThis rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across\nmultiple JVMs.",
    "reference": "JSR-220 Enterprise Java Beans 3.0 Final Release (ejbcore) page 545",
    "remediation": "Declare these static fields as final or review your design.",
    "remediationSample": "@Stateful\npublic class MyBean implements MyRemoteBean {\n   private static final String myName = \"MyBean\"; // FIXED\n    ...\n    public int aMethod() {\n        ...\n    }\n   ...\n}",
    "sample": "@Stateful\npublic class MyBean implements MyRemoteBean {\n   private static String myName = \"MyBean\"; // VIOLATION\n    ...\n    public int aMethod() {\n        ...\n    }\n   ...\n}",
    "total": "Number of enterprise beans (session, message and entity)",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
