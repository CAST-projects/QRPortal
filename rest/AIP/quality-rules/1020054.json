{
    "id": 1020054,
    "name": "Avoid using delete on arrays",
    "href": "AIP/quality-rules/1020054",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "extension": {
        "name": "com.castsoftware.html5",
        "href": "AIP/extensions/com.castsoftware.html5"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "The delete operator can be used to remove a property from any object. Arrays are objects, so the delete operator can be used here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The delete operator will only delete the value from the array but not re-index it hence making the array value at that index as undefined.",
    "reference": "ASCMM-MNT-20",
    "remediation": "Use the following methods to: \n- add/remove elements from the the array : Array.prototype.splice \n- add/remove elements from the end of the array : Array.prototype.pop \n- add/remove elements from the beginning of the array : Array.prototype.shift",
    "remediationSample": "var myArray = ['a', 'b', 'c', 'd']; \n\n// removes 1 element from index 2 \nremoved = myArray.splice(2, 1); // myArray => ['a', 'b', 'd'] \nconsole.log(myArray[2]); // outputs 'd'",
    "sample": "var myArray = ['a', 'b', 'c', 'd']; \n\ndelete myArray[2]; // Noncompliant. myArray => ['a', 'b', undefined, 'd'] \nconsole.log(myArray[2]); // expected value was 'd' but output is undefined",
    "total": "Number of Javascript Functions",
    "alternativeName": "To delete or remove an index element from an array use splice, pop or shift rather than delete to prevent empty indexes",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
