{
    "id": 8522,
    "name": "Avoid Regular expression injection through API requests",
    "href": "AIP/quality-rules/8522",
    "critical": true,
    "maxWeight": 9,
    "associatedValueName": "Call stack from user input source down to the target method",
    "description": "This metric uses CAST data-flow engine to detect a call path from API requests down to a Regular expression without prior validation and sanitization.",
    "output": "List all methods that make resource calls forged by user input\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target method.",
    "rationale": "The software constructs all or part of a Regular expression via API requests. These inputs are not neutralized or are incorrectly neutralized. As a consequence, a user may create a Denial Of Service attack.",
    "reference": "Regular expression Denial of Service - ReDoS\nhttps://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\nCWE-400: Uncontrolled Resource Consumption\nhttps://cwe.mitre.org/data/definitions/400.html\n\nWeaknesses in the 2019 CWE Top 25 Most Dangerous Software Errors\nhttps://cwe.mitre.org/data/definitions/1200.html",
    "remediation": "Use authorized sanitization methods, limit the computation time of the Regular expression.",
    "remediationSample": "string login = textBoxLogin.Text;\nstring password = textBoxPassword.Text;\nvar regex = new Regex(Regex.Escape(login));\nif (regex.Match(password).Success)\n    MessageBox.Show(\"ERROR: the name must not be present in the password\");\nelse\n    MessageBox.Show(\"Correct password\");",
    "sample": "string login; // value given by an API request\nstring password = textBoxPassword.Text;\nvar regex = new Regex(login);\nif (regex.Match(password).Success)\n    MessageBox.Show(\"ERROR: the name must not be present in the password\");\nelse\n    MessageBox.Show(\"Correct password\");",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure you don't have unsanitized regular expressions",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-400",
            "name": "Uncontrolled Resource Consumption",
            "url": "https://cwe.mitre.org/data/definitions/400.html",
            "description": "The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-AU-7",
            "name": "Audit Reduction and Report Generation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/AU-7",
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "API8-2019",
            "name": "Injection",
            "url": null,
            "description": "Injection flaws, such as SQL, NoSQL, Command Injection, etc., occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's malicious data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
