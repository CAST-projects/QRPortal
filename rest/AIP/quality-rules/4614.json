{
    "id": 4614,
    "name": "DEPRECATED: Proper overriding of 'clone()'",
    "href": "AIP/quality-rules/4614",
    "critical": true,
    "maxWeight": 9,
    "description": "This report lists all Methods overriding 'clone()' and not calling 'super.clone()'",
    "output": "This report lists all Methods overriding 'clone()' and not calling 'super.clone()'.\nIt provides the following information:\n Method full name",
    "rationale": "A call to 'super.clone()' ensures the clone behavior will still work.\nWhen overriding the 'clone()' Method, a call to 'super.clone()' is necessary. Note that where a class 'A' that has a field 'a' of type 'A' and is calling a.clone() without calling super.clone() will not be reported as a violation.",
    "reference": "https://www.vojtechruzicka.com/java-cloning-problems/\nhttps://help.semmle.com/wiki/display/JAVA/Missing+super+clone",
    "remediation": "Review the Method definition",
    "remediationSample": "class Person implements Cloneable {\n    private String name;\n    public Person(String name) { this.name = name; }\n    \n    public Person clone() {\n        try {\n            return (Person)super.clone(); // FIXED 'clone' correctly calls 'super.clone'\n        } catch (CloneNotSupportedException e) {\n            throw new AssertionError(\"Should never happen\");\n        }\n    }\n}",
    "sample": "class Person implements Cloneable {\n    private String name;\n    public Person(String name) { this.name = name; }\n    \n    public Person clone() {\n        return new Person(this.name); // violation \n    }\n}",
    "total": "Number of Java methods",
    "alternativeName": "A clone method that is overridden in a subclass should call super.clone. Not doing so causes the subclass clone to return an object of the wrong type.",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61010,
            "name": "Complexity - OO Inheritance and Polymorphism",
            "href": "AIP/technical-criteria/61010",
            "weight": 9,
            "critical": true
        },
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "href": "AIP/technical-criteria/61003",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-580",
            "name": "clone() Method Without super.clone()",
            "href": "AIP/quality-standards/CWE/items/CWE-580",
            "standard": "CWE"
        },
        {
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "href": "AIP/quality-standards/OWASP/items/M7-2016",
            "standard": "OWASP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
