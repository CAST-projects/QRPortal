{
    "id": 7518,
    "name": "Avoid missing WHEN OTHERS in CASE statements",
    "href": "AIP/quality-rules/7518",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric retrieves all ABAP Artifacts that contain a CASE statement with no or with an empty WHEN OTHERS clause.",
    "output": "Associated to each ABAP Artifact with violations, the Quality Rule provides:\n- The number of violation occurrences",
    "rationale": "The keyword WHEN OTHERS is executed when none of the conditions being tested for in the CASE statement are met or executed. Having no WHEN OTHERS means that there is a strong assumption about the value of data.\nThe cases that are \"impossible\" today are the ones most likely to be the causes of untraceable bugs in the future, when the impossible changes to the standard.",
    "reference": "Enhancing the Quality of ABAP Development, \nMeijs-Krouwels-Heulmans-Sommen, SAP Press\nISBN 1-59229-030-2\nPage 223",
    "remediation": "Add the proper exception handling code in the WHEN OTHERS clause.",
    "remediationSample": "Remediation example:\n\nCASE tp_materialtype.\n  WHEN co_materialtype_raw.\n* Handling of material type RAW starts here\n  WHEN co_materialtype_semi.\n* Handling of material type SEMI starts here\n  WHEN OTHERS\n* The exception is caught here\nENDCASE.",
    "sample": "CASE tp_materialtype.\n  WHEN co_materialtype_raw.\n* Handling of material type RAW starts here\n  WHEN co_materialtype_semi.\n* Handling of material type SEMI starts here\nENDCASE.",
    "total": "Number of ABAP Artifacts",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-1",
            "name": "Control Flow Transfer Control Element outside Switch Block",
            "url": null,
            "description": "Objective\nAvoid the unconditional transfer of control flow outside of switch structures\n\nConsequence\nSoftware that does not follow the principles of structured programming degrades comprehensibility\n\nMeasure Element\nNumber of instances where an unconditional transfer of control is located outside the branching based on the value of a storable element\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-478",
            "name": "Missing Default Case in Switch Statement",
            "url": "https://cwe.mitre.org/data/definitions/478.html",
            "description": "The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
