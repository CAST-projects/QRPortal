{
    "id": 1040002,
    "name": "Avoid disabling Spring Security CSRF Protection",
    "href": "AIP/quality-rules/1040002",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check if Spring Security\u2019s CSRF protection is activated. if not it gives the violation",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution. There multiple forms of Cross-Site Request Forgery (CSRF) attacks that can be avoided using Spring Security.\n\nSome frameworks handle invalid CSRF tokens by invalidating the user\u2019s session, but this causes its own problems. Instead by default Spring Security\u2019s CSRF protection will produce an HTTP 403 access denied.\nInclude Spring Security\u2019s CSRF protection within your application via XML or JAVA configuration is one of the most important step to secure your application.",
    "reference": "https://cwe.mitre.org/data/definitions/352.html\nhttps://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)\nhttp://www.baeldung.com/spring-security-csrf\nhttps://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs",
    "remediation": "CSRF protection must be enabled, as of Spring Security 4.0, CSRF protection is enabled by default with XML configuration with csrf option.",
    "remediationSample": "// As of Spring Security 4.0, CSRF protection is enabled by default with XML configuration.\n// If you would like to disable CSRF protection, the corresponding XML configuration can be seen below.\n\n<http>\n    ...\n    <csrf disabled=\"false\"/>\n\n// or\n    <csrf/>\n\n</http>\n\n// CSRF protection is enabled by default in the Java configuration.\n\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n            // No violation CSRF Protection is enabled by default\n       }\n}",
    "sample": "// As of Spring Security 4.0, CSRF protection is enabled by default with XML configuration.\n// If you would like to disable CSRF protection, the corresponding XML configuration can be seen below.\n\n<http>\n    ...\n    <csrf disabled=\"true\"/>\n</http>\n\n// CSRF protection is enabled by default in the Java configuration.\n\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n              http\n              .csrf().disable();     // Violation CSRF Protection is disabled\n       }\n}",
    "total": "Number of Java Methods and Xml tags",
    "alternativeName": "Ensure you have not disabled Spring Security CSRF protection",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-352",
            "name": "Cross-Site Request Forgery (CSRF)",
            "url": "https://cwe.mitre.org/data/definitions/352.html",
            "description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
        },
        {
            "standard": "CWE",
            "id": "CWE-489",
            "name": "Leftover Debug Code",
            "url": "https://cwe.mitre.org/data/definitions/489.html",
            "description": "The application can be deployed with active debugging code that can create unintended entry points."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-IA-9",
            "name": "Service Identification and Authentication",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/IA-9",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A2-2017",
            "name": "Broken Authentication",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
            "description": "Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities temporarily or permanently."
        },
        {
            "standard": "OWASP",
            "id": "A8-2013",
            "name": "Cross-Site Request Forgery (CSRF)",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)",
            "description": "A CSRF attack forces a logged-on victims' browser to send a forged HTTP request, including the victims' session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victims' browser to generate requests the vulnerable application thinks are legitimate requests from the victim."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.9",
            "name": "Cross-site request forgery (CSRF)",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70259",
            "name": "The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities.",
            "url": null,
            "description": "Cross-Site Request Forgery (CSRF) is an attack where a website user is forced to execute an unwanted action on a website that he or she is currently authenticated to. An attacker, through social engineering (e.g., e-mail or chat) creates a hyperlink which executes unwanted actions on the website the victim is authenticated to and sends it to the victim. If the victim clicks on the link, the action is executed unbeknownst to the victim.\n\nA CSRF attack executes a website request on behalf of the user which can lead to a compromise of the user\u2019s data. What is needed to be successful is for the attacker to know the URL, an authenticated application user, and trick the user into clicking the malicious link.\n\nWhile XSS is not needed for a CSRF attack to work, XSS vulnerabilities can provide the attacker with a vector to obtain information from the user that may be used in mitigating the risk. The application must not be vulnerable to XSS as an XSS attack can be used to help defeat token, double-submit cookie, referrer and origin-based CSRF defenses."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
