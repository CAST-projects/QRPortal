{
    "id": 1050004,
    "name": "Avoid using NSPredicate predicateWithFormat",
    "href": "AIP/quality-rules/1050004",
    "critical": true,
    "description": "An attacker could access other user information thanks to string injection. Manipulating input, an attacker could fetch more data from the database than what was originally intended by the application.\nThe injection could be done in NSPredicate using the methods\npredicateWithFormat:,\npredicateWithFormat:arguments:,\npredicateWithFormat:argumentArray:\nThe injection point will be part of the format string as @\"...%@...\". \nThis rule is compliant with CISQ OMG ASCSM-CWE-134 and ASCSM-CWE-89 recommendations and with OWASP 2016-M7 recommendation",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "An attacker could access other user information thanks to string injection through the withFormat method. This is why it is highly recommended to avoid the usage of the API",
    "total": "Number of Objective-C artifacts",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "AIP/technologies/1050001"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-134",
            "name": "Format String Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to sanitize user input in use in formatting operations\n\nConsequence\nSoftware that is unaware of formatting control incurs the risk of execution of arbitrary code and the risk of information disclosure which can severely simplify exploitation of the software\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the formating statement; none of the callable or method control element of the transformation sequence being a vetted sanitization control element from the list of vetted sanitization control elements.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-134",
            "name": "Use of Externally-Controlled Format String",
            "url": "https://cwe.mitre.org/data/definitions/134.html",
            "description": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
