{
    "id": 4598,
    "name": "Avoid using 'java.lang.Runtime.exec()'",
    "href": "AIP/quality-rules/4598",
    "critical": false,
    "maxWeight": 6,
    "description": "Java artifacts should not use 'java.lang.Runtime.exec()'",
    "output": "This report lists all java artifacts using 'java.lang.Runtime.exec'.\nIt provides the following information:\n - Artifact full name",
    "rationale": "For portability reasons, 'java.lang.Runtime.exec()' should not be used since it means being dependant on the environment where the application is deployed.\nFor security reasons, 'java.lang.Runtime.exec()' can lead to malicious file execution resulting in devastating attacks such as total server compromise.\n\nThere are uses correct uses of Runtime.exec for example when the method call is platform neutral.\n\nSuch examples of the correct use of Runtime.exec are:\n- Invocation of a Java compiler, with the name of the compiler specified as a\nuser-settable Property.\n- Execution of a command the user typed in (a \"shell\").\n- Invocation of a browser, configured as part of the installation of the\nprogram, when the user presses a \"Help\" button.",
    "reference": "Open Web Application Security Project's Top Ten\nhttp://www.owasp.org/index.php/Top_10_2007-A3\nsee OWASP_Top_10_2007_for_JEE.pdf",
    "total": "Number of Java artifacts",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61004,
            "name": "Architecture - OS and Platform Independence",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-78",
            "name": "OS Command Injection Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to sanitize user input in use as operating system commands\n\nConsequence\nSoftware unaware of OS command control incurs the risk of unauthorized command execution, possibly used to disable the software, or possibly leading to unauthorized read and modify data access\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the in the platform action to be executed by the execution environment; none of the callable or method control element of the transformation sequence being a vetted sanitization control element from the list of vetted sanitization control elements.\n\n"
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
