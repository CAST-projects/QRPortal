{
    "id": 1040046,
    "name": "Avoid using Spring Data with XMLBeam integration",
    "href": "AIP/quality-rules/1040046",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "Avoid using Spring Data (versions prior to 1.13 to 1.13.11 and 2.0 to 2.0.6) with XMLBeam integration (1.4.14 or earlier versions).\n\nAffected version\nSpring Data Commons 1.13 to 1.13.11 (Ingalls SR11)\nSpring Data REST 2.6 to 2.6.11 (Ingalls SR11)\nSpring Data Commons 2.0 to 2.0.6 (Kay SR6)\nSpring Data REST 3.0 to 3.0.6 (Kay SR6)",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When Spring Data Commons(versions prior to 1.13 to 1.13.11 and 2.0 to 2.0.6) is used along with XMLBeam(1.4.14 or earlier versions), it may lead to property binder vulnerability due to improper restriction of XML external entity references because of XMLBeam library not restricting external reference expansion.An unauthenticated remote malicious user can supply specially crafted request parameters against Spring Data\u2019s projection-based request payload binding to access arbitrary files on the system.",
    "reference": "https://pivotal.io/security/cve-2018-1259\nhttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1259\nhttp://cwe.mitre.org/data/definitions/611.html",
    "remediation": "Upgrade from 1.13.x to 1.13.12 (Ingalls SR12)\nUpgrade from 2.0.x to 2.0.7 (Kay SR7)\nUpgrade to XMLBeam 1.4.15",
    "remediationSample": "Upgrade from 1.13.x to 1.13.12 (Ingalls SR12)\nUpgrade from 2.0.x to 2.0.7 (Kay SR7)\nUpgrade to XMLBeam 1.4.15",
    "sample": "package com.casttest.demo;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.xmlbeam.annotation.XBRead;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@RestController\n@SpringBootApplication\npublic class CastTestApplication {\n   @RequestMapping(value = \"/login\", method = RequestMethod.POST)\n   public String handleCustomer(@RequestBody Userone testuser) {\n      return String.format(\"%s:%s login success!\", testuser.getFirstname(), testuser.getLastname());\n   }\n   public static void main(String[] args) {\n      SpringApplication.run(CastTestApplication.class, args);\n   }\n   public interface Userone {\n      @XBRead(\"//username\")\n      String getFirstname();\n      @XBRead(\"//password\")\n      String getLastname();\n   }\n}",
    "alternativeName": null,
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-611",
            "name": "Improper Restriction of XML External Entity Reference ('XXE')",
            "url": "https://cwe.mitre.org/data/definitions/611.html",
            "description": "The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A4-2017",
            "name": "XML External Entities (XXE)",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)",
            "description": "Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70237",
            "name": "XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways.",
            "url": null,
            "description": "DoS is a condition when a resource is not available for legitimate users. When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.\n\nXML-based applications are susceptible to DoS attacks due to the nature of XML parsing being processor intensive and complicated.\n\nBest practice for parsing XML to avoid DoS include:\n\n- Using a proven XML parser\n- Using an XML gateway that provides DoS protection\n- Using parser options that provide limits on recursive payloads, oversized payloads, and entity expansion.\n\nThis requirement addresses the configuration of applications to mitigate the impact of DoS attacks that have occurred or are ongoing on application availability. For each application, known and potential DoS attacks must be identified and solutions for each type implemented. A variety of technologies exist to limit or, in some cases, eliminate the effects of DoS attacks (e.g., limiting processes or restricting the number of sessions the application opens at one time). Employing increased capacity and bandwidth, combined with service redundancy, may reduce the susceptibility to some DoS attacks."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70269",
            "name": "The application must not be vulnerable to XML-oriented attacks.",
            "url": null,
            "description": "Extensible Markup Language (XML) is widely employed in web technology and applications like web services (SOAP, REST, and WSDL) and is also used for configuration files. XML vulnerability examples include XML injection, XML Spoofing, XML-based Denial of Service attacks and information disclosure attacks.\n\nWhen utilizing XML, web applications must take steps to ensure they are addressing XML-related security issues. This is accomplished by choosing well-designed application components, building application code that follows security best practices and by patching application components when vulnerabilities are identified.\n\nXML firewalls or gateways may be employed to assist in protecting applications by controlling access to XML-based applications, filtering XML content, rate-limiting requests, and validating XML traffic."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
