{
    "id": 7448,
    "name": "Always validate user input with Request variables",
    "href": "AIP/quality-rules/7448",
    "critical": true,
    "associatedValueName": "Associated Value",
    "description": "List all locations (functions or pages when done directly into a page) where request variables are use directly without content validation (i.e. where the variable is not used as an argument of a function).\nNB: this can list location where the code is safe (like the content is affected to a variable that is in turn processed to ensure that this will not break). However, this is a potential problem, as future changes in the code might use the variable before it is checked.",
    "output": "List all locations (functions or pages) where request variables are not used as an argument of a function.",
    "rationale": "By directly using content of Request variables, you expose your application to data injection (SQL-Injection and so forth).",
    "reference": "Hacking the Code: ASP.NET Web Application Security\nby Mark M. Burnett and James C. Foster\nISBN:1932266658 Syngress Publishing (c) 2004",
    "remediation": "Always use a validation function that check the data input (for example that the data does not contain ' etc).\nAssign this value to a variable (preferably using a naming convention to distinguish safe from unsafe data), and then always use that variable.",
    "remediationSample": "String safe=MyFilterStringFunction(Request.Form[\"UserData\"]);\n\n=> By processing the entry in the MyFilterStringFunction you can ensure that the data will not lead to SQL-Injection or other kind of attack.\nUse name convention for the variable containing the safe data to distinguish it. Always use that variable afterwards.",
    "sample": "String unsafe = Request.Form[\"UserData\"];\n..\n.. // use unsafe\n\n=> This is unsafe to use that value directly. For example if this variable is used in a SQL-Query, it is very easy to do some SQL-Injection.",
    "total": "Total number of pages and .net artifacts",
    "alternativeName": "Always validate user input with Request variables",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -19,
            "name": "ASP",
            "href": "AIP/technologies/-19"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-20",
            "name": "Improper Input Validation",
            "url": null,
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70257",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70271",
            "name": "The application must not be subject to input handling vulnerabilities.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
