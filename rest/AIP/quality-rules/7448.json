{
    "id": 7448,
    "name": "Always validate user input with Request variables",
    "href": "AIP/quality-rules/7448",
    "critical": true,
    "associatedValueName": "Associated Value",
    "description": "List all locations (functions or pages when done directly into a page) where request variables are use directly without content validation (i.e. where the variable is not used as an argument of a function).\nNB: this can list location where the code is safe (like the content is affected to a variable that is in turn processed to ensure that this will not break). However, this is a potential problem, as future changes in the code might use the variable before it is checked.",
    "output": "List all locations (functions or pages) where request variables are not used as an argument of a function.",
    "rationale": "By directly using content of Request variables, you expose your application to data injection (SQL-Injection and so forth).",
    "reference": "Hacking the Code: ASP.NET Web Application Security\nby Mark M. Burnett and James C. Foster\nISBN:1932266658 Syngress Publishing (c) 2004",
    "remediation": "Always use a validation function that check the data input (for example that the data does not contain ' etc).\nAssign this value to a variable (preferably using a naming convention to distinguish safe from unsafe data), and then always use that variable.",
    "remediationSample": "String safe=MyFilterStringFunction(Request.Form[\"UserData\"]);\n\n=> By processing the entry in the MyFilterStringFunction you can ensure that the data will not lead to SQL-Injection or other kind of attack.\nUse name convention for the variable containing the safe data to distinguish it. Always use that variable afterwards.",
    "sample": "String unsafe = Request.Form[\"UserData\"];\n..\n.. // use unsafe\n\n=> This is unsafe to use that value directly. For example if this variable is used in a SQL-Query, it is very easy to do some SQL-Injection.",
    "total": "Total number of pages and .net artifacts",
    "alternativeName": "Always validate user input with Request variables",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -19,
            "name": "ASP",
            "href": "AIP/technologies/-19"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-20",
            "name": "Improper Input Validation",
            "url": "https://cwe.mitre.org/data/definitions/20.html",
            "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70257",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "url": null,
            "description": "XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.\n\nXSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, \"&lt;\" is the HTML encoding for the \"<\" character. If the encoding is performed, the script code will not execute.\n\nThere are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.\n\nWhen the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker\u2019s script is executed in the victims browser with the trust permissions assigned to the site.\n\nThere are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.\n\nTo address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.\n\nExamples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.\n  \nThe site is available by pointing your browser to https://www.owasp.org."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
