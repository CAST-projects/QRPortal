{
    "id": 7358,
    "type": "quality-rule",
    "name": "Avoid call to AcceptChanges in a loop",
    "href": "AIP/quality-rules/7358",
    "critical": true,
    "associatedValueName": "Associated Value",
    "description": "Avoid call to AcceptChanges (of DataSet, DataTable etc) in loop as this have a negative impact on performance.",
    "output": "The metric will list all the artifacts where a call to AcceptChanges is done within a loop: NameSpace + Class + Method names.",
    "rationale": "From a performance point of view, it is better to call AcceptChanges only once at the end of a loop rather than at each iteration.",
    "reference": "See .Net 2005 sample provided.\nSecond loop is about 50 times quicker.",
    "remediation": "Move the Acceptchanges call at the end of the loop. Check that the obtained results are the same.",
    "remediationSample": "// Define a dataset with a datatable and three columns (keep default values for all) \n...\nvoid DisplayMessage( String szAdditionalMsg, long lStart)\n{\n   String szMsg = szAdditionalMsg +  Convert.ToString((new System.TimeSpan(DateTime.Now.Ticks)).Ticks - (new System.TimeSpan(lStart)).Ticks);\n    MessageBox.Show(szMsg, \"Information\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\n\nvoid f()\n{\n   DataSet1 ds1 = new DataSet1();\n   int i = 0;  long lStart = 0; String szMsg = \"\";\n\n   lStart = DateTime.Now.Ticks;\n   for (i=0; i <1000; i++)  {\n      d12.DataTable1.Rows.Add( new object[] { i.ToString(), i.ToString(), i.ToString() });\n   }\n   ds1.AcceptChanges();\n   DisplayMessage(\"#Ticks with AcceptChanges outside of the loop: \", lStart);\n}",
    "sample": "// Define a dataset with a datatable and three columns (keep default values for all) \n...\nvoid DisplayMessage( String szAdditionalMsg, long lStart)\n{\n   String szMsg = szAdditionalMsg +  Convert.ToString((new System.TimeSpan(DateTime.Now.Ticks)).Ticks - (new System.TimeSpan(lStart)).Ticks);\n    MessageBox.Show(szMsg, \"Information\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\n\nvoid f()\n{\n   DataSet1 ds1 = new DataSet1();\n   int i = 0;  long lStart = 0; String szMsg = \"\";\n\n   lStart = DateTime.Now.Ticks;\n   for (i=0; i <1000; i++) {\n      ds1.DataTable1.Rows.Add( new object[] { i.ToString(), i.ToString(), i.ToString() });\n      ds1.AcceptChanges();\n   }\n   DisplayMessage(\"#Ticks with AcceptChanges in the loop: \", lStart);\n\n}",
    "total": "All .Net Artifacts doing a call to AcceptChanges",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61019,
            "name": "Efficiency - SQL and Data Handling Performance",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "AIP/technologies/141901"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        
    ]
}
