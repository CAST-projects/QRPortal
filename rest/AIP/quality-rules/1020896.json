{
    "id": 1020896,
    "name": "Avoid using risky cryptographic hash with nodejs (TypeScript)",
    "href": "AIP/quality-rules/1020896",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "MD5/SHA1 hashes were used as salt to hash a password or a passphrase. In cryptography, a salt is random data that are used as an additional input to a one-way function. Recently, several exploits were developed which proved that MD5 will generate identical outputs for the different input parameters. As a consequence, somebody can break your encryption or log on to your website\n\n\nThis rule checks that no MD5 or SHA1 hash is used with the crypto module.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser.\n\nThe use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.",
    "reference": "https://cwe.mitre.org/data/definitions/327.html \nhttps://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure \nhttps://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
    "remediation": "Avoid using MD5 or SHA1 hashes as input to cryptographic functions or to store passwords. Node.js offers the following hashing algorithms: SHA224, SHA256, SHA384, and SHA512. Make sure you choose the most appropriate one, depending on your use case, security requirements and runtime constraints.",
    "remediationSample": "const filename = process.argv[2]; \nimport * as crypto from 'crypto'; \nimport * as fs from 'fs'; \n\nconst hash = crypto.createHash('sha256'); \n\nconst input = fs.createReadStream(filename); \ninput.on('readable', () => { \n  const data = input.read(); \n  if (data) \n    hash.update(data); \n  else { \n    console.log(`${hash.digest('hex')} ${filename}`); \n  }\n })",
    "sample": "const filename = process.argv[2]; \nimport * as crypto from 'crypto'; \nimport * as fs from 'fs'; \n\nconst hash = crypto.createHash('md5'); \n\nconst input = fs.createReadStream(filename); \ninput.on('readable', () => { \n  const data = input.read(); \n  if (data) \n    hash.update(data); \n  else { \n    console.log(`${hash.digest('hex')} ${filename}`); \n  } \n});",
    "total": "Number of TypeScript callables using createHash function",
    "alternativeName": "Ensure not using MD5/SHA1 hashes for cryptographic functions of NodeJs to avoid sensitive data being compromised",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-327",
            "name": "Broken or Risky Cryptographic Algorithm Usage",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-327",
            "name": "Use of a Broken or Risky Cryptographic Algorithm",
            "url": null,
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SC-12",
            "name": "Cryptographic Key Establishment and Management",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M5-2016",
            "name": "Insufficient Cryptography",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-4.1",
            "name": "Use strong cryptography and security protocols",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70245",
            "name": "The application must protect the confidentiality and integrity of transmitted information.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
