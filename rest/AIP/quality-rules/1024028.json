{
    "id": 1024028,
    "name": "Avoid using \"Android Protected Confirmation\" without User Confirmation",
    "href": "AIP/quality-rules/1024028",
    "critical": true,
    "description": "To provide support for high-assurance user confirmation in your app when generate an asymmetric signing key using the KeyGenParameterSpec.Builder class, process as follow \n1- pass true into setUserConfirmationRequired() when create the key \n2- call setAttestationChallenge(), passing a suitable challenge value provided by the relying party. \n\n\nsetUserConfirmationRequired Sets whether this key is authorized to be used only for messages confirmed by the user. Confirmation is separate from user authentication. Keys can be created that require confirmation but not user authentication, or user authentication but not confirmation, or both. \nConfirmation verifies that some user with physical possession of the device has approved a displayed message. \n\n\nsetUserConfirmationRequired() is added in API level 28 and setAttestationChallenge() is added in API level 24\n\nWhen API level is not detected or API level supporte these methods: A violaton is reported if these methods are not setted or setUserConfirmationRequired pass false.",
    "rationale": "Android Protected Confirmation doesn't provide a secure information channel for the user. Your app cannot assume any confidentiality guarantees beyond those that the Android platform offers. In particular, don't use this workflow to display sensitive information that you wouldn't ordinarily show on the user's device. \n\nAfter the user confirms the message, its integrity is assured, but your app must still use data-in-transit encryption to assure the confidentiality of the signed message.",
    "reference": "https://developer.android.com/training/articles/security-android-protected-confirmation",
    "remediationSample": "KeyStore ks = KeyStore.getInstance(KEY_STORE_NAME); \nks.load(null); \n\nString alias = makeNewAlias(); \nKeyPairGenerator kpg = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, KEY_STORE_NAME); \n\nkpg.initialize(new KeyGenParameterSpec.Builder( \n    alias, \n    KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY) \n    .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512) \n    .setAttestationChallenge(attestationChallengeBytes) \n    .setUserConfirmationRequired(true) \n    .build()); \nKeyPair kp = kpg.generateKeyPair(); ",
    "sample": "KeyStore ks = KeyStore.getInstance(KEY_STORE_NAME); \nks.load(null); \n\nString alias = makeNewAlias(); \nKeyPairGenerator kpg = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, KEY_STORE_NAME); \n\nkpg.initialize(new KeyGenParameterSpec.Builder( \n    alias, \n    KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY) \n    .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512) \n     //setAttestationChallenge is missing \n     //setUserConfirmationRequired() is missing and set to false\n    .build()); \nKeyPair kp = kpg.generateKeyPair();",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-863",
            "name": "Incorrect Authorization",
            "url": "https://cwe.mitre.org/data/definitions/863.html",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M6-2016",
            "name": "Insecure Authorization",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M6-Insecure_Authorization",
            "description": "To test for poor authorization schemes, testers can perform binary attacks against the mobile app and try to execute privileged functionality that should only be executable with a user of higher privilege while the mobile app is in 'offline' mode (for more information on binary attacks, see M9 and M10). As well, testers should try to execute any privileged functionality using a low-privilege session token within the corresponding POST/GET requests for the sensitive functionality to the backend server.Poor or missing authorization schemes allow an adversary to execute functionality they should not be entitled to using an authenticated but lower-privilege user of the mobile app. Authorization requirements are more vulnerable when making authorization decisions within the mobile device instead of through a remote server. This may be a requirement due to mobile requirements of offline usability."
        }
    ]
}
