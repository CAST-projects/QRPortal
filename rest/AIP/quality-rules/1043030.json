{
    "id": 1043030,
    "name": "Ensure the X-Frame-Options header is setup (ASP.NET)",
    "href": "AIP/quality-rules/1043030",
    "critical": true,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will detect if X-Frame-Options has been enabled for clickjacking protection when doing HTTP calls. It will check the web.config file as well as the source code.",
    "output": "Violated Config files",
    "rationale": "Clickjacking, also known as a \"UI redress attack\", is when an attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on another page when they were intending to click on the the top level page. Thus, the attacker is \"hijacking\" clicks meant for their page and routing them to another page, most likely owned by another application, domain, or both. \nUsing a similar technique, keystrokes can also be hijacked. With a carefully crafted combination of stylesheets, iframes, and text boxes, a user can be led to believe they are typing in the password to their email or bank account, but are instead typing into an invisible frame controlled by the attacker.",
    "reference": "https://www.owasp.org/index.php/Clickjacking\n\nhttps://www.owasp.org/index.php/Cross_Frame_Scripting",
    "remediation": "Ensure you have setup the X-Frame-Options in HTTP Response",
    "remediationSample": "// globally in Web.config file\n\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <system.web>\n  </system.web>\n  <system.webServer>\n    <httpProtocol>\n      <customHeaders>\n        <add name=\"X-Frame-Options\" value=\"SAMEORIGIN\" />\n      </customHeaders>\n    </httpProtocol>\n  </system.webServer>\n</configuration>\n\n// or in the source code\n\nprotected void Application_BeginRequest(object sender, EventArgs e)\n{\n    HttpContext.Current.Response.AddHeader(\"X-Frame-Options\", \"Deny\");\n}\n\n// In case of .NetCore app, in Configure method of Startup class:-\n\napp.Use(async (context, next) =>\n{\n    context.Response.Headers.Add(\"X-Frame-Options\", \"SAMEORIGIN\");\n    await next();\n});\n\nNote:- Accepted values are 'SAMEORIGIN', 'DENY' and 'ALLOW FROM \"url\"'. 'ALLOW FROM *' will result into violation.",
    "sample": "// globally in Web.config file\n\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <system.web>\n  </system.web>\n  <system.webServer>\n    <httpProtocol>\n      <customHeaders>\n      ...\n      </customHeaders>\n    </httpProtocol>\n  </system.webServer>\n</configuration>\n\n// or locally in the source code\n\nprotected void Application_BeginRequest(object sender, EventArgs e)\n{\n    ...\n}",
    "total": "Number of Config files and Global methods",
    "alternativeName": "Ensure you have setup the X-Frame-Options in HTTP Response (ASP.NET)",
    "businessCriteria": [
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062305,
            "name": "OWASP-2013-A5 Security Misconfiguration",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062326,
            "name": "OWASP-2017-A6 Security Misconfiguration",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138636,
            "name": "ASP.NET",
            "href": "AIP/technologies/138636"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-1021",
            "name": "Improper Restriction of Rendered UI Layers or Frames",
            "url": "https://cwe.mitre.org/data/definitions/1021.html",
            "description": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with."
        },
        {
            "standard": "OWASP",
            "id": "A5-2013",
            "name": "Security Misconfiguration",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration",
            "description": "Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date."
        },
        {
            "standard": "OWASP",
            "id": "A6-2017",
            "name": "Security Misconfiguration",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration",
            "description": "Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information. Not only must all operating systems, frameworks, libraries, and applications be securely configured, but they must be patched/upgraded in a timely fashion."
        },
        {
            "standard": "OWASP",
            "id": "API7-2019",
            "name": "Security Misconfiguration",
            "url": null,
            "description": "Security misconfiguration is commonly a result of unsecure default configurations, incomplete or ad-hoc configurations, open cloud storage, misconfigured HTTP headers, unnecessary HTTP methods, permissive Cross-Origin resource sharing (CORS), and verbose error messages containing sensitive information."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-2.2.4",
            "name": "Configure system security parameters to prevent misuse.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-2.2.4",
            "name": "Configure system security parameters to prevent misuse.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
