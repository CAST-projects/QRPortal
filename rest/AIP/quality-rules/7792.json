{
    "id": 7792,
    "name": "Avoid Classes with a High Number Of Children",
    "href": "AIP/quality-rules/7792",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of classes",
    "description": "Avoid Classes with a High Number Of Children (NOC > X)\nNOC is the number of immediate <Sub-Classes> of the Class.\nThe threshold is a parameter and can be changed at will.",
    "output": "This report lists all Classes with a Number Of Children (NOC > X)\nIt provides the following information:\n  * Class full name, NOC",
    "rationale": "Depth is generally better than breadth in class hierarchy, since it promotes reuse of methods through inheritance.\nNOC measures the potential influence a Class has on the design. Classes with large number of children require more intensive testing as through inheritance an implementation error can potentially lead to many regression bugs.\nTechnical or framework classes which are evolving and will not be changed often should not be concerned by this rule.",
    "reference": "http://it-cisq.org/\nCISQ: ASCMM-MNT-18\n\nA Metrics Suite for Object Oriented Design\nChidamber, S.R. and C.F. Kemerer\nIEEE Transactions on Software Engineering, 1994",
    "remediation": "Review the design of Class hierarchy",
    "total": "Number of classes",
    "alternativeName": "Avoid Classes with a High Number Of Children",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062101,
            "name": "CISQ-Maintainability",
            "href": "AIP/business-criteria/1062101"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061001,
            "name": "ISO-5055-Maintainability",
            "href": "AIP/business-criteria/1061001"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062119,
            "name": "ASCMM-MNT-18 - Class Element Excessive Number of Children",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061137,
            "name": "CWE-1086: Class with Excessive Number of Child Classes",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61010,
            "name": "Complexity - OO Inheritance and Polymorphism",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        },
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": -8,
            "name": "PowerBuilder",
            "href": "AIP/technologies/-8"
        },
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        },
        {
            "id": -9,
            "name": "Visual Basic",
            "href": "AIP/technologies/-9"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-18",
            "name": "Class Element Excessive Number of Children",
            "url": null,
            "description": "Objective\nAvoid overly complex object-oriented inheritance capabilities when dealing with the number of direct children of classes\n\nConsequence\nSoftware that does not follow the principles of reuse requires more maintenance effort in order to propagate changes to all instances of duplicated code\n\nMeasure Element\nNumber of instances where the number of children of a class element (that is, its number of child classes) exceeds a threshold value. The default threshold value for number of children of a class element is 10\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-1086",
            "name": "Class with Excessive Number of Child Classes",
            "url": "https://cwe.mitre.org/data/definitions/1086.html",
            "description": "A class contains an unnecessarily large number of children."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-1086",
            "name": "Class with Excessive Number of Child Classes",
            "url": "https://cwe.mitre.org/data/definitions/1086.html",
            "description": "A class contains an unnecessarily large number of children."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1086",
            "name": "Class with Excessive Number of Child Classes",
            "url": "https://cwe.mitre.org/data/definitions/1086.html",
            "description": "A class contains an unnecessarily large number of children."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        {
            "name": "Maximum Number Of Children",
            "description": "Max Number Of Children per class",
            "technologies": [
                {
                    "id": -15,
                    "name": "ABAP",
                    "href": "AIP/technologies/-15",
                    "values": [
                        9
                    ]
                },
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        3
                    ]
                },
                {
                    "id": 1021000,
                    "name": "Python",
                    "href": "AIP/technologies/1021000",
                    "values": [
                        9
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
