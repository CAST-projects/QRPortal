{
    "id": 1101008,
    "name": "Avoid non-SARGable queries",
    "href": "AIP/quality-rules/1101008",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "List all SQL Artifacts containing a query having 100% non-SARGable arguments expressions in where clauses or in the join.\nSARG (Search ARGument) refers to a WHERE clause that compares a column to something.\n\nNon-SARGable search arguments : \nIS NULL, <>, !=, !>, !<, NOT, NOT EXISTS, NOT IN, NOT LIKE, and LIKE \u2018%XXX'. \n\nNon-SARGable expressions :\n1. expressions that include a function on a column, scalar calculations like :\nyear(col1) = 2016 \n\n2. expressions that have the same column on both sides of the operator, like:\ntable1.col1 = table1.col1\n\n3. arithmetic/wildcards operations and comparisons on columns, like : \ncol1 + 50 > 0  \nname + ' some text ' like ' bla bla some text'",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Non-SARGable WHERE clauses, having 100% Non-SARGable arguments, are performances killers : for a non-SARGable query, the query optimizer has to scan all the rows in the table even if that column has an index.",
    "reference": "http://dotnetvj.blogspot.com/2010/02/sargable-vs-non-sargable-queries.html",
    "remediation": "Check the statement and if so, replace non-SARGable predicates with SARGable.",
    "remediationSample": "-- Index seek  (fast)\nWHERE ColumnValue = 'Summer' -- sargable predicate\n\n------------\n-- Index seek if there is an index on ColumnValue\nWHERE ColumnValue LIKE 'sum%'  -- sargable predicate\n\n------------\n-- Index seek\nWHERE ColumDate >='2017-01-01' and ColumDate < '2017-02-01' -- sargable predicate\n\n------------\n-- Index seek if there is an index on ColumnValue\nWHERE  ColumnValue = 50 -- sargable predicate",
    "sample": "-- Index scan (slow)\nWHERE UPPER(ColumnValue) = 'SUMMER' -- not sargable predicate\n\n------------\n-- Table scan or index scan on a primary key index\n-- no index use on ColumnValue\nWHERE SUBSTRING(ColumnValue,1,3) = 'sum' -- not sargable predicate\n\n------------\n-- Table scan - no index use on ColumDate\nWHERE year(ColumDate) = 2017 and month(ColumDate) = 1 -- not sargable predicate\n\n------------\n-- not sargable predicate due to function use\n-- Table scan\nWHERE  floor(ColumnValue) = 50  -- not sargable predicate",
    "total": "Number of Artifacts with SQL code.",
    "alternativeName": "Make sure you use SARGable predicate in WHERE clauses and JOINS to prevent additional costs on CPU",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1062200,
            "name": "MIPS-Reduction-Index",
            "href": "AIP/business-criteria/1062200"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61019,
            "name": "Efficiency - SQL and Data Handling Performance",
            "weight": 3,
            "critical": false
        },
        {
            "id": 1062202,
            "name": "MIPS Reduction - focus on data access efficiency",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 0,
            "name": "ALL TECHNOLOGIES",
            "href": "AIP/technologies/0"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
