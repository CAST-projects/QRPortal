{
    "id": 8136,
    "name": "Beans with normal scope must be proxyable to avoid runtime errors",
    "href": "AIP/quality-rules/8136",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "This quality rules checks all the CDI Beans, that is all the classes and producer methods which are annotated with a scope or a qualifier",
    "output": "This quality rule reports all the CDI beans which cannot be proxied.\n\nIt handles both the standard scopes and the custom scopes.\n    ",
    "rationale": "\nFor a CDI Bean with a normal scope, the CDI contained will provide a proxy of the underlying object instead of a reference to the object itself. If an injected class is not proxyable, the container will raise an exception at runtime. \n\nThis error will not be detected at compilation. \n\nAs per the CDI specs, A class can be put in a proxy if it fulfills the following constraints: \n* It must have a non private Constructor with no argument, \n* It must neither be final nor have a final method. \n\nThe normal scopes are Session, RequestScope, Conversation and Application, and any custom scope annotated as normal. ",
    "reference": "https://docs.jboss.org/weld/reference/latest/en-US/html/injection.html#_client_proxies \nhttps://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#client_proxies ",
    "remediation": "Make sure that the injected class fulfills the constraints of a proxy class, change the bean scope.",
    "remediationSample": "\npublic class Producer{\n\n  @Produces\n  @Dependent\n  @Named(\"stringProvider\")\n  public static String getStringId()\n  {\n  return \"SomeStaticID\";\n  }\n}\n\n \n@Named\npublic class MyBean \n{\n  @Named(\"stringProvider\")\n  private String id;\n}\n     ",
    "sample": "\npublic class Producer{\n  @Produces\n  @SessionScoped\n  @Named(\"stringProvider\")\n  public static String getStringId()\n  {\n     return \"SomeStaticID\";\n  }\n}\n\n \n@Named\npublic class MyBean \n{\n  @Named(\"stringProvider\")\n  private String id;\n}\n    ",
    "total": "Number of violations",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        {
            "name": "threshold",
            "description": null,
            "technologies": [
                {
                    "id": 140029,
                    "name": "JEE",
                    "href": "AIP/technologies/140029",
                    "values": [
                        100
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
