{
    "id": 8058,
    "name": "A pointer to a derived Class shall only be cast implicitly to a pointer to base Class",
    "href": "AIP/quality-rules/8058",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for C++ functions that contain C-style casts or static_casts from a pointer to a derived class to a pointer to one of its base classes.",
    "output": "Associated to each C++ constructor, destructor, or method with violations, the Quality Rule provides:\n- Number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - cast between derived and base classes\n  - derived class declaration\n  - base class declaration",
    "rationale": "Casting from a derived class to a base class is implicit. If you explicitly write a cast, it will work too, but it will also work in a situation where it should not, for instance if the class hierarchy has changed.\n\nRelying on implicit casting is therefore both simpler to use and safer.",
    "remediation": "Following the example, if A and B were not related in any way, line 1 would still compile (and be equivalent to reinterpret_cast), but would be wrong, see rule \"Never perform C-style cast between incompatible Class pointers\" (id 8002).\nIf A and B were related, but B not be derived from A, line 1 and 2 would still compile, but would be wrong. See rule \"A pointer to a base Class shall only be cast to a pointer to a derived Class by means of 'dynamic_cast'\" (id 8060).",
    "sample": "class A\n{\n};\n\nclass B : public A\n{\n};\n\nA* p1 = (A*)(new B()); // 1: Violation\nA* p1 = static_cast<A*>(new B()); // 2: Violation\nA* p1 = new B(); // 3: OK",
    "total": "Number of C++ constructors, destructors, and methods",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
