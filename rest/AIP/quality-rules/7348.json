{
    "id": 7348,
    "name": "Avoid too many Indexes on one Table",
    "href": "AIP/quality-rules/7348",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of indexes of the table",
    "description": "This rule will report a violation where the number of indexes on a table exceeds X (where X is configurable parameter). Note that the rule will consider Primary Keys as indexes since we know that as per the RDBMS, there is a default index created for each Primary Key.",
    "output": "Associated to each Table with violations, the Quality Rule provides: \n- The Number of indexes of the table.",
    "rationale": "Every index increases the time it takes to perform INSERTS, UPDATES and DELETES, so the number of indexes should not be too high. Try to not use more than a maximum of 4-5 indexes for one table. If you have a read-only table, then the number of indexes is not as important and thus may be larger.",
    "remediation": "Drop unecessary indexes.",
    "remediationSample": "Drop the index & empty the table\n=> 2563 ms",
    "sample": "-- SQL Server Sample\ncreate table MyManyIndexTable( C1 int, C2 int, C3 int, C4 int, C5 int)\n\n\ncreate index MyManyIndexTable_I1 on MyManyIndexTable( C1)\ncreate index MyManyIndexTable_I2 on MyManyIndexTable( C2)\ncreate index MyManyIndexTable_I3 on MyManyIndexTable( C3)\ncreate index MyManyIndexTable_I4 on MyManyIndexTable( C4)\ncreate index MyManyIndexTable_I5 on MyManyIndexTable( C5)\n\n\ndeclare @t datetime\ndeclare @i int\nSet @i = 1\nset @t = getdate()\nwhile (@i < 5000)\nbegin\n   insert MyManyIndexTable select @i,@i,@i,@i,@i\n   set @i = @i+1\nend\nSELECT DATEDIFF(ms, @t, getdate()) as 'Elapsed Time'\n\n=> 3806 ms",
    "total": "Number of tables",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61019,
            "name": "Efficiency - SQL and Data Handling Performance",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 0,
            "name": "ALL TECHNOLOGIES",
            "href": "AIP/technologies/0"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-6",
            "name": "Large Data Resource ColumnSet Excessive Number of Index Elements",
            "url": null,
            "description": "Objective\nDetection of occurrences of this pattern helps decrease software resource waste by preventing the existence of too many indices on very large data tables.\n\nConsequence\nSoftware featuring known under-efficient SQL Query and Data Access constructs requires excessive computational resources\n\n"
        }
    ],
    "parameters": [
        {
            "name": "MAX_INDEX",
            "description": null,
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        5
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
