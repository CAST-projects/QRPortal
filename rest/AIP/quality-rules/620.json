{
    "id": 620,
    "name": "Avoid base Classes without virtual Destructors",
    "href": "AIP/quality-rules/620",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for classes that are derived in sub-classes and that do not provide a virtual destructor.",
    "output": "Associated to each C++ class with violations, the Quality Rule provides:\n- Bookmarks for violation occurrences found in source code:\n  - Class definition\n  - Non-virtual destructor if any",
    "rationale": "If an object is handled through a pointer to its base class (handled through a generic interface that is certainly a major objective in object-oriented programming), memory and stability problems occur when the object is to be deleted and when the object has been created on the heap with new. If the pointer is to the base class, the compiler can only know to call the base-class version of the destructor during the delete. Any memory clean up or functional actions that must take place when derived classes are deleted will not take place provoking memory leaks, resource losses and stability issues.",
    "reference": "Bruce Eckel's \"Thinking in C++\"\nhttp://www.cs.huji.ac.il/labs/parallel/Docs/C++/Guide/tic0161.html\n\nBruce Eckel's \"Thinking in C++\"\nhttp://www.cs.huji.ac.il/labs/parallel/Docs/C++/Guide/",
    "remediation": "Add a virtual destructor to the base class.",
    "remediationSample": "class CParent\n{\n    CParent() { ... }\n    virtual ~CParent() { ... }\n};\n\nclass CDerived : public CParent\n{\n...\n};",
    "sample": "class CParent\n{\n    CParent() { ... }\n    ~CParent() { ... }\n};\n\nclass CDerived : public CParent\n{\n...\n};",
    "total": "Number of C++ classes",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
