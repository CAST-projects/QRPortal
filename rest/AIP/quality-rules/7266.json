{
    "id": 7266,
    "name": "Call 'base.Dispose()' or 'MyBase.Finalize()' in the \"finally\" block of 'Dispose(bool)' methods",
    "href": "AIP/quality-rules/7266",
    "critical": false,
    "severity": 10,
    "maxWeight": 4,
    "description": "This quality rule checks that when implementing the MS recommended dispose pattern that is 'Dispose(bool)' methods. You should keep it\ninside try of try/finally block and inside finally block you should call 'base.Dispose(bool)' (C#) or 'MyBase.Finalize()' (VB.NET).",
    "output": "This report lists all Dispose methods with no try/finally block or with no call to 'base.Dispose(bool)' or 'MyBase.Finalize()' within the finally block.",
    "rationale": "If a type inherits from a disposable type, it must call the Dispose method of the base type from within its own Dispose method in order to make sure all allocated resources are released properly and timely.\nFailing to do so can provoke a resource leak that will  lead to serious application availability and stability issues.",
    "reference": "https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose#implement-the-dispose-pattern-for-a-derived-class\nhttps://www.codeproject.com/Articles/15360/Implementing-IDisposable-and-the-Dispose-Pattern-P",
    "remediation": "keep dispose(bool) method in try-finally block and inside finally block make use of base.Dispose() or MyBase.Finalize() method.",
    "remediationSample": "protected override void Dispose(bool disposing)\n   {\n      if(!this.disposed)\n      {\n         try\n         {\n            if(disposing)\n            {\n               // Release the managed resources you added in\n               // this derived class here.\n               addedManaged.Dispose();         \n            }\n            // Release the native unmanaged resources you added\n            // in this derived class here.\n            CloseHandle(addedNative);\n            this.disposed = true;\n         }\n         finally\n         {\n            // Call Dispose on your base class.\n            base.Dispose(disposing);\n         }\n      }\n   }",
    "sample": "protected virtual void Dispose(bool disposing) \n{\n  if (disposing) \n    {\n      // Dispose managed resources\n    }\n\n    // Free native resources\n}",
    "total": "Number of Dispose(bool) methods defined in classes which implement the IDisposable interface",
    "alternativeName": "Call 'base.Dispose()' or 'MyBase.Finalize()' in the \"finally\" block of 'Dispose(bool)' methods",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61018,
            "name": "Efficiency - Memory, Network and Disk Space Management",
            "href": "AIP/technical-criteria/61018",
            "weight": 4,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
