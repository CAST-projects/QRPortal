{
    "id": 4576,
    "name": "Provide accessors to Private Fields",
    "href": "AIP/quality-rules/4576",
    "critical": false,
    "maxWeight": 4,
    "description": "Each private field should have a setter and a getter except final static fields. \n\n Accessors are identified using the following java bean naming conventions: \"set\" and \"get\" followed by the name of the field with the first char in uppercase (case sensitive). For Boolean fields, the getter can also be named \"is\" followed by the name of the field. \n\n Methods not using this naming convention are not considered as accessors.",
    "output": "This report lists all Private Fields that do not have a setter and a getter. It provides the following information: Field full name",
    "rationale": "To respect OO encapsulation concepts, private fields should always be accessed through accessors. \n\nThe only exception is injected fields of classes which are managed by a framework (CDI, JSF). In that case, a setter is not required, since the field content will be set directly by the injection framework.",
    "reference": "http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\nJavaBeans(TM) Specification 1.01 Final Release - paragraph 8.3 Design Patterns for Properties p 55",
    "remediation": "Write a getter and setter to each private field",
    "total": "Number of private java class fields.",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
            "weight": 4,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
