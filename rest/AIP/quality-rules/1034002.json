{
    "id": 1034002,
    "name": "Avoid cookie injection (PHP)",
    "href": "AIP/quality-rules/1034002",
    "critical": false,
    "severity": 10,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.php.security",
        "href": "AIP/extensions/com.castsoftware.php.security"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric uses Psalm data-flow engine to detect a call path where input data from the user is used to create a cookie without prior validation and sanitization.\n\nUser input sanitizations can be specified to Psalm data-flow engine using the \"@psalm-taint-escape cookie\" annotation.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software constructs all or part of cookie via user-controllable inputs. These inputs are not neutralized or are incorrectly neutralized. As a consequence, the cookie value may be completely altered.\nThe risk of setting arbitrary cookies depends on further application configuration. For instance :\n- Session Fixation: If the authentication cookie doesn't change after a successful login an attacker could fixate the session cookie. If a victim logs in with a fixated cookie, the attacker can now take over the session of the user.\n- Cross-Site-Scripting (XSS): Some application code could read cookies and print it out unsanitized to the user.",
    "reference": "CWE-384: Session Fixation\nhttps://cwe.mitre.org/data/definitions/384.html\n\nOpen Web Application Security Project (OWASP) \nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection\n\nOWASP Top Ten 2021 Category A03:2021 - Injection\nhttps://owasp.org/Top10/A03_2021-Injection/\n\nOWASP Cheat Sheet Series - Session Management Cheat Sheet\nhttps://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
    "remediation": "If this is required functionality, limit the cookie setting to values and not the name. (e.g. authtoken in the example)\n\nMake sure to change session tokens after authentication attempts.",
    "remediationSample": "<?php\n\n/**\n* @psalm-taint-escape cookie\n*/\n$escaped_value = my_escaping_function($_GET['value']);               // FUNCTION ANNOTATED WITH \"@psalm-taint-escape cookie\"\nsetcookie('authtoken', $escaped_value, time() + (86400 * 30), '/');  // FIXED",
    "sample": "<?php\n\nsetcookie('authtoken', $_GET['value'], time() + (86400 * 30), '/');    // VIOLATION",
    "total": "Number of PHP artifacts",
    "alternativeName": "Ensure you sanitize cookie values constructed from user input",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-93",
            "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-93",
            "standard": "CWE"
        },
        {
            "id": "CWE-113",
            "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
            "href": "AIP/quality-standards/CWE/items/CWE-113",
            "standard": "CWE"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
