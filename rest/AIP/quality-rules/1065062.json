{
    "id": 1065062,
    "name": "Avoid testing floating point numbers for equality",
    "href": "AIP/quality-rules/1065062",
    "critical": true,
    "maxWeight": 7,
    "description": "Reports all equality or inequality operations on floating point variables:\n- float x == (...)\n- float x != (...)\n- double x == (...)\n- double x != (...)\nA violation is raised if one of the operands of the ==/!= operator is a float or a double. The other operand is not considered, it can be another floating point variable, an integer or a boolean.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The inherent nature of floating-point types is such that comparisons of equality will often not evaluate to true, even when they are expected to. Also, the behavior of such a comparison cannot be predicted before execution, and may well vary from one implementation to another.\nThe recommended method for achieving deterministic floating-point comparisons is to write a library that implements the comparison operations. The library should take into account the floating-point granularity (std::numeric_limits<float>:: epsilon()) and the magnitude of the numbers being compared.\n\nDue to rounding errors, most floating-point numbers end up being slightly imprecise. As long as this imprecision stays small, it can usually be ignored. However, it also means that numbers expected to be equal (e.g. when calculating the same result through different correct methods) often differ slightly, and a simple equality test fails.\nA comparison between a floating-point number and an integer has the same problem since the integer is cast into a floating-point for the comparison.",
    "reference": "MISRA C++, 6-2-2: Floating-point expressions shall not be directly or indirectly tested for equality or inequality\nAUTOSAR, C++, 2008, M6-2-2 : Floating-point expressions shall not be directly or indirectly tested for equality or inequality.",
    "remediation": "Except specific cases where we can expect that the value is the same (see http://randomascii.wordpress.com/2012/06/26/doubles-are-not-floats-so-dont-compare-them), the best is to compare the difference with Epsilon a small float number that you can configure according to the accuracy you want.",
    "remediationSample": "The following is better, but only if the magnitudes are appropriate:\n if ( fabs ( x \u2013 y ) <=       \n             std::numeric_limits<float>::epsilon( ) )   // Compliant",
    "sample": "float32_t x, y; \nif ( x == y )     // Non-compliant\nif ( x == 0.0f )  // Non-compliant\n\n\nAn indirect test is equally problematic and is also prohibited by this rule:\nif ( ( x <= y ) && ( x >= y ) )   // Non-compliant\nif ( ( x < y ) || ( x > y ) )     // Non-compliant",
    "total": "Number of C / C++ methods and functions",
    "alternativeName": "Ensure that testing floating point numbers for equality is not used as is source of imprecision",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "OMG-ASCQM-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "OMG-ASCQM-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062173,
            "name": "ASCRM-RLB-9 - Float Type Storable and Member Data Element Comparison with Equality Operator",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061130,
            "name": "CWE-1077: Floating Point Comparison with Incorrect Operator",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "C-CPP",
            "id": "AUTOSAR-CPP-2014-Expressions",
            "name": "Expressions",
            "url": null,
            "description": null
        },
        {
            "standard": "C-CPP",
            "id": "MISRA-CPP-2008-Expressions",
            "name": "Expressions",
            "url": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-9",
            "name": "Float Type Storable and Member Data Element Comparison with Equality Operator",
            "url": null,
            "description": null
        },
        {
            "standard": "CWE",
            "id": "CWE-1077",
            "name": "Floating Point Comparison with Incorrect Operator",
            "url": null,
            "description": null
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-1077",
            "name": "Floating Point Comparison with Incorrect Operator",
            "url": null,
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1077",
            "name": "Floating Point Comparison with Incorrect Operator",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
