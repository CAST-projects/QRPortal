{
    "id": 1019016,
    "name": "Avoid having the property IncludeExceptionDetailInFaults activated in the source code",
    "href": "AIP/quality-rules/1019016",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "The rules looks for all the artifacts having the IncludeExceptionDetailInFaults property set to true.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Setting IncludeExceptionDetailInFaults to true enables clients to obtain information about internal service method exceptions; it is only recommended as a way of temporarily debugging a service application. In addition, the WSDL for a method that returns unhandled managed exceptions in this way does not contain the contract for the FaultException<TDetail> of type ExceptionDetail. Clients must expect the possibility of an unknown SOAP fault to obtain the debugging information properly.",
    "reference": "https://docs.microsoft.com/fr-fr/dotnet/api/system.servicemodel.servicebehaviorattribute.includeexceptiondetailinfaults?view=netframework-4.7.2",
    "remediation": "Set the property to false or have by the default value.",
    "remediationSample": "Remediation in Config File:\n\n<serviceDebug includeExceptionDetailInFaults=\"false\" httpHelpPageEnabled=\"True\"/> // Fixed\n\n___________________________________________\n\nRemediation in source Code:\nServiceHost host = new ServiceHost(typeof(MyWCFService));\n\nServiceDebugBehavior debug = host.Description.Behaviors.Find<ServiceDebugBehavior>();\n\n// if not found - add behavior with setting turned on \nif (debug == null)\n{\n    host.Description.Behaviors.Add(\n         new ServiceDebugBehavior() { IncludeExceptionDetailInFaults = false }); //Fixed\n}\nelse\n{  \n    // make sure setting is turned ON\n    if (!debug.IncludeExceptionDetailInFaults)\n    {\n        debug.IncludeExceptionDetailInFaults = false; //Fixed\n    }\n}\n\nhost.Open();\n______________________________________________________________\n[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Single,InstanceContextMode = InstanceContextMode.Single,IncludeExceptionDetailInFaults=false)]\n\n-or-\n\n    [ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Single,InstanceContextMode = InstanceContextMode.Single)]",
    "sample": "Sample in the config file \n\n<configuration>  \n<system.serviceModel>    \n<behaviors><serviceBehaviors>        \n<behavior name=\"MyServiceBehavior\">          \n<serviceDebug includeExceptionDetailInFaults=\"true\" httpHelpPageEnabled=\"True\"/>\n..\n..\n</configuration>\n_______________________________________________________\n\nSample in Source Code(Non-IIS Hosting Scenarios):\n\nServiceHost host = new ServiceHost(typeof(MyWCFService));\n\nServiceDebugBehavior debug = host.Description.Behaviors.Find<ServiceDebugBehavior>();\n\nif (debug == null)\n{\n    host.Description.Behaviors.Add(\n         new ServiceDebugBehavior() { IncludeExceptionDetailInFaults = true }); // Violation\n}\nelse\n{  \n_______________________________________________________\n\n[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Single,InstanceContextMode = InstanceContextMode.Single,IncludeExceptionDetailInFaults=true)]",
    "total": "Number of WCF configurations",
    "alternativeName": "Avoid having the property IncludeExceptionDetailInFaults activated in the source code",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062306,
            "name": "OWASP-2013-A6 Sensitive Data Exposure",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062323,
            "name": "OWASP-2017-A3 Sensitive Data Exposure",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1019000,
            "name": "WCF",
            "href": "AIP/technologies/1019000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-489",
            "name": "Active Debug Code",
            "url": "https://cwe.mitre.org/data/definitions/489.html",
            "description": "The application is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information."
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
