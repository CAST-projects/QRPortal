{
    "id": 7556,
    "name": "Avoid instanceof in Methods that override or implement Object.equals(), Comparable.compareTo()",
    "href": "AIP/quality-rules/7556",
    "critical": false,
    "maxWeight": 5,
    "description": "Reports all overridden java.lang.Object.equals(java.lang.Object) and implementations of java.lang.Comparable.compareTo(java.lang.Object) that reference instanceof.",
    "output": "List all equals and compareTo methods that reference instanceof. The rule provides the following information: Method Full Name",
    "rationale": "When checking the equality between two objects or comparing them, before comparing the attribute's value the type equality must be validated. Often the instanceof operator is used to perform this equality, however, the condition fails to return false if the argument is a subclass of the class that is compared. Thus, it might violate the symmetry requirement of the contract (x.equals(y) should return true if and only if y.equals(x) returns true). It is the same for compareTo since the recommended behavior is to use a natural ordering that is consistent with equals.\n\nAs a consequence you might have unexpected behavior where two objects are considered equals, greater or less than while they are not and moreover, the result depends on which object the method has invoked.",
    "reference": "http://www.angelikalanger.com/Articles/JavaSolutions/SecretsOfEquals/Equals.html",
    "remediation": "Replace instanceof usage by the comparison of each object class name or using org.hibernate.Hibernate.getClass to get the true, underlying class of a proxied persistent class.",
    "remediationSample": "class MyClass {\n   ...\n   public boolean equals(Object other) {\n       if (this==other) return true;\n       if (other==null) return false;\n       // FIXED\n       if (other.getClass() != this.getClass()) return false;\n       // OR in case of Hibernate\n       if (!Hibernate.getClass(other).equals(Hibernate.getClass(this)) return false;\n       ...\n    }\n   ...\n}",
    "sample": "class MyClass {\n   ...\n   public boolean equals(Object other) {\n       if (this==other) return true;\n       if (other==null) return false;\n       // VIOLATION\n       if ( !(other instanceof MyClass)) return false;\n       ...\n    }\n   ...\n}",
    "total": "Number of equals methods that override java.lang.Object.equals(java.lang.Object) and the number of methods that implement java.lang.Comparable.compareTo(java.lang.Object)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
