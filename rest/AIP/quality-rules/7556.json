{
    "id": 7556,
    "name": "Avoid instanceof in Methods that override or implement Object.equals(), Comparable.compareTo()",
    "href": "AIP/quality-rules/7556",
    "critical": false,
    "maxWeight": 5,
    "description": "Reports all overridden java.lang.Object.equals(java.lang.Object) and implementations of java.lang.Comparable.compareTo(java.lang.Object) that reference instanceof.",
    "output": "List all equals and compareTo methods that reference instanceof. The rule provides the following information: Method Full Name",
    "rationale": "When checking the equality between two objects or comparing them, before comparing the attribute's value the type equality must be validated. Often the instanceof operator is used to perform this equality, however, the condition fails to return false if the argument is a subclass of the class that is compared. Thus, it might violate the symmetry requirement of the contract (x.equals(y) should return true if and only if y.equals(x) returns true). It is the same for compareTo since the recommended behavior is to use a natural ordering that is consistent with equals.\n\nAs a consequence you might have unexpected behavior where two objects are considered equals, greater or less than while they are not and moreover, the result depends on which object the method has invoked.",
    "reference": "http://www.angelikalanger.com/Articles/JavaSolutions/SecretsOfEquals/Equals.html",
    "remediation": "Replace instanceof usage by the comparison of each object class name or using org.hibernate.Hibernate.getClass to get the true, underlying class of a proxied persistent class.",
    "remediationSample": "class MyClass {\n   ...\n   public boolean equals(Object other) {\n       if (this==other) return true;\n       if (other==null) return false;\n       // FIXED\n       if (other.getClass() != this.getClass()) return false;\n       // OR in case of Hibernate\n       if (!Hibernate.getClass(other).equals(Hibernate.getClass(this)) return false;\n       ...\n    }\n   ...\n}",
    "sample": "class MyClass {\n   ...\n   public boolean equals(Object other) {\n       if (this==other) return true;\n       if (other==null) return false;\n       // VIOLATION\n       if ( !(other instanceof MyClass)) return false;\n       ...\n    }\n   ...\n}",
    "total": "Number of equals methods that override java.lang.Object.equals(java.lang.Object) and the number of methods that implement java.lang.Comparable.compareTo(java.lang.Object)",
    "alternativeName": "Ensure that instanceof in Methods that override or implement Object.equals(), Comparable.compareTo() are not used",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
