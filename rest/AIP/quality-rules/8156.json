{
    "id": 8156,
    "name": "Persistent classes should implement GetHashCode() and Equals()",
    "href": "AIP/quality-rules/8156",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "Reports all persistent classes that don't implement Object.GetHashCode or Object.Equals directly (class that is referenced in the mapping file) or in an inherited class that holds persistent fields (this is the case when a persistent class makes persistent inherited fields). ",
    "output": "This report lists all .Net persistent classes that don't implement Object.GetHashCode or Object.Equals directly.\n\nIt provides the following information:\n- Class Full Name",
    "rationale": "Whenever you work with objects in detached state, and especially if you test them for equality (usually in hash-based collections), you need to supply your own implementation of the equals() and hashCode() methods for your persistent classes.\n\nNevertheless, it's possible to build a complex application with identity (default) equals as long as you exercise discipline when dealing with detached objects from different sessions. If this concept of equality isn't what you want, you must override equals() in your persistent classes.",
    "remediation": "Check if you have instances from multiple sessions and implement Object.GetHashCode and Object.Equals if it is the case. If it is not the case, we recommend implementing it anyway to avoid issues during future evolutions. ",
    "remediationSample": "[Serializable]\npublic class MyObject\n{\n    public int n1 = 0;\n    public int n2 = 0;\n    public String str = null;\n\n    public override int GetHashCode()\n    {\n        return n1;\n    }\n\n    public override bool Equals(Object obj)\n    {\n        if (obj == null || !(obj is MyObject))\n            return false;\n        else\n            return n1 == ((MyObject)obj).n1;\n    }\n\n}",
    "sample": "[Serializable]\npublic class MyObject\n{\n    public int n1 = 0;\n    public int n2 = 0;\n    public String str = null;\n}",
    "total": "Number of persistent classes",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
