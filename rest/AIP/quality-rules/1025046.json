{
    "id": 1025046,
    "name": "Avoid MVC injection through API requests",
    "href": "AIP/quality-rules/1025046",
    "critical": true,
    "severity": 30,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.securityanalyzer",
        "href": "AIP/extensions/com.castsoftware.securityanalyzer"
    },
    "associatedValueName": "Call stack from user input source down to the target method",
    "description": "Using CAST data-flow engine, this quality rule detects execution paths from API requests down to MVC constructors and setters, which are open vulnerabilities to injection flaws.",
    "output": "List all methods that make resource calls forged by API requests\n\nIt provides the following information:\n - Method full name\n - Call stack from API request down to the target method.",
    "rationale": "The software constructs all or part of a MVC parameters via user-controllable inputs. If an attacker provides a URL with the request parameter matching a sensitive file location, they would be able to view that file, for instance applicationContext.xml, and from there, other .jar or .class files. The latter could used to plan for other attacks and/or gain sensitive information about the application.",
    "reference": "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nhttps://cwe.mitre.org/data/definitions/74.html\n\nCWE-552: Files or Directories Accessible to External Parties\nhttps://cwe.mitre.org/data/definitions/552.html\n\nOWASP Attacks - Full Path Disclosure\nhttps://owasp.org/www-community/attacks/Full_Path_Disclosure",
    "remediation": "Assume all input is malicious. \nAvoid using inputs. If it is not possible, use an \"accept known good\" input validation strategy, i.e., use stringent white-lists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack.\nAlternatively, switch to Spring Web Flow.",
    "remediationSample": "@RequestMapping(value = \"/content\", method = RequestMethod.GET)\npublic ModelAndView getContentFromParam(@RequestParam(\"page\") String page) {\n    String authorizedPage = isAuthorizedPage(page);    // HINT : configure isAuthorizedPage() as sanitization.\n    if (authorizedPage != null)\n        return new ModelAndView(authorizedPage);\n    return unhautorizedPage(page);\n}",
    "sample": "@RequestMapping(value = \"/content\", method = RequestMethod.GET)\npublic ModelAndView getContentFromParam(@RequestParam(\"page\") String page) {\n    return new ModelAndView(page);   // VIOLATION, since page is tainted input.\n}",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure you have secured your call to MVC",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066652,
            "name": "CWE-552 - Files or Directories Accessible to External Parties",
            "href": "AIP/technical-criteria/1066652",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1066174,
            "name": "CWE-74 - Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
            "href": "AIP/technical-criteria/1066174",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062341,
            "name": "OWASP-2021-A01 - Broken Access Control",
            "href": "AIP/technical-criteria/1062341",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063122,
            "name": "PCI-Requirement-6.5.8 - Improper access control",
            "href": "AIP/technical-criteria/1063122",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-74",
            "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-74",
            "standard": "CWE"
        },
        {
            "id": "CWE-552",
            "name": "Files or Directories Accessible to External Parties",
            "href": "AIP/quality-standards/CWE/items/CWE-552",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-10",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A01-2021",
            "name": "Broken Access Control",
            "href": "AIP/quality-standards/OWASP/items/A01-2021",
            "standard": "OWASP"
        },
        {
            "id": "API8-2019",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/API8-2019",
            "standard": "OWASP"
        },
        {
            "id": "API10-2023",
            "name": "Unsafe Consumption of APIs",
            "href": "AIP/quality-standards/OWASP/items/API10-2023",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.8",
            "name": "Improper access control",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.8",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.8",
            "name": "Improper access control",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.8",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        },
        {
            "id": "STIG-V-222609",
            "name": "The application must not be subject to input handling vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222609",
            "standard": "STIG-V5"
        },
        {
            "id": "STIG-V-222609",
            "name": "The application must not be subject to input handling vulnerabilities.",
            "href": "AIP/quality-standards/STIG-V6/items/STIG-V-222609",
            "standard": "STIG-V6"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
