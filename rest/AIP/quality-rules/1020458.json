{
    "id": 1020458,
    "name": "Avoid using unsecured cookie (React.js)",
    "href": "AIP/quality-rules/1020458",
    "critical": true,
    "severity": 20,
    "maxWeight": 7,
    "extension": {
        "name": "com.castsoftware.reactjs",
        "href": "AIP/extensions/com.castsoftware.reactjs"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check if cookies are set with secure parameter.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. This is why all major browsers support the secure cookie property that prevents client-side scripts from accessing the cookie. The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.\n\nThe Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.",
    "reference": "https://www.npmjs.com/package/react-cookie\nhttps://github.com/reactivestack/cookies\n\nhttps://cwe.mitre.org/data/definitions/614.html \nhttps://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure \nhttps://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
    "remediation": "Always setting secure option when creating a cookie.",
    "remediationSample": "# example with react-cookie\n\n// App.jsx\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\n \nimport NameForm from './NameForm';\n \nfunction App() {\n  const [cookies, setCookie] = useCookies(['name']);\n \n  function onChange(newName) {\n    setCookie('name', newName, { secure : true }); // no violation\n  }\n \n  return (\n    <div>\n      <NameForm name={cookies.name} onChange={onChange} />\n      {cookies.name && <h1>Hello {cookies.name}!</h1>}\n    </div>\n  );\n}\n \nexport default App;\n\n\n# example with react-cookies\n\nimport { Component } from 'react'\nimport cookie from 'react-cookies'\n \nimport LoginPanel from './LoginPanel'\nimport Dashboard from './Dashboard'\n \nclass MyApp extends Component {\n  constructor () {\n    super()\n \n    this.onLogin = this.onLogin.bind(this)\n    this.onLogout = this.onLogout.bind(this)\n  }\n \n  componentWillMount() {\n    this.state =  { userId: cookie.load('userId') }\n  }\n \n  onLogin(userId) {\n    this.setState({ userId })\n    cookie.save('userId', userId, { secure : true }) // no violation\n  }\n \n  onLogout() {\n    cookie.remove('userId', { secure : true })\n  }\n \n  render() {\n    const { userId } = this.state\n \n    if (!userId) {\n      return <LoginPanel onSuccess={this.onLogin} />\n    }\n \n    return <Dashboard userId={userId} />\n  }\n}",
    "sample": "# example with react-cookie\n\n// App.jsx\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\n \nimport NameForm from './NameForm';\n \nfunction App() {\n  const [cookies, setCookie] = useCookies(['name']);\n \n  function onChange(newName) {\n    setCookie('name', newName, {}); // violation\n  }\n \n  return (\n    <div>\n      <NameForm name={cookies.name} onChange={onChange} />\n      {cookies.name && <h1>Hello {cookies.name}!</h1>}\n    </div>\n  );\n}\n \nexport default App;\n\n\n# example with react-cookies\n\nimport { Component } from 'react'\nimport cookie from 'react-cookies'\n \nimport LoginPanel from './LoginPanel'\nimport Dashboard from './Dashboard'\n \nclass MyApp extends Component {\n  constructor () {\n    super()\n \n    this.onLogin = this.onLogin.bind(this)\n    this.onLogout = this.onLogout.bind(this)\n  }\n \n  componentWillMount() {\n    this.state =  { userId: cookie.load('userId') }\n  }\n \n  onLogin(userId) {\n    this.setState({ userId })\n    cookie.save('userId', userId, {}) // violation\n  }\n \n  onLogout() {\n    cookie.remove('userId', {})\n  }\n \n  render() {\n    const { userId } = this.state\n \n    if (!userId) {\n      return <LoginPanel onSuccess={this.onLogin} />\n    }\n \n    return <Dashboard userId={userId} />\n  }\n}",
    "total": "Number of ReactJS components",
    "alternativeName": "Ensure using only secured cookie to avoid Cross-site scripting attacks",
    "businessCriteria": [
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 1062340,
            "name": "OWASP-2021-Index",
            "href": "AIP/business-criteria/1062340"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062306,
            "name": "OWASP-2013-A6 - Sensitive Data Exposure",
            "href": "AIP/technical-criteria/1062306",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062323,
            "name": "OWASP-2017-A3 - Sensitive Data Exposure",
            "href": "AIP/technical-criteria/1062323",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062345,
            "name": "OWASP-2021-A05 - Security Misconfiguration",
            "href": "AIP/technical-criteria/1062345",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66066,
            "name": "Secure Coding - Encapsulation",
            "href": "AIP/technical-criteria/66066",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-614",
            "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
            "href": "AIP/quality-standards/CWE/items/CWE-614",
            "standard": "CWE"
        },
        {
            "id": "NIST-IA-9",
            "name": "Service Identification and Authentication",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-IA-9",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A3-2017",
            "standard": "OWASP"
        },
        {
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "href": "AIP/quality-standards/OWASP/items/A6-2013",
            "standard": "OWASP"
        },
        {
            "id": "A05-2021",
            "name": "Security Misconfiguration",
            "href": "AIP/quality-standards/OWASP/items/A05-2021",
            "standard": "OWASP"
        },
        {
            "id": "M4-2016",
            "name": "Insecure Authentication",
            "href": "AIP/quality-standards/OWASP/items/M4-2016",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.10",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.10",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "STIG-V-222576",
            "name": "The application must set the secure flag on session cookies.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222576",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
