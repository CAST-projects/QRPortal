{
    "id": 1020458,
    "name": "Avoid using unsecured cookie (React.js)",
    "href": "AIP/quality-rules/1020458",
    "critical": true,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check if cookies are set with secure parameter.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. This is why all major browsers support the secure cookie property that prevents client-side scripts from accessing the cookie. The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.\n\nThe Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.",
    "reference": "https://www.npmjs.com/package/react-cookie\nhttps://github.com/reactivestack/cookies\n\nhttps://cwe.mitre.org/data/definitions/614.html \nhttps://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure \nhttps://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
    "remediation": "Always setting secure option when creating a cookie.",
    "remediationSample": "# example with react-cookie\n\n// App.jsx\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\n \nimport NameForm from './NameForm';\n \nfunction App() {\n  const [cookies, setCookie] = useCookies(['name']);\n \n  function onChange(newName) {\n    setCookie('name', newName, { secure : true }); // no violation\n  }\n \n  return (\n    <div>\n      <NameForm name={cookies.name} onChange={onChange} />\n      {cookies.name && <h1>Hello {cookies.name}!</h1>}\n    </div>\n  );\n}\n \nexport default App;\n\n\n# example with react-cookies\n\nimport { Component } from 'react'\nimport cookie from 'react-cookies'\n \nimport LoginPanel from './LoginPanel'\nimport Dashboard from './Dashboard'\n \nclass MyApp extends Component {\n  constructor () {\n    super()\n \n    this.onLogin = this.onLogin.bind(this)\n    this.onLogout = this.onLogout.bind(this)\n  }\n \n  componentWillMount() {\n    this.state =  { userId: cookie.load('userId') }\n  }\n \n  onLogin(userId) {\n    this.setState({ userId })\n    cookie.save('userId', userId, { secure : true }) // no violation\n  }\n \n  onLogout() {\n    cookie.remove('userId', { secure : true })\n  }\n \n  render() {\n    const { userId } = this.state\n \n    if (!userId) {\n      return <LoginPanel onSuccess={this.onLogin} />\n    }\n \n    return <Dashboard userId={userId} />\n  }\n}",
    "sample": "# example with react-cookie\n\n// App.jsx\nimport React from 'react';\nimport { useCookies } from 'react-cookie';\n \nimport NameForm from './NameForm';\n \nfunction App() {\n  const [cookies, setCookie] = useCookies(['name']);\n \n  function onChange(newName) {\n    setCookie('name', newName, {}); // violation\n  }\n \n  return (\n    <div>\n      <NameForm name={cookies.name} onChange={onChange} />\n      {cookies.name && <h1>Hello {cookies.name}!</h1>}\n    </div>\n  );\n}\n \nexport default App;\n\n\n# example with react-cookies\n\nimport { Component } from 'react'\nimport cookie from 'react-cookies'\n \nimport LoginPanel from './LoginPanel'\nimport Dashboard from './Dashboard'\n \nclass MyApp extends Component {\n  constructor () {\n    super()\n \n    this.onLogin = this.onLogin.bind(this)\n    this.onLogout = this.onLogout.bind(this)\n  }\n \n  componentWillMount() {\n    this.state =  { userId: cookie.load('userId') }\n  }\n \n  onLogin(userId) {\n    this.setState({ userId })\n    cookie.save('userId', userId, {}) // violation\n  }\n \n  onLogout() {\n    cookie.remove('userId', {})\n  }\n \n  render() {\n    const { userId } = this.state\n \n    if (!userId) {\n      return <LoginPanel onSuccess={this.onLogin} />\n    }\n \n    return <Dashboard userId={userId} />\n  }\n}",
    "total": "Number of ReactJS components",
    "alternativeName": "Ensure using only secured cookie to avoid Cross-site scripting attacks",
    "businessCriteria": [
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062306,
            "name": "OWASP-2013-A6 Sensitive Data Exposure",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062323,
            "name": "OWASP-2017-A3 Sensitive Data Exposure",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66066,
            "name": "Secure Coding - Encapsulation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-614",
            "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
            "url": "https://cwe.mitre.org/data/definitions/614.html",
            "description": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-IA-9",
            "name": "Service Identification and Authentication",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/IA-9",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "M4-2016",
            "name": "Insecure Authentication",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M4-Insecure_Authentication",
            "description": "Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "url": null,
            "description": "Note: Requirement 6.5.10 is a best practice until June 30, 2015, after which it becomes a requirement."
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "url": null,
            "description": "Note: Requirement 6.5.10 is a best practice until June 30, 2015, after which it becomes a requirement."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70203",
            "name": "The application must set the secure flag on session cookies.",
            "url": null,
            "description": "Many web development frameworks such as PHP, .NET, ASP as well as application servers include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSetting the secure bit on session cookie ensures the session cookie is only sent via TLS/SSL HTTPS connections.  This helps to ensure confidentiality as the session cookie is not able to be viewed by unauthorized parties as it transits the network.\n\nSetting the secure flag on all cookies may also be warranted depending upon application design but at a minimum, the session cookie must always be secured."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
