{
    "id": 1065008,
    "name": "Avoid use of unvalidated input in array indexing and memory allocation",
    "href": "AIP/quality-rules/1065008",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule raises a violation when an unvalidated input is used to compute an index or as index to access an array or to allocate memory.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Using an unvalidated input as an array index or to compute an array index is a security hazard which can lead to reading or writing out of bounds of the array.\nUsing an unvalidated input as a size of a memory allocation is a security hazard which can lead to allocate a null size or a too great size of memory.",
    "reference": "CWE-129",
    "remediation": "Validate the input, from outside the function, which are used as array index or allocation size.",
    "remediationSample": "#define MAX_ARRAY_SIZE 1000000\nint *array = NULL; \nvoid allocateArray()\n{\n      int len, itr;\n      scanf(\"%i\", &len);\n     if (len > 0 && len < MAX_ARRAY_SIZE)\n     {\n           array = malloc(len);\n           for(itr=0;itr<len;itr++)\n               array[itr] = 0;\n     }\n }\n\nint getValue(int index)\n{\n    if(index >= 0 && index < MAX_ARRAY_SIZE)\n          return array[index];\n    else\n          return array[MAX_ARRAY_SIZE-1];\n}",
    "sample": "int *array = NULL; \nvoid allocateArray()\n{\n      int len, itr;\n      scanf(\"%i\", &len);\n      array = malloc(len);\n      for(itr=0;itr<len;itr++)\n          array[itr] = 0;\n }\n\nint getValue(int index)\n{\n    return array[index];\n}",
    "total": "Number of  C/C++ method and function",
    "alternativeName": "Avoid use of unvalidated input in array indexing and memory allocation",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062104,
            "name": "CISQ-Security",
            "href": "AIP/business-criteria/1062104"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062175,
            "name": "ASCSM-CWE-129 - Array Index Improper Input Neutralization",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061025,
            "name": "CWE-129: Improper Validation of Array Index",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 2,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-129",
            "name": "Array Index Improper Input Neutralization",
            "url": null,
            "description": "Objective\nAvoid failure to check range of user input in use as array index\n\nConsequence\nSoftware that is unaware of array index bounds incurs the risk of corruption of relevant memory, and perhaps instructions, possibly leading to a crash, the risk of data integrity loss, and the risk of unauthorized access to sensitive data\n\nMeasure Element\nNumber of instances where an external value is entered into the application through the user interface ReadsUI action, transformed throughout the application along the sequence composed of ActionElements with DataRelations relations, some of which being part of named callable and method control elements, and ultimately used in the read or write action to access the array; none of the callable or method control element of the transformation sequence being a range check callable and method control element with regards to the array index.\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-129",
            "name": "Improper Validation of Array Index",
            "url": "https://cwe.mitre.org/data/definitions/129.html",
            "description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-129",
            "name": "Improper Validation of Array Index",
            "url": "https://cwe.mitre.org/data/definitions/129.html",
            "description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-16",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-129",
            "name": "Improper Validation of Array Index",
            "url": "https://cwe.mitre.org/data/definitions/129.html",
            "description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.2",
            "name": "Buffer overflows",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.2",
            "name": "Buffer overflows",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70277",
            "name": "The application must not be vulnerable to overflow attacks.",
            "url": null,
            "description": "A buffer overflow occurs when a program exceeds the amount of data allocated to a buffer. The buffer is a sequential section of memory and when the data is written outside the memory bounds, the program can crash or malicious code can be executed.\n\nSecurity safeguards employed to protect memory include, for example, data execution prevention and address space layout randomization. Data execution prevention safeguards can either be hardware-enforced or software-enforced with hardware providing the greater strength of mechanism.\n\nBuffer overflows can manifest as stack overflows, heap overflows integer overflows and format string overflows. Each type of overflow is dependent upon the underlying application language and the context in which the overflow is executed.\n\nInteger overflows can lead to infinite looping when loop index variables are compromised and cause a denial of service.  If the integer is used in data references, the data can become corrupt. Also, using the integer in memory allocation can cause buffer overflows, and a denial of service.  Integers used in access control mechanisms can potentially trigger buffer overflows, which can be used to execute arbitrary code. \n\nAlmost all known web servers, application servers, and web application environments are susceptible to buffer overflows. Proper validation of user input is required to mitigate the risk. Notably, limiting the size of the strings a user is allowed to input to a program to a predetermined, acceptable length.\n\nA code review, static code analysis or active vulnerability or fuzz testing are methods used to identify overflows within application code."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
