{
    "id": 1034010,
    "name": "Avoid code injection (PHP)",
    "href": "AIP/quality-rules/1034010",
    "critical": true,
    "severity": 30,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.php.security",
        "href": "AIP/extensions/com.castsoftware.php.security"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric uses Psalm data-flow engine to detect a call path where input data from the user is evaluated as PHP code without prior validation and sanitization.\n\nVetted user input validations can be specified to Psalm data-flow engine using the \"@psalm-taint-escape eval\" annotation.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software evaluates PHP code via user-controllable inputs. These inputs are not neutralized or are incorrectly neutralized. As a consequence, the PHP code may be completely altered.",
    "reference": "CWE-94: Improper Control of Generation of Code ('Code Injection')\nhttps://cwe.mitre.org/data/definitions/94.html\n\nCWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\nhttps://cwe.mitre.org/data/definitions/95.html\n\nOpen Web Application Security Project (OWASP) \nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection\n\nOWASP Top Ten 2021 Category A03:2021 - Injection\nhttps://owasp.org/Top10/A03_2021-Injection/",
    "remediation": "Prefer using a white list of permitted PHP codes, hard coded.",
    "remediationSample": "<?php\n\n/**\n* @psalm-taint-escape eval\n*/\nfunction my_escaping_function_for_evaluated_code(string input) : string {\n    // Check that input is part of a hard-coded white-list of permitted PHP code\n};\n\n$name = $_GET[\"name\"];\n$name = my_escaping_function_for_evaluated_code($name);  // USE A FUNCTION ANNOTATED WITH @psalm-taint-escape eval\nevalCode($name);\n\nfunction evalCode(string $name) {\n    eval($name);                                         // FIXED\n}",
    "sample": "<?php\n\n$name = $_GET[\"name\"];\n\nevalCode($name);\n\nfunction evalCode(string $name) {\n    eval($name);                     // VIOLATION\n}",
    "total": "Number of PHP artifacts",
    "alternativeName": "Ensure you sanitize evaluated PHP code constructed from user input",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066194,
            "name": "CWE-94 - Improper Control of Generation of Code ('Code Injection')",
            "href": "AIP/technical-criteria/1066194",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062301,
            "name": "OWASP-2013-A1 - Injection",
            "href": "AIP/technical-criteria/1062301",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062321,
            "name": "OWASP-2017-A1 - Injection",
            "href": "AIP/technical-criteria/1062321",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062343,
            "name": "OWASP-2021-A03 - Injection",
            "href": "AIP/technical-criteria/1062343",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1017000,
            "name": "PHP",
            "href": "AIP/technologies/1017000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-94",
            "name": "Improper Control of Generation of Code ('Code Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-94",
            "standard": "CWE"
        },
        {
            "id": "CWE-95",
            "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
            "href": "AIP/quality-standards/CWE/items/CWE-95",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-2",
            "name": "Flaw Remediation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-2",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-2",
            "name": "Flaw Remediation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-2",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A1-2013",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2013",
            "standard": "OWASP"
        },
        {
            "id": "A1-2017",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2017",
            "standard": "OWASP"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS-V4"
        },
        {
            "id": "STIG-V-222604",
            "name": "The application must protect from command injection.",
            "href": "AIP/quality-standards/STIG-V5/items/STIG-V-222604",
            "standard": "STIG-V5"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
