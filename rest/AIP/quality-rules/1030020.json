{
    "id": 1030020,
    "name": "Avoid unhandled Exceptions in servlet methods (Kotlin)",
    "href": "AIP/quality-rules/1030020",
    "critical": true,
    "maxWeight": 7,
    "description": "Even though the signatures for methods in a servlet include throws IOException, ServletException, it's a bad idea to let such exceptions be thrown. \n\nThis rule reports all exceptions in methods named \"do*\" ( doPost; doGet...) are explicitly handled in servlet classes.",
    "rationale": "When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. \nThis information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",
    "reference": "http://cwe.mitre.org/data/definitions/600.html",
    "remediation": "Use of try-catch block is recommended.",
    "remediationSample": "@WebServlet(name = \"Hello\", value = [\"/hello\"])\nclass Test123 : HttpServlet() {\n    override fun doGet(req: HttpServletRequest, res: HttpServletResponse) {\n        try{   //Violation fixed\n          val ip: String = req.getRemoteAddr()\n          val addr: InetAddress = InetAddress.getByName(ip)\n          .\n          .\n          .\n          out.println(\"hello \" + addr.getHostName())\n        }\n        catch(unknownhostexception uhex){\n             out.println(\"123\")\n             .\n             .\n        } \n    }\n}",
    "sample": "@WebServlet(name = \"Hello\", value = [\"/hello\"])\nclass Test123 : HttpServlet() {\n    @Throws(IOException::class) //Violation\n    override fun doGet(req: HttpServletRequest, res: HttpServletResponse) {\n        val ip: String = req.getRemoteAddr()\n        val addr: InetAddress = InetAddress.getByName(ip)\n        .\n        .\n        .\n        out.println(\"hello \" + addr.getHostName())\n    } \n}",
    "total": "Number of Kotlin servlet methods",
    "alternativeName": "Ensure to manage an exception in servlet method using a try catch block to prevent exposing system vulnerabilities",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062306,
            "name": "OWASP-2013-A6 Sensitive Data Exposure",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062323,
            "name": "OWASP-2017-A3 Sensitive Data Exposure",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1030000,
            "name": "Kotlin",
            "href": "AIP/technologies/1030000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-600",
            "name": "Uncaught Exception in Servlet ",
            "url": "https://cwe.mitre.org/data/definitions/600.html",
            "description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information."
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
