{
    "id": 1065032,
    "name": "Avoid flexible array members (C/C++)",
    "href": "AIP/quality-rules/1065032",
    "critical": false,
    "maxWeight": 2,
    "description": "This rule detects flexible array used as members.",
    "output": "Information will be provided on:\n1. Methods where a violation has occurred\n2. Bookmarks for violation occurrences found in the source code",
    "rationale": "Flexible array members are most likely to be used in conjunction with dynamic memory allocation. The presence of \ufb02exible array members modi\ufb01es the behavior of the sizeof operator in ways that might not be expected by a programmer. The assignment of a structure that contains a \ufb02exible array member to another structure of the same type may not behave in the expected manner as it copies only those elements up to but not including the start of the \ufb02exible array member.",
    "reference": "MISRA C 2012, 18.7: Flexible array members shall not be declared",
    "remediation": "Define the size of array members.",
    "remediationSample": "unint_16 data[10]",
    "sample": "#include <stdlib.h>\nstruct s\n{\nuint16_t len;\nuint32_t data[ ]; /* Non-compliant - flexible array member */\n} str;\nstruct s *copy ( struct s *s1 )\n{\nstruct s *s2;\n/* Omit malloc ( ) return check for brevity */\ns2 = malloc ( sizeof ( struct s ) + ( s1->len * sizeof ( uint32_t ) ) );\n*s2 = *s1; /* Only copies s1->len */\nreturn",
    "total": "Number of C / C++ methods and function",
    "alternativeName": "Ensure to declare arrays with a defined size",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61029,
            "name": "Complexity - Dynamic Instantiation",
            "href": "AIP/technical-criteria/61029",
            "weight": 2
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "MISRA-C-2012-General",
            "name": "General",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-C-2012-General",
            "standard": "C-CPP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
