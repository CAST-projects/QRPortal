{
    "id": 1027034,
    "name": "Never catch NullReferenceException",
    "href": "AIP/quality-rules/1027034",
    "critical": false,
    "severity": 10,
    "maxWeight": 6,
    "extension": {
        "name": "com.castsoftware.dotnet",
        "href": "AIP/extensions/com.castsoftware.dotnet"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will raise a violation if NullReferenceException is caught in a try...catch...finally block.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Catching NullReferenceException should not be used as an alternative to checks and assertions for preventing dereferencing a null pointer.\n\nIt's usually better to avoid a NullReferenceException than to handle it after it occurs. Handling an exception can make your code harder to maintain and understand, and can sometimes introduce other bugs.",
    "reference": "https://cwe.mitre.org/data/definitions/395.html\n\nhttps://docs.microsoft.com/en-us/dotnet/api/system.nullreferenceexception?view=netcore-3.1",
    "remediation": "As a general practice avoid NullReferenceException.\nCheck if the variable is null before dereferencing it.",
    "remediationSample": "public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Enter name of person:\");\n        Person p = findPerson(Console.ReadLine());\n        if (p != null)\n        {\n            Console.WriteLine(\"Person is {0:D} years old\", p.getAge());\n        }\n        else\n        {\n            Console.WriteLine(\"Person not found.\");\n        }\n    }",
    "sample": "public static void Main(string[] args)\n    {\n        Console.WriteLine(\"Enter name of person:\");\n        Person p = findPerson(Console.ReadLine());\n        try\n        {\n            Console.WriteLine(\"Person is {0:D} years old\", p.getAge());\n        }\n        catch (NullReferenceException e)\n        {\n            Console.WriteLine(\"Person not found.\");\n        }\n    }",
    "total": "Number of methods and fields and properties initialized using a lambda function",
    "alternativeName": "Check if the variable is null before dereferencing it.",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1063155,
            "name": "PCI-DSS4-Requirement-6.2.4 - Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/technical-criteria/1063155",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063119,
            "name": "PCI-Requirement-6.5.5 - Improper error handling",
            "href": "AIP/technical-criteria/1063119",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "href": "AIP/technical-criteria/61014",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-395",
            "name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference",
            "href": "AIP/quality-standards/CWE/items/CWE-395",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-11",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-11",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.5",
            "standard": "PCI-DSS-V3.2.1"
        },
        {
            "id": "PCI-DSS4-Requirement-6.2.4",
            "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
            "href": "AIP/quality-standards/PCI-DSS4/items/PCI-DSS4-Requirement-6.2.4",
            "standard": "PCI-DSS4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
