{
    "id": 4708,
    "name": "Avoid using Dynamic Instantiation",
    "href": "AIP/quality-rules/4708",
    "critical": false,
    "maxWeight": 4,
    "associatedValueName": "Dynamic instantiation method",
    "description": "Dynamic instantiation should be used only when necessary.\nDynamic instantiation is done through calls to:\n- 'java.lang.Class.newInstance()'\n- 'java.lang.reflect.Constructor.newInstance()' \n- 'java.lang.reflect.Array.newInstance(Class<?> ComponentType, int... dimensions)'\n- 'java.lang.reflect.Method.invoke(Object obj, Object... args)'\nmethods.",
    "output": "This report lists all Artifacts using reflection API methods.\nIt provides the following information:\n - Artifacts full name\n - the method of the reflection API' that has been called",
    "rationale": "Dynamic instantiation is slower than a regular Class invocation or Method call",
    "reference": "https://docs.oracle.com/javase/tutorial/reflect/index.html",
    "remediation": "You should use class invocation or method call instead of dynamic instantiation",
    "sample": "Sample1\npackage org.hsqldb;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n...\n\npublic class HsqlSocketFactory {\n\n    protected HsqlSocketFactory() throws Exception {}\n\n    public static HsqlSocketFactory getInstance(boolean tls)\n    throws Exception {\n        return tls ? getSSLImpl()\n                   : getPlainImpl();\n    }\n...\n----------------------------------------------------------------\nSample2\npackage com.tutorialspoint;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class MethodDemo {\n   public static void main(String[] args) \n      throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n\n      Method[] methods = SampleClass.class.getMethods();\n      SampleClass sampleObject = new SampleClass();\n      methods[1].invoke(sampleObject, \"data\");\n      System.out.println(methods[0].invoke(sampleObject));\n   }\n}",
    "total": "Number of Java artifacts",
    "alternativeName": "Ensure to use class invocation or method call instead of dynamic instantiation known to be slower",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61029,
            "name": "Complexity - Dynamic Instantiation",
            "href": "AIP/technical-criteria/61029",
            "weight": 4
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
