{
    "id": 8528,
    "name": "Avoid deserialization injection through API requests",
    "href": "AIP/quality-rules/8528",
    "critical": true,
    "maxWeight": 9,
    "description": "Using CAST data-flow engine, this quality rule detects execution paths from API requests down to deserialization methods, which are open vulnerabilities to injection flaws.\n\nThe list of deserialization methods car be extended thanks to a user configuration (Deserialize.write)",
    "output": "List all methods that make resource calls forged by user input\n\nIt provides the following information:\n - Method full name\n - Call stack from API request down to the target deserialization method",
    "rationale": "Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.\nThe business impact depends on the protection needs of the application and data.",
    "reference": "CWE-502: Deserialization of Untrusted Data\nhttps://cwe.mitre.org/data/definitions/502.html\n\nOpen Web Application Security Project (OWASP) Top Ten 2017 - Category A8\nhttps://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization",
    "remediation": "Avoid serialising and deserialising objects\nUse signatures to detect tampering\nConfigure your library safely\nAs a last resort, restrict deserialization to be possible only to specific, whitelisted classes.\nCheck out the OWASP Deserialisation Cheat Sheet",
    "remediationSample": "Using readObject\n________________\n\nInputStream is; // is must not depend on API request\nObjectOutputStream ois = new ObjectOutputStream(is);\nMyClass myclass1 = (MyClass)ois.readObject();\n\n\n\nUsing XMLdecoder\n________________\n\nXMLdecoder d = new XMLdecoder(\n                            new BufferedInputStream(\n                            new FileInputStream(file)));\n\nObject result = d.readObject();\nd.close();\n\n\nUsing Kryo\n________________\n\nString userInput = param;\nKryo kryo = new Kryo();\nOutput output = new Output(new FileOutputStream(\"file.dat\"));\nInput input = new input(new FileInputStream(file));\nObject someObject = \"some string\";\nkryo.writeClassAndObject(output, someObject);\noutput.close();\nObject theObject = kryo.readClassAndObject(input);\ninput.close();",
    "sample": "Using readObject\n________________\n\nInputStream is; // value given by an API request\nObjectOutputStream ois = new ObjectOutputStream(is);\nMyClass myclass1 = (MyClass)ois.readObject(); //Violation\n\n\n\nUsing XMLdecoder\n________________\n\nString userInput; // value given by an API request\nXMLdecoder d = new XMLdecoder(\n                            new BufferedInputStream(\n                            new FileInputStream(userInput)));\n\nObject result = d.readObject(); //Violation\nd.close();\n\n\nUsing Kryo\n________________\n\nString userInput; // value given by an API request\nKryo kryo = new Kryo();\nOutput output = new Output(new FileOutputStream(\"file.dat\"));\nInput input = new input(new FileInputStream(userInput));\nObject someObject = \"some string\";\nkryo.writeClassAndObject(output, someObject);\noutput.close();\nObject theObject = kryo.readClassAndObject(input);  //Violation\ninput.close();",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Avoid deserialization injection through API requests",
    "businessCriteria": [
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061004,
            "name": "ISO-5055-Security",
            "href": "AIP/business-criteria/1061004"
        },
        {
            "id": 1062300,
            "name": "OWASP-2013-Index",
            "href": "AIP/business-criteria/1062300"
        },
        {
            "id": 1062320,
            "name": "OWASP-2017-Index",
            "href": "AIP/business-criteria/1062320"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061059,
            "name": "CWE-502: Deserialization of Untrusted Data",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062301,
            "name": "OWASP-2013-A1 Injection",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062328,
            "name": "OWASP-2017-A8 Insecure Deserialization",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": "https://cwe.mitre.org/data/definitions/502.html",
            "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": "https://cwe.mitre.org/data/definitions/502.html",
            "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": "https://cwe.mitre.org/data/definitions/502.html",
            "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A8-2017",
            "name": "Insecure Deserialization",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization",
            "description": "Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks."
        },
        {
            "standard": "OWASP",
            "id": "API8-2019",
            "name": "Injection",
            "url": null,
            "description": "Injection flaws, such as SQL, NoSQL, Command Injection, etc., occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's malicious data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
