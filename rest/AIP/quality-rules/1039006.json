{
    "id": 1039006,
    "name": "Avoid using predictable SecureRandom Seeds",
    "href": "AIP/quality-rules/1039006",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The java.security.SecureRandom class provides a strong random number generator (RNG) appropriate for cryptography. However, seeding it with a constant or another predictable value will weaken it significantly. In general, it is much safer to rely on the seed provided by the SecureRandom implementation. \n\nThis rule reports violation when SecureRandom.setSeed() or SecureRandom(byte[]) are called with a seed that is either of: \n\nA constant \nSystem.currentTimeMillis()",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the RNG",
    "reference": "http://cwe.mitre.org/data/definitions/337.html \nhttp://cwe.mitre.org/data/definitions/336.html \nOWASP Top 10 2017 Category A6 - Security Misconfiguration",
    "remediation": "Use of predictable seeds is not recommended.",
    "remediationSample": "SecureRandom sr = new SecureRandom(); \nint v = sr.next(32) // Violation FIXED",
    "sample": "Sample 1 \nSecureRandom sr = new SecureRandom(); \nsr.setSeed(123456L); // VIOLATION \nint v = sr.next(32); \n\nsr = new SecureRandom(\"abcdefghijklmnop\".getBytes(\"us-ascii\")); // VIOLATION \nv = sr.next(32); \n\n------------------------ \nSample 2 \nRandom random = new Random(System.currentTimeMillis()); // VIOLATION \nint accountID = random.nextInt();",
    "total": "Number of Java artifacts",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-336",
            "name": "Same Seed in Pseudo-Random Number Generator (PRNG)",
            "url": "https://cwe.mitre.org/data/definitions/336.html",
            "description": "A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized."
        },
        {
            "standard": "CWE",
            "id": "CWE-337",
            "name": "Predictable Seed in Pseudo-Random Number Generator (PRNG)",
            "url": "https://cwe.mitre.org/data/definitions/337.html",
            "description": "A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time."
        },
        {
            "standard": "OWASP",
            "id": "A5-2013",
            "name": "Security Misconfiguration",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration",
            "description": "Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date."
        },
        {
            "standard": "OWASP",
            "id": "A6-2017",
            "name": "Security Misconfiguration",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration",
            "description": "Security misconfiguration is the most commonly seen issue. This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers, and verbose error messages containing sensitive information. Not only must all operating systems, frameworks, libraries, and applications be securely configured, but they must be patched/upgraded in a timely fashion."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70245",
            "name": "The application must protect the confidentiality and integrity of transmitted information.",
            "url": null,
            "description": "Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.\n\nThis requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nApplication and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.\n \nWhen transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.\n\nCommunication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
