{
    "id": 7722,
    "name": "Avoid using references to the id in the persistent class's method equals()",
    "href": "AIP/quality-rules/7722",
    "critical": true,
    "description": "Reports all the equals() methods of a persistent class that refer to the persistence class's identifier (through the identifier attribute or the identifier getter). Note that the case where the equals method is implemented on a parent class and reference the id is taken into account too.",
    "output": "Lists all methods equals() methods of a persistent class that refer to the id. It provides the following information: Method full name",
    "rationale": "Since the programmer can define the meaning of Java Equality, it is important not to use the id field in this definition if the id field is a surrogate key. This is because Hibernate only sets the field when saving the object. Hence, for example, if you add the object to some set collection, then saving the object will result in its identity changing, and part of the rules about using Set/Map collection class is that the contained object's identity must not change while it is in the collection (the behavior of a set is not specified if the value of an object is changed in a manner that affects equals comparisons while the object is an element in the set. A special case of this prohibition is that it is not permissible for a set to contain itself as an element).\n\nFor example:\nPerson p = new Person();\nSet set = new HashSet();\nset.add(p);\nSystem.out.println(set.contains(p));\np.setId(new Long(5));\nSystem.out.println(set.contains(p));\n\n==> Prints:  false\n\nAs the behavior of a Set/Map is not specified if the value of an object is changed in a manner that affects equals comparisons while the object is an element in the Set or is the key of a Map., you may corrupt you database.",
    "reference": "Hibernate in Action (ISBN 1932394-15-X) p 123, Java Persistence with Hibernate (ISBN 1-932394-88-5) 397, http://www.cs.bham.ac.uk/~aps/syllabi/2004_2005/issws/h03/hibernate.html#object-lifecycle, http://techpolesen.blogspot.com/2007/11/10-tips-on-jpa-domain-modelling.html, http://java.sun.com/j2se/1.4.2/docs/api/java/util/Set.html, http://www.ideyatech.com/2011/04/effective-java-equals-and-hashcode/",
    "remediation": "Implement your equals() and hashCode() methods based on business keys. In cases where the business key is composite, you can use  the Jakarta Commons libraries - in particular the EqualsBuilder and HashCodeBuilder classes. It may be that your class is not an @Entity, but a value object (@Embeddable) instead and perhaps the entity needs to be modelled in a different way.",
    "remediationSample": "------> Sample.java:\npublic class Sample {\n   private long id;\n   private String name;\n   ...\n   public String getName() {\n      return name;\n   }\n\n   public Long getId() {\n      return id;\n   }\n\n    public boolean equals(Object other) {\n        if (this==other) return true;\n        if ( !(other instanceof Sample) ) return false;\n        final Sample that = (Sample) other;\n        return this.getName().equals( that.getName()); // FIXED\n    }\n}",
    "sample": "------> sample.hbm.xml:\n...\n<class name=\"Sample\" table=\"SAMPLE\">\n           <id name=\"id\" column=\"id\" type=\"long\">\n                  <generator class=\"sequence\"/>\n           </id>\n           <property name=\"name\" column=\"NAME\" type=\"string\"/>\n...\n</class>\n\n------> Sample.java:\npublic class Sample {\n   private long id;\n   private String name;\n...\n   public String getName() {\n      return name;\n   }\n\n   public Long getId() {\n      return id;\n   }\n\n    public boolean equals(Object other) {\n        if (this==other) return true;\n        if ( !(other instanceof Sample) ) return false;\n        final Sample that = (Sample) other;\n        return this.getId().equals( that.getId()); // VIOLATION\n    }\n}",
    "total": "Total number of persistent class's method's equals()",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
