{
    "id": 1065088,
    "name": "Member functions shall not return non-const handles to class-data.",
    "href": "AIP/quality-rules/1065088",
    "critical": false,
    "severity": 10,
    "maxWeight": 2,
    "description": "This rule will raise a violation when member function returns non-const handles to class data",
    "rationale": "By implementing class interfaces with member functions the implementation retains more control over how the object state can be modified and helps to allow a class to be maintained without affecting clients. Returning a handle to class-data allows for clients to modify the state of the object without using any interfaces.",
    "reference": "MISRA C++ 2008, 9-3-2: Member functions shall not return non-const handles to class-data.\n\nAUTOSAR C++ 2014, A9-3-1: Member functions shall not return non-const \u201craw\u201d pointers or references to private or protected data owned by the class.",
    "remediation": "A resource can be used by the class but is not class-data, non-const handles to this data may be returned.",
    "remediationSample": "class C\n{\npublic:\nC ( int32_t * shared ) : m_shared ( shared )\n{\n}\nint32_t * getA ()\n{\nreturn m_shared; // Compliant - m_shared is not class-data\n}\nprivate:\nint32_t * m_shared;\n};",
    "sample": "class C\n{\npublic:\nint32_t & getA () // Non-compliant\n{\nreturn a;\n}\nprivate:\nint32_t a;\n};\nvoid b ( C & c )\n{\nint32_t & a_ref = c.getA ();\na_ref = 10; // External modification of private C::a\n}\n\n\n\nc.getA() returns a reference to the member, which is then stored and modified by a_ref. The\nclass, therefore, has no control over changes to its state.",
    "alternativeName": "Member functions shall not return non-const handles to class-data.",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
            "href": "AIP/technical-criteria/61020",
            "weight": 2,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "MISRA-CPP-2008-Classes",
            "name": "Classes",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-CPP-2008-Classes",
            "standard": "C-CPP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
