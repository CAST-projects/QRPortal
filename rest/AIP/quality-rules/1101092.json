{
    "id": 1101092,
    "name": "Avoid Procedures using an Insert, Update, Delete, Create Table or Select without including error management (SQL)",
    "href": "AIP/quality-rules/1101092",
    "critical": true,
    "maxWeight": 8,
    "associatedValueName": "Number of violation occurrences",
    "description": "Avoid SQL Server, Sybase and Oracle stored procedures or functions using an Insert, Update, Delete, Create Table or Select without including error management.\n\nFor SQL Server and Sybase we look for the check of @@error variable or error management using TRY..CATCH blocks.\nFor Oracle we look for PL/SQL Errors and Exceptions, EXCEPTION WHEN.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Not managing errors can lead to data corruption and erroneous behaviour.",
    "reference": "Oracle : \nhttps://docs.oracle.com/cd/E11882_01/timesten.112/e21639/exceptions.htm#TTPLS194\n\nSQL Server : \nhttps://docs.microsoft.com/fr-fr/sql/t-sql/language-elements/try-catch-transact-sql?view=sql-server-ver15, https://docs.microsoft.com/fr-fr/sql/t-sql/functions/error-transact-sql?view=sql-server-ver15",
    "remediation": "Add error management into the stored procedures and functions using an Insert, Update, Delete, Select or Create Table.",
    "remediationSample": "1. Check for errors with @@error\nDeclare @OpenedTran      bit\nDeclare @Error           int\n\n/*See if a transaction is already opened and possibly open a new one*/\nIf @@trancount>0\n     Select @OpenedTran = 1\nElse\n  Begin\n     Select @OpenedTran = 0\n     Begin Tran\n  End\n\nupdate mytable set col1 = 123\nwhere col2 = 456\n\nSelect @Error = @@error\nGTRAN:\n/*Close or rollback the transaction if it has been opened in this procedure*/\nIf @OpenedTran = 0\n  Begin\n     If @Error = 0   /* no error occurs*/\n          Commit Tran\n     Else\n          Rollback Tran\n  End\n/*If this procedure is not called from another one, Raise an error*/\nIf @@nestlevel = 1\n  Begin\n     If @Error !=0\n          Raiserror xxx\n\n  End\n\nupdate mytable set col1 = 234\nwhere col2 = 567\n\nSelect @Error = @@error\nGTRAN:\n/*Close or rollback the transaction if it has been opened in this procedure*/\nIf @OpenedTran = 0\n  Begin\n     If @Error = 0   /* no error occurs*/\n          Commit Tran\n     Else\n          Rollback Tran\n  End\n/*If this procedure is not called from another one, Raise an error*/\nIf @@nestlevel = 1\n  Begin\n     If @Error !=0\n          Raiserror xxx\n\n  End\n\n/*return the error value*/\nReturn @Error\n\n2. Check for errors with TRY ... CATCH\nDECLARE @ERROR          INT;\n\nBEGIN TRANSACTION; \nBEGIN TRY\n    update mytable set col1 = 123\n    where col2 = 456;\n\n    update mytable set col1 = 234\n    where col3 = 567;\nEND TRY  \nBEGIN CATCH  \n    SELECT @ERROR = ERROR_NUMBER();  \n  \n    IF @@TRANCOUNT > 0  \n        ROLLBACK TRANSACTION;  \nEND CATCH;  \n  \nIf @@TRANCOUNT > 0  \n    COMMIT TRANSACTION;  \n\n/*return the error value*/\nRETURN @ERROR;",
    "sample": "update mytable set col1 = 123\nwhere col2 = 456;\n\nupdate mytable set col1 = 234\nwhere col3 = 567;",
    "total": "Number of SQL Server, Sybase and Oracle stored procedures and functions",
    "alternativeName": "Errors should be handled in stored procedures and functions",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061041,
            "name": "CWE-391: Unchecked Error Condition",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061042,
            "name": "CWE-392: Missing Report of Error Condition",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1101000,
            "name": "SQL",
            "href": "AIP/technologies/1101000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "CWE",
            "id": "CWE-392",
            "name": "Missing Report of Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/392.html",
            "description": "The software encounters an error but does not provide a status code or return value to indicate that an error has occurred."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-392",
            "name": "Missing Report of Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/392.html",
            "description": "The software encounters an error but does not provide a status code or return value to indicate that an error has occurred."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-392",
            "name": "Missing Report of Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/392.html",
            "description": "The software encounters an error but does not provide a status code or return value to indicate that an error has occurred."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": "Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
