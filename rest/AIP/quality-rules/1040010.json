{
    "id": 1040010,
    "name": "Always delete the cookies during the logout",
    "href": "AIP/quality-rules/1040010",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check if cookies are deleted during the logout.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.\nCookies should be removed when logging out to avoid this kind of risk.\n\nThe Spring Logout is composed mainly of 2 steps:\n  1. Invalidate user session : indicate to web server that the session is not used anymore\n  2. Cancel cookie send by the web server to track user session. And also all cookies sent by web application, this, in order to have a global clean state",
    "reference": "https://cwe.mitre.org/data/definitions/287.html\nhttps://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
    "remediation": "Use the deleteCookies function just after the logout function call.",
    "remediationSample": "@Configuration\n@EnableWebSecurity\npublic class LogoutSecurityConfig extends WebSecurityConfigurerAdapter {\n\n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n                      http.authorizeRequests().antMatchers(\"/**\").hasRole(\"USER\").and().formLogin()\n                                    .and()\n                                    .logout().deleteCookies(\"remove\") // DELETE Cookies for logout.\n                                    .invalidateHttpSession(false)\n                     .logoutUrl(\"/custom-logout\")\n                                    .logoutSuccessUrl(\"/logout-success\");\n     }\n\n     @Override\n     protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n                        auth.inMemoryAuthentication().withUser(\"user\").password(\"password\").roles(\"USER\");\n     }\n}",
    "sample": "@Configuration\n@EnableWebSecurity\npublic class LogoutSecurityConfig extends WebSecurityConfigurerAdapter {\n\n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n                      http.authorizeRequests().antMatchers(\"/**\").hasRole(\"USER\").and().formLogin()\n                                    .and()\n                                    .logout().invalidateHttpSession(true) // Cookies are not deleted during logout\n                      .logoutUrl(\"/custom-logout\")\n                                    .logoutSuccessUrl(\"/logout-success\");\n     }\n\n     @Override\n     protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n                      auth.inMemoryAuthentication().withUser(\"user\").password(\"password\").roles(\"USER\");\n\n     }\n}",
    "total": "Number of Java Methods and Xml tags",
    "alternativeName": "Ensure cleaning the cookies during the logout to avoid them to be used by another web application",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-287",
            "name": "Improper Authentication",
            "url": "https://cwe.mitre.org/data/definitions/287.html",
            "description": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-AC-3",
            "name": "Access Enforcement",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/AC-3",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A4-2013",
            "name": "Insecure Direct Object References",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References",
            "description": "A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data."
        },
        {
            "standard": "OWASP",
            "id": "A5-2017",
            "name": "Broken Access Control",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control",
            "description": "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users' accounts, view sensitive files, modify other users' data, change access rights, etc."
        },
        {
            "standard": "OWASP",
            "id": "M4-2016",
            "name": "Insecure Authentication",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M4-Insecure_Authentication",
            "description": "Many older or poorly configured XML processors evaluate external entity references within XML documents. External entities can be used to disclose internal files using the file URI handler, internal file shares, internal port scanning, remote code execution, and denial of service attacks."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "url": null,
            "description": "Note: Requirement 6.5.10 is a best practice until June 30, 2015, after which it becomes a requirement."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69241",
            "name": "The application must clear temporary storage and cookies when the session is terminated.",
            "url": null,
            "description": "Persistent cookies are a primary means by which a web application will store application state and user information.  Since HTTP is a stateless protocol, this persistence allows the web application developer to provide a robust and customizable user experience.\n\nHowever, if a web application stores user authentication information within a persistent cookie or other temporary storage mechanism, this information can be stolen and used to compromise the users account.\n\nLikewise, HTML 5 provides the developer with a client storage capability where application data larger than the 4K cookie size limit can be stored on the local client.  While this can be beneficial to the developer, this is considered insecure storage and should not be used for storing sensitive session or security tokens.  A cross site scripting attack can put this data at risk.\n\nWeb applications must clear sensitive data from files and storage areas on the client when the session is terminated."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70207",
            "name": "The application must destroy the session ID value and/or cookie on logoff or browser close.",
            "url": null,
            "description": "Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession cookies contain application session information that can be used to impersonate the web application user or hijack their application session. Once the user's session has terminated, these session IDs must be destroyed and not reused."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70213",
            "name": "Applications must not use URL embedded session IDs.",
            "url": null,
            "description": "Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nUsing a session ID that is copied to the URL introduces the risks that the session ID information will be written to log files, made available in browser history files, or made publicly available within the URL.\n\nUsing cookies to establish session ID information is desired."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
