{
    "id": 1040010,
    "name": "Cookies must be deleted during the logout",
    "href": "AIP/quality-rules/1040010",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "Logout is composed mainly by 2 steps:\nInvalidate user session : indicate to web server that the session is not used anymore \nCancel cookie send by the web server to track user session. And also all cookies sent by web application, this, in order to have a global clean state \nThis rule reports violation when cookies are not cleaned during the Logout. ",
    "rationale": "TBD",
    "reference": "https://cwe.mitre.org/data/definitions/287.html \nhttps://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication \nhttps://javarevisited.blogspot.com/2018/01/how-to-enable-http-basic-authentication-spring-security-java-xml-configuration.html#axzz54bw3m88x \nhttps://www.javacodegeeks.com/2018/01/http-basic-authentication-works-spring-security.html  \n ",
    "remediation": "@Configuration \n @EnableWebSecurity \n public class LogoutSecurityConfig extends WebSecurityConfigurerAdapter { \n                @Override \n                protected void configure(HttpSecurity http) throws Exception { \n  http.authorizeRequests().antMatchers(\"/**\").hasRole(\"USER\").and().formLogin() \n                .and() \n                .logout().deleteCookies(\"remove\") // DELETE Cookies for logout. \n                .invalidateHttpSession(false) \n.logoutUrl(\"/custom-logout\") \n                .logoutSuccessUrl(\"/logout-success\"); \n                 } \n                \n                @Override \n                 protected void configure(AuthenticationManagerBuilder auth) throws Exception { \nauth.inMemoryAuthentication().withUser(\"user\").password(\"password\").roles(\"USER\"); \n} \n} \n  ",
    "sample": "@Configuration \n @EnableWebSecurity \n public class LogoutSecurityConfig extends WebSecurityConfigurerAdapter { \n                @Override \n                protected void configure(HttpSecurity http) throws Exception { \n  http.authorizeRequests().antMatchers(\"/**\").hasRole(\"USER\").and().formLogin() \n                .and() \n                .logout().invalidateHttpSession(true) // we just invalidate Httpsession \n.logoutUrl(\"/custom-logout\") \n                .logoutSuccessUrl(\"/logout-success\"); \n                 } \n                \n                @Override \n                 protected void configure(AuthenticationManagerBuilder auth) throws Exception { \nauth.inMemoryAuthentication().withUser(\"user\").password(\"password\").roles(\"USER\"); \n} \n} \n ",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ]
}
