{
    "id": 8420,
    "name": "Avoid second order SQL injection",
    "href": "AIP/quality-rules/8420",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Call stack from user input source down to the target SQL execution method",
    "description": "SQL injection (second order) - The application stores data in a database. At a later time, the data is subsequently read back into the application and included in another SQL query without prior validation and sanitization.",
    "output": "List all methods that miss calling the required input validation calls\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target SQL execution method.",
    "rationale": "In web based applications, the validation of all user input is critical to avoid major security problems that would come from the injection flaws.\n\nTo avoid the creation of injection flaws, the Open Web Application Security Project (OWASP) recommends the validation of all user input:\n\"Use a standard input validation mechanism to validate all input data for length, type, syntax, and business rules before accepting the data to be displayed or stored. Use an \"accept known good\" validation strategy. Reject invalid input rather than attempting to sanitize potentially hostile data. Do not forget that error messages might also include invalid data\"\n\nThe Common Weakness Enumeration defines Improper Input Validation (CWE-20) as follows:\n\n\"When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.\"",
    "reference": "CWE-89 : Failure to Preserve SQL Query Structure (aka 'SQL injection')\nhttp://cwe.mitre.org/data/definitions/89.html\n\nOpen Web Application Security Project (OWASP) \nhttp://www.owasp.org/index.php/Top_10_2007\n\nCISQ rule: ASCSM-CWE-89.",
    "remediation": "Use authorized sanitization methods.",
    "remediationSample": "string query = \"UPDATE users SET password=? WHERE username=? and password=?\";\n\nPreparedStatement preparedStatement = conn.prepareStatement(query) ;\npreparedStatement.setString(1, newPassword );\npreparedStatement.setString(2, userName);\npreparedStatement.setString(3, oldPassword);",
    "sample": "...\nstring oldPassword = ...\nstring newPassword = ...\nstring userName = ... // Get the userName from the database\nstring query = \"UPDATE users SET password=? WHERE username=\" + userName + \" and password=?\";\n\nPreparedStatement preparedStatement = conn.prepareStatement(query) ;\npreparedStatement.setString(1, newPassword );\npreparedStatement.setString(2, oldPassword);\n\nint i = preparedStatement.executeUpdate();\n...",
    "total": "Number of methods calling user input methods",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
