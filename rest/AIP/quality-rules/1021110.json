{
    "id": 1021110,
    "name": "Avoid using regular expression vulnerable to ReDoS (Python)",
    "href": "AIP/quality-rules/1021110",
    "critical": true,
    "severity": 20,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.python",
        "href": "AIP/extensions/com.castsoftware.python"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule reports usage of a regular expression vulnerable to ReDoS when calling one of the following methods:\nin module re and regex : compile, search, match, fullmatch, split, findall, finditer, sub, subn,\nin module django.core.validators : RegexValidator,\nin module django.urls : re_path",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Regular expression engine have a feature called \"backtracking\". If the token cannot match, the engine \"backtracks\" to a position that may result in a different token that can match. Backtracking becomes a weakness if all of these conditions are met:\n\n - The number of possible backtracking attempts are exponential relative to the length of the input.\n - The input can fail to match the regular expression.\n - The input can be long enough.\n\nAttackers can create crafted inputs that intentionally cause the regular expression to use excessive backtracking in a way that causes the CPU consumption to spike.",
    "reference": "CWE-1333: Inefficient Regular Expression Complexity\nhttps://cwe.mitre.org/data/definitions/1333.html\n\nCWE-400: Uncontrolled Resource Consumption\nhttps://cwe.mitre.org/data/definitions/400.html\n\nOWASP: Regular expression Denial of Service - ReDoS\nhttps://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS",
    "remediation": "Do not use user input for constructing a regular expression.\n\nFor literal values:\n1) keep the expression simple, ensure the worst case scenario doesn't trigger exponential complexity\n2) whenever possible, replace greedy quantifiers:\n  - X+\n  - X*\n  - X?\n  - X{n}\n  - X{n,}\n  - X{n,m}\nby a possessive quantifier (introduced in Python 3.11):\n  - X++\n  - X*+\n  - X?+\n  - X{n}+\n  - X{n,}+\n  - X{n,m}+",
    "remediationSample": "import re\n\ndef literal_redos(data):\n    pattern = r'^(a+)$'  # simpler expression\n    matches = re.match(pattern, data)\n    return matches\n\n\ndef user_input_redos(data):\n    # display a list of valid patterns to choose\n    choice= input(\"choose pattern to use (1, 2):\")\n    pattern = some_patterns[choice]  # do not use regex submitted by the user\n    matches = re.match(pattern, data)\n    return matches",
    "sample": "import re\n\ndef literal_redos(data):\n    pattern = r'^(a+)+$'  # vulnerable regex if user enters \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!\"\n    matches = re.match(pattern, data)  # violation\n    return matches\n\n\ndef user_input_redos(data):\n    pattern = input(\"search pattern\")  # vulnerable if user enters \"^(a+)+$\"\n    matches = re.match(pattern, data)  # violation\n    return matches",
    "total": "Number of Python artifacts",
    "alternativeName": "Ensure using regular expression without backtracking",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066500,
            "name": "CWE-400 - Uncontrolled Resource Consumption",
            "href": "AIP/technical-criteria/1066500",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063120,
            "name": "PCI-Requirement-6.5.6 - All high risk vulnerabilities",
            "href": "AIP/technical-criteria/1063120",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "href": "AIP/technical-criteria/66063",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-400",
            "name": "Uncontrolled Resource Consumption",
            "href": "AIP/quality-standards/CWE/items/CWE-400",
            "standard": "CWE"
        },
        {
            "id": "CWE-1333",
            "name": "Inefficient Regular Expression Complexity",
            "href": "AIP/quality-standards/CWE/items/CWE-1333",
            "standard": "CWE"
        },
        {
            "id": "NIST-SC-5",
            "name": "Denial-of-service Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SC-5",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SC-5",
            "name": "Denial-of-service Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SC-5",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.2.1"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
