{
    "id": 1020058,
    "name": "Avoid using eval()",
    "href": "AIP/quality-rules/1020058",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The eval() function is used to run text as code. In almost all cases, it should not be necessary to use it. \nBecause it allows arbitrary code to be run, it also represents a security problem. \nThe rule is compliant with MITRE CWE-95 and OWASP A3 2013, 2017 recommendations.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
    "remediation": "If possible, refactor your code so that it does not need to use eval() at all.",
    "remediationSample": "var value = object[aProperty]; // compliant",
    "sample": "var value = eval('object.' + aProperty); // non compliant",
    "total": "Number of Javascript Functions",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "AIP",
            "id": "AIP-HA-THREATS",
            "name": "HA - external threats mitigation",
            "url": "",
            "description": "Quality rules related to the absence of protections against malevolent actions from external actors"
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-78",
            "name": "OS command injection",
            "url": null,
            "description": "Remove instances where a user input is ultimately used to execute an OS command, without any sanitization (based on a list of vetted sanitization functions, methods, procedures, stored procedures, sub-routines, etc.) of the user input value between the user input and the statement."
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        }
    ]
}
