{
    "id": 1050012,
    "name": "Avoid Objective-C interface overriding only isEqual method or only hash method",
    "href": "AIP/quality-rules/1050012",
    "critical": true,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check that each class overwrites -isEqual: also overwrites -hash.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "If -isEqual: determines that two objects are equal, they must have the same hash value. This is why, if you override the isEqual method, you also need to override the hash method.",
    "reference": "https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/ObjectComparison.html",
    "remediation": "Do not forget to override hash and isEqual at the same time",
    "remediationSample": "@implementation MySubClass : MyClass\n{\n\n- (BOOL) isEqual:(id)anObject\n{\n  return ([anObject hash]==[self hash])\n}\n\n- (int) hash\n{\n  int newHash = ...\n\n  return newHash;\n}\n\n}",
    "sample": "@implementation MySubClass : MyClass\n{\n\n- (BOOL) isEqual:(id)anObject\n{\n  return ([anObject hash]==[self hash])\n}\n\n}",
    "total": "Number of Objective-C artifacts",
    "alternativeName": "Ensure to override hash and isEqual at the same time",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1062103,
            "name": "CISQ-Reliability",
            "href": "AIP/business-criteria/1062103"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062168,
            "name": "ASCRM-RLB-4 - Persistant Storable Data Element without Proper Comparison Control Element",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061147,
            "name": "CWE-1097: Persistent Storable Data Element without Associated Comparison Control Element",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61010,
            "name": "Complexity - OO Inheritance and Polymorphism",
            "weight": 5,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "AIP/technologies/1050001"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-4",
            "name": "Persistant Storable Data Element without Proper Comparison Control Element",
            "url": null,
            "description": "Objective\nAvoid improper comparison capabilities of persistent data\n\nConsequence\nSoftware featuring known weak coding practices results in unexpected and erroneous behaviors\n\nMeasure Element\nNumber of instances where the persistent storable element has no dedicated control element handling comparison action elements from the required comparison control element list. (in case of technologies with class elements, this means situations where a persistent storable data element is a class that is made persistent while it does not implement method elements from the required comparison control element list now composed of method elements: for example, with JAVA, a required comparison control element list is {'hashCode()','equals()'} method elements)\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-581",
            "name": "Object Model Violation: Just One of Equals and Hashcode Defined",
            "url": "https://cwe.mitre.org/data/definitions/581.html",
            "description": "The software does not maintain equal hashcodes for equal objects."
        },
        {
            "standard": "CWE",
            "id": "CWE-1097",
            "name": "Persistent Storable Data Element without Associated Comparison Control Element",
            "url": "https://cwe.mitre.org/data/definitions/1097.html",
            "description": "The software uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-1097",
            "name": "Persistent Storable Data Element without Associated Comparison Control Element",
            "url": "https://cwe.mitre.org/data/definitions/1097.html",
            "description": "The software uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison."
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-1097",
            "name": "Persistent Storable Data Element without Associated Comparison Control Element",
            "url": "https://cwe.mitre.org/data/definitions/1097.html",
            "description": "The software uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison."
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
