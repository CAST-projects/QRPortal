{
    "id": 7752,
    "name": "CWE-73: Avoid file path manipulation vulnerabilities",
    "href": "AIP/quality-rules/7752",
    "critical": true,
    "associatedValueName": "Call stack from user input source down to the target file path command method",
    "description": "Using CAST dataflow engine, this metric detects execution paths from user input methods down to file creation methods, paths which are open vulnerabilities to Operating System injection flaws. \n\n The list of user input methods can be customized as well as the target methods and the sanitization methods (methods encoding the user input to avoid hacks).",
    "output": "List all methods that miss calling the required input validation calls\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target file path command method.",
    "rationale": "In web based applications, the validation of all user input is critical to avoid major security problems that would come from the Injection flaws.\n\nTo avoid the creation of Injection flaws, the Open Web Application Security Project (OWASP) recommends the validation of all user input :\n\"Use a standard input validation mechanism to validate all input data for length, type, syntax, and business rules before accepting the data to be displayed or stored. Use an \"accept known good\" validation strategy. Reject invalid input rather than attempting to sanitize potentially hostile data. Do not forget that error messages might also include invalid data\"\n\nThe Common Weakness Enumeration defines Improper Input Validation ( CWE-20 ) as follows :\n\n\"When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.\"\n\nThis rule ensures that the appropriate input validation is coded within the same method that called the user input call, making security checking easier for all team members.",
    "reference": "CWE-73 : External Control of File Name or Path\nhttp://cwe.mitre.org/data/definitions/73.html\nhttp://cwe.mitre.org/data/definitions/434.html\n\nOpen Web Application Security Project (OWASP) \nhttp://www.owasp.org/index.php/Top_10_2007\n\nCISQ: ASCSM-CWE-078",
    "remediation": "Validate all the user inputs.",
    "total": "The number of methods calling user input methods",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-22",
            "name": "Improper path traversal",
            "url": null,
            "description": "Remove instances where a user input is ultimately used in a file path creation statement, without any sanitization (based on a list of vetted sanitization functions, methods, procedures, stored procedures, subroutines, etc.) of the user input value between the user input and the statement."
        },
        {
            "standard": "CWE",
            "id": "CWE-22",
            "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
            "url": "https://cwe.mitre.org/data/definitions/22.html",
            "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory."
        },
        {
            "standard": "CWE",
            "id": "CWE-23",
            "name": "Relative Path Traversal",
            "url": "https://cwe.mitre.org/data/definitions/23.html",
            "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory."
        },
        {
            "standard": "CWE",
            "id": "CWE-36",
            "name": "Absolute Path Traversal",
            "url": "https://cwe.mitre.org/data/definitions/36.html",
            "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as /abs/path that can resolve to a location that is outside of that directory."
        },
        {
            "standard": "CWE",
            "id": "CWE-73",
            "name": "External Control of File Name or Path",
            "url": "https://cwe.mitre.org/data/definitions/73.html",
            "description": "The software allows user input to control or influence paths or file names that are used in filesystem operations."
        },
        {
            "standard": "OWASP",
            "id": "A5-2017",
            "name": "Broken Access Control",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control",
            "description": "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users' accounts, view sensitive files, modify other users' data, change access rights, etc."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
