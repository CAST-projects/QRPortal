{
    "id": 1039058,
    "name": "Avoid generating key with insufficient random generator in cookies",
    "href": "AIP/quality-rules/1039058",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The rule will check the use of random algorithm known as weak and the use of the generated key into cookie.\n\nExceptions:\n\n1. Will not check across files.\n2. ESAPI Encoder.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.",
    "reference": "http://cwe.mitre.org/data/definitions/330.html",
    "remediation": "Use random algorithm like SecureRandom instead of Random",
    "remediationSample": "SecureRandom sr = new SecureRandom();\nsr.setSeed(somevalue);\nint value = sr.nextInt(1000);\nString rememberMeKey = Double.toString(value).substring(2); // Trim off the 0. at the front.\nString user = \"Doug\";\nString fullClassName = this.getClass().getName();\nString testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.')1\"BenchmarkTest\".length());\nuser+= testCaseNumber;\nString cookieName = \"rememberMe\" + testCaseNumber;\njavax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);\nrememberMe.setSecure(true);\n// rememberMe.setPath(\"/benchmark/\" + this.getClass().getSimpleName());\nrememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n// e.g., /benchmark/sql-01/BenchmarkTest01001\nrequest.getSession().setAttribute(cookieName, rememberMeKey);\nresponse.addCookie(rememberMe);\nresponse.getWriter().println(\nuser + \" has been remembered with cookie: \" + rememberMe.getName() \n+ \" whose value is: \" + rememberMe.getValue() + \"<br/>\"\n);",
    "sample": "/* Sample code 1 */\n\ndouble value = java.lang.Math.random();\nString rememberMeKey = Double.toString(value).substring(2); // Trim off the 0. at the front.\n\nString user = \"Doug\";\nString fullClassName = this.getClass().getName();\nString testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.')1\"BenchmarkTest\".length());\nuser+= testCaseNumber;\n\nString cookieName = \"rememberMe\" + testCaseNumber;\n\njavax.servlet.http.Cookie rememberMe = new javax.servlet.http.Cookie(cookieName, rememberMeKey);\nrememberMe.setSecure(true);\nrememberMe.setPath(request.getRequestURI()); // i.e., set path to JUST this servlet\n\nrequest.getSession().setAttribute(cookieName, rememberMeKey);\nresponse.addCookie(rememberMe);\n\nresponse.getWriter().println(\nuser + \" has been remembered with cookie: \" + rememberMe.getName() \n+ \" whose value is: \" + rememberMe.getValue() + \"<br/>\"\n);\n\n/* Sample code 2 */\n// If the cookie is generated using this pattern, it is be set as violation\nint randNumber = new java.util.Random().nextInt(99)\nAttaching the source code sample file\n\n------------------------------------------\nSample code 3 :\n\ndouble value = java.lang.Math.random();\nString rememberMeKey = Double.toString(value).substring(2); // Trim off the 0. at the front.\n\nString user = \"Doug\";\nString fullClassName = this.getClass().getName();\nString testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.')1\"BenchmarkTest\".length());\nuser+= testCaseNumber;\n\nString cookieName = \"rememberMe\" + testCaseNumber;\n\n------------------------------------------\n/* Sample code 4 */\nnew java.util.Random().nextBytes(bytes);\nString rememberMeKey = org.owasp.esapi.ESAPI.encoder().encodeForBase64(bytes, true);\n\nString user = \"Byron\";\nString fullClassName = this.getClass().getName();\nString testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.')1\"BenchmarkTest\".length());\nuser+= testCaseNumber;\n\nString cookieName = \"rememberMe\" + testCaseNumber;\n------------------------------------------\n/* Sample code */\n\nlong l = new java.util.Random().nextLong();\nString rememberMeKey = Long.toString(l);\nString user = \"Logan\";\nString fullClassName = this.getClass().getName();\nString testCaseNumber = fullClassName.substring(fullClassName.lastIndexOf('.')1\"BenchmarkTest\".length());\nuser+= testCaseNumber;\n\nString cookieName = \"rememberMe\" + testCaseNumber;",
    "total": "Number of Java Artifacts",
    "alternativeName": "Ensure the cookie id are always generate with a sufficient random algorithm like SecureRandom",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-330",
            "name": "Use of Insufficiently Random Values",
            "url": "https://cwe.mitre.org/data/definitions/330.html",
            "description": "The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers."
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70217",
            "name": "The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange...",
            "url": null,
            "description": "Sequentially generated session IDs can be easily guessed by an attacker. Employing the concept of randomness in the generation of unique session identifiers helps to protect against brute-force attacks to determine future session identifiers.\n\nUnique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.\n\nThis requirement focuses on communications protection for the application session rather than for the network packet.\n\nThis requirement applies to applications that utilize communications sessions. This includes, but is not limited to, web-based applications and Service-Oriented Architectures (SOA)."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70245",
            "name": "The application must protect the confidentiality and integrity of transmitted information.",
            "url": null,
            "description": "Without protection of the transmitted information, confidentiality and integrity may be compromised since unprotected communications can be intercepted and either read or altered.\n\nThis requirement applies  to those applications that transmit data, or allow access to data non-locally. Application and data owners have a responsibility for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nApplication and data owners need to identify the data that requires cryptographic protection. If no data protection requirements are defined as to what specific data must be encrypted and what data is non-sensitive and doesn't require encryption, all data must be encrypted.\n \nWhen transmitting data, applications need to leverage transmission protection mechanisms, such as TLS, SSL VPNs, or IPSEC.\n\nCommunication paths outside the physical protection of a controlled boundary are exposed to the possibility of interception and modification. Protecting the confidentiality and integrity of organizational information can be accomplished by physical means (e.g., employing physical distribution systems) or by logical means (e.g., employing cryptographic techniques). If physical means of protection are employed, then logical means (cryptography) do not have to be employed, and vice versa."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
