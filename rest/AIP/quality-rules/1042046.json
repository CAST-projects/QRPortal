{
    "id": 1042046,
    "name": "Avoid Using Dynamic Method Invocation with  Struts  2.3.1.0 ( and Older)",
    "href": "AIP/quality-rules/1042046",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The \u201cDynamic Method Invocation\u201d (DMI) feature has been intoduced in Struts 2 allowing Action to expose other methods instead of execute()\n\nDMI will use the string following a \u201c!\u201d character in an action name as the name of a method to invoke: A reference to Category!create.action, means using the \u201cCategory\u201d action mapping, but calling 'create' method instead.\n\nAnother way to use DMI is to provide HTTP parameters prefixed with method: in the URL it could be Category.action?method:create=foo, the parameter value is ignored. In POST-Requests that can be used e.g. with a hidden parameter (<s:hidden name=\"method:create\" value=\"foo\" />) or along with a button (<s:submit method=\"create\" />).\n\nThis feature can lead to security problem because any user of the Struts 2 web application can also use DMI to call a public method that is in the Action class (mainly when if POJO actions are used) \nIt's, also, possible to pass a malicious expression which can be used to execute arbitrary code on server side when Dynamic Method Invocation is enabled.\n\n\nWith the release of Struts 2.3.1.1 in December 2011, the security issue with using dynamic method invocation was addressed",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts.",
    "reference": "https://nvd.nist.gov/vuln/detail/CVE-2016-3081\nhttp://cwe.mitre.org/data/definitions/77.html\n\nOWASP Top Ten 2017 Category A1 - Injection\nOWASP Top Ten 2013 Category A1 - Injection\nOWASP Top Ten 2004 Category A6 - Injection Flaws\nOWASP Top Ten 2007 Category A2 - Injection Flaws",
    "remediation": "Disable Dynamic Method Invocation when possible or upgrade to Apache Struts versions 2.3.20.3, 2.3.24.3 or 2.3.28.1.",
    "remediationSample": "Update to the latest Struts2 version( 2.3.15.2 or above)\n\nDisable DMI using on of following approach\n\nInclude this Struts2 property setting in struts.xml:\n<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"false\" />\n\nor in struts.properties:\nstruts.enable.DynamicMethodInvocation = false\n\nor in web.xml, include this init-param node in the Struts 2 filter:\n<init-param>\n<param-name>struts.enable.DynamicMethodInvocation</param-name>\n<param-value>false</param-value>\n</init-param>",
    "sample": "Sample 1\n\nStruts configuration:\n\n    <action name=\"MyAction!*\" class=\"my.Action\" method=\"{1}\">\n        <result name=\"step1\">step1.jsp</result>\n        <result name=\"step2\">step2.jsp</result>         \n        <result name=\"error\">error.jsp</result>\n    </action>\n\nThen my.Action class has various methods that can be called by specifying the name in the URL, eg :\n\nhttp://localhost:8080/MyApp/MyAction!method1.action\n\n\n--------------------------------------------------------\nSample 2\n\n\nConsider below jsp code:\n\n<s:form action=\"calculator_add\" >\n<s:textfield name=\"num1\" label=\"Number 1\"></s:textfield>\n<s:textfield name=\"num2\" label=\"Number 2\"></s:textfield>\n<s:submit action=\"calculator_add\" value=\"Add\" />\n<s:submit action=\"calculator_sub\" value=\"Substract\" />\n</s:form>\n\n\nStruts configuration:\n<package name=\"calc\" extends=\"struts-default\">\n        <action name=\"calculatorInput\">\n            <result>/pages/calculator.jsp</result>\n        </action>\n        <action name=\"calculatorResult\">\n            <result>/pages/calculatorResult.jsp</result>\n        </action>\n        <action name=\"calculator_*\" method=\"{1}\"\n            class=\"com.G2.Actions.CalculatorAction\">\n            <result name=\"success\" type=\"chain\">calculatorResult</result>\n        </action>\n\n</package>\n\nAs you can see, instead of writing different action, action name is provided like \u201ccalculator_*\u201d, and method=\u201d{1}\u201d, means if the input is \u201ccalculator_add\u201d then the add() method will be executed in Action class. That means we can invoke any methods dynamically other than execute() in action class.",
    "total": "Number of struts2 config XML file",
    "alternativeName": "Avoid Using Dynamic Method Invocation with  Struts  2.3.1.0 ( and Older)",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-77",
            "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
            "url": "https://cwe.mitre.org/data/definitions/77.html",
            "description": "The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A9-2013",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts."
        },
        {
            "standard": "OWASP",
            "id": "A9-2017",
            "name": "Using Components with Known Vulnerabilities",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities",
            "description": "Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications and APIs using components with known vulnerabilities may undermine application defenses and enable various attacks and impacts."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70261",
            "name": "The application must protect from command injection.",
            "url": null,
            "description": "A command injection attack is an attack on a vulnerable application where improperly validated input is passed to a command shell setup in the application. The result is the ability of an attacker to execute OS commands via the application.\n\nA command injection allows an attacker to execute their own commands with the same privileges as the application executing.\n\nThe following is an example of a URL based command injection attack.\n\nBefore alteration:\nhttp://sitename/cgi-bin/userData.pl?doc=user1.txt\n\nExample URL modified: \nhttp://sitename/cgi-bin/userData.pl?doc=/bin/ls|\n\nThe result is the execution of the command \u201c/bin/ls\u201d which could allow the attacker to list contents of the directory via the browser.\n\nThe following is a list of functions vulnerable to command injection sorted according to language.  \n\nLanguage Functions/Characters\n- C/C++  - system(), popen(), execlp(), execvp(), ShellExecute(), ShellExecuteEx(), _wsystem()\n- Perl - system, exec, `,open, |, eval, /e\n- Python - exec, eval, os.system, os.popen, execfile, input, compile\n- Java - Class.forName(), Class.newInstance(), Runtime.exec()"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
