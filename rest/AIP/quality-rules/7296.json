{
    "id": 7296,
    "name": "Never define static variables in header files",
    "href": "AIP/quality-rules/7296",
    "critical": true,
    "maxWeight": 7,
    "associatedValueName": "Header file name",
    "description": "This rule searches for static variables which are defined in header files (ex: *.h files).  but not in a class definition. \n\nNotes: \n- Static variables which are taken into account are global variables only and, for C++, are outside any class scope.",
    "output": "Associated to each C/C++ static variable with violations, the Quality Rule provides:\n- The header file name \n- Bookmarks for violation occurrences found in the source code:\n  - static variable",
    "rationale": "When defining a static variable in a header file, a new instance of the variable is created for each file including the header file. This is often surprising as people often expect to have only one instance of the variable. This leads to errors that are very difficult to track/understand.",
    "remediation": "Do not define the variable in header as static but define it as static in a source file (ex: *.c, *.cpp) and as extern in files using it instead.\nIn the particular case of \"static const variable=value;\", just remove the static, it is redundant with the \"const\" qualifier.",
    "remediationSample": "FILE: f.h\n\nextern int myvar;\n\nFILE: f2.cpp\n\n#include \"f.h\"\nvoid g() {\n   myvar = 1;\n}\n\nFILE: f1.cpp\n\n#include \"f.h\"\nint myvar = 0;\nvoid g();\nint main(int argc, char* argv[]) {\n   g();\n   printf(\"myvar value is %d\\n\", myvar); /* Display 1 as expected. */\n   return 0;\n}",
    "sample": "FILE: f.h\n\nstatic int myvar = 0;\n\nFILE: f2.cpp\n\n#include \"f.h\"\nvoid g() {\n   myvar = 1;\n}\n\nFILE: f1.cpp\n\n#include \"f.h\"\nvoid g();\nint main(int argc, char* argv[]) {\n  g();\n  printf(\"myvar value is %d\\n\", myvar); /* We expect 1 to be displayed, but it is not the case.. */\n  return 0;\n}",
    "total": "Number of C/C++ static variables",
    "alternativeName": "Never define static variables in header files",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61024,
            "name": "Programming Practices - Structuredness",
            "href": "AIP/technical-criteria/61024",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
