{
    "id": 1042032,
    "name": "Avoid using setters with Struts 2",
    "href": "AIP/quality-rules/1042032",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "The ActionSupport (com.opensymphony.xwork2.ActionSupport), a very powerful and convenience class that provides default implementation of few of the important interfaces \n\nAn action class extending ActionSupport will receive all HTTP parameters sent and these parameters will be automatically mapped to the setters of the Struts 2 action class. One should review the use of the fields set by the setters, to be sure they are used safely. By default, they should be considered as untrusted inputs. Thus can leads to potential security vulnerabilities\n\n\nThis rule will check if a setter is used in Struts2 ActionSupport. If yes, it gives violation.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code\n- Secondary Bookmark for violation",
    "rationale": "You should carefully design your actions without exposing anything via setters and getters, thus can leads to potential security vulnerabilities. Any action\u2019s setter can be used to set incoming untrusted user\u2019s value which can contain suspicious expression. Some Struts Results automatically populate params based on values in  ValueStack (action in most cases is the root) which means incoming value will be evaluated as an expression during this process",
    "reference": "https://struts.apache.org/security/#do-not-define-setters-when-not-needed",
    "remediation": "Do not define setters when not needed as recommanded by : https://struts.apache.org/security/#do-not-define-setters-when-not-needed\n\nSanitize the user input. \nThis can be for example done by implementing the validate() method of com.opensymphony.xwork2.ActionSupport.",
    "remediationSample": "public interface\u00a0WritableValue<T> \npublic interface\u00a0ReadOnlyProperty<T>\nextends\u00a0ObservableValue<T>",
    "sample": "public class AccountBalanceAction extends ActionSupport {\n  private static final long serialVersionUID = 1L;\n  private Integer accountId;\n\n  // this setter might be called with user input\n  public void setAccountId(Integer accountId) {\n    this.accountId = accountId;\n  }\n\n  @Override\n  public String execute() throws Exception {\n    // call a service to get the account's details and its balance\n    [...]\n    return SUCCESS;\n  }\n}\n\nSample 2: \n\npublic String execute() {\n\t\t// add a cookie to response\n\t\tresponse.addCookie(new Cookie(\"user\", \"Pankaj\"));\n\t\tif (requestCookies == null)\n\t\t\trequestCookies = new HashMap<String, String>();\n\t\trequestCookies.put(\"test\", \"test\");\n\n\t\tSystem.out.println(\"Session Attributes: \" + sessionAttributes);\n\t\t// add session attribute\n\t\tHttpSession mySession = request.getSession();\n\t\tmySession.setAttribute(\"user\", \"Pankaj\");\n\t\t//OR\n\t\tsessionAttributes.put(\"test\", \"Test\");\n\n\t\tSystem.out.println(\"Context Attributes: \"\n\t\t\t\t+ contextAttributes.get(\"user\"));\n\t\t// add context attribute\n\t\tcontextAttributes.put(\"user\", \"Pankaj\");\n\t\t\n\t\tsetUser(getText(\"user\"));\n\t\tsetPassword(getText(\"password\"));\n\t\tsetMessage(getText(\"user\"));\n\n\t\tSystem.out.println(\"Request Attributes: \" + requestAttributes);\n\t\t\n\t\tSystem.out.println(\"Request getText: \" + getText(\"user\"));\n\t\tSystem.out.println(\"Request getText: \" + getText(\"password\"));\n\t\treturn SUCCESS;\n\t}\n\nprivate String user;\n\tprivate String password;\n\tprivate String message;\n\n\tpublic String getUser() {\n\t\treturn user;\n\t}\n\n\tpublic void setUser(String user) {\n\t\tthis.user = user;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\n\tpublic String getMessage() {\n\t\treturn message;\n\t}\n\n\tpublic void setMessage(String message) {\n\t\tthis.message = message;\n\t}",
    "total": "Number of java artifact",
    "alternativeName": "Ensure not defining setters with Struts 2 to avoid exposing sensitive data.",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A1-Injection",
            "description": "Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attackers' hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A1-Injection",
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
