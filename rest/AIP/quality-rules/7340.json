{
    "id": 7340,
    "name": "Avoid Classes with Destructor not explicitly virtual whenever one of its base Class has a virtual Destructor",
    "href": "AIP/quality-rules/7340",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule searches for derived classes which provide a destructor not explicitly declared as virtual and which inherit from a base class that provides a virtual destructor.",
    "output": "Associated to each C++ class with violations, the Quality Rule provides:\n- Bookmarks for violation occurrences found in source code:\n  - Derived-class non-virtual destructor\n  - Base-class virtual destructor",
    "rationale": "A missing virtual keyword in front of a destructor \"overriding\" a virtual destructor will hide the polymorphic nature of the destructor from developers using the class. They may not know that at execution time other destructors in the inheritance tree will be executed. A missing virtual keyword may also be an indication that the author of the destructor ignored the fact that it needed to be virtual and thus was not aware that the destructor requires specific attention and specific coding.",
    "remediation": "Add the virtual keyword in the destructor declaration, checks that the destructor is implemented as expected and matches the class hierarchy design requirements, and documents the destructor for future extension of the class hierarchy and modification of the method.\n\nAlternatively, if the derived class destructor is empty, remove it.",
    "remediationSample": "class Car : public Vehicle\n{\npublic:\n    Car();\n    virtual ~Car();           // FIXED\nprotected:\n    int numberOfWheels;\n};",
    "sample": "class Vehicle \n{\npublic:\n    Vehicle();\n    virtual ~Vehicle();\n    void start();\n    void stop();\n    virtual void run();\nprotected:\n    Engine* theEngine;\n};\n\nclass Car : public Vehicle\n{\npublic:\n    Car();\n    ~Car();           // VIOLATION\nprotected:\n    int numberOfWheels;\n};",
    "total": "Number of C++ classes",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61010,
            "name": "Complexity - OO Inheritance and Polymorphism",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-17",
            "name": "Child Class Element wihout Virtual Destructor unlike its Parent Class Element",
            "url": null,
            "description": "Objective\nAvoid failing to include a virtual destructor in a child class despite the existence of a virtual destructor in the parent class\n\nConsequence\nSoftware that does not follow the principles of inheritance and polymorphism results in unexpected behaviors\n\nMeasure Element\nNumber of instances where, for languages in which custom destructors can be written, the child class element used in the 'from' association of a Extends class relation does not have its own virtual destructor, while its parent class element that is used in the 'to' association of the Extends class relation has a virtual destructor\n\n"
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
