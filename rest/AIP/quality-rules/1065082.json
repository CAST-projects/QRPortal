{
    "id": 1065082,
    "name": "Handlers of a function-try-block implementation of a class constructor ordestructor shall not reference non-static members from this class or its bases.",
    "href": "AIP/quality-rules/1065082",
    "critical": false,
    "maxWeight": 2,
    "description": "Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "The effect of accessing a non-static member of a class or a base class in the handler (i.e. the catch part) of a function-try-block of a class constructor/destructor is undefined.\nFor example, if a memory allocation exception is thrown during the creation of the object, the object will not exist when the handler attempts to access its members. Conversely, in the destructor, the object may have been successfully destroyed before the exception is handled, so again will not be available to the handler.\nBy contrast, the lifetime of a static member is greater than that of the object itself, so the static member is guaranteed to exist when the handler accesses it.",
    "reference": "MISRA C++, 2008, 15-3-3: Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases.\n\nAUTOSAR 2014, M15-3-3: Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases.",
    "remediation": "Reference a Static Member",
    "sample": "class C\n    {\n        public:\n         int32_t x;\n         C ( )\n             try\n             {\n             // Action that may raise an exception\n             }\n             catch ( ... )\n                 {\n                 if ( 0 == x ) // Non-compliant \u2013 x may not exist at this point\n                 {\n             // Action dependent on value of x\n             }\n             }\n     ~C ( )\n         try\n         {\n         // Action that may raise an exception\n         }\n         catch ( ... )\n         {\n             if ( 0 == x ) // Non-compliant \u2013 x may not exist at this point\n             {\n             // Action dependent on value of x\n             }\n         }\n    };",
    "total": "Number of C / C++ method and function",
    "alternativeName": "Handlers of a function-try-block implementation of a class constructor ordestructor shall not reference non-static members from this class or its bases.",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "href": "AIP/technical-criteria/61014",
            "weight": 2
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "id": "AUTOSAR-CPP-2014-Exceptions",
            "name": "Exceptions",
            "href": "AIP/quality-standards/C-CPP/items/AUTOSAR-CPP-2014-Exceptions",
            "standard": "C-CPP"
        },
        {
            "id": "MISRA-CPP-2008-Exceptions",
            "name": "Exceptions",
            "href": "AIP/quality-standards/C-CPP/items/MISRA-CPP-2008-Exceptions",
            "standard": "C-CPP"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        10.0,
        70.0,
        90.0,
        99.0
    ]
}
