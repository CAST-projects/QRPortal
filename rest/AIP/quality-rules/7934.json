{
    "id": 7934,
    "name": "Avoid Superclass (or Interface) knowing Subclass (or Interface)",
    "href": "AIP/quality-rules/7934",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Referenced Class or Interface full name",
    "description": "A Superclass or interface is not allowed to have knowledge of any of its subclasses or Interfaces. The Superclass (or Interface) has knowledge of the Subclass (or Interface) if the Superclass (or Super-interface) directly calls a Subclass-method, uses a Subclass-attribute or refers to the name of the Subclass (or reference the subinterface).",
    "output": "This report lists all Classes (or Interfaces) referencing a Subclass (or Interface).\nIt provides the following information:\n- Class or Interface full name\n- Referenced class or interface full name",
    "rationale": "Referencing down the inheritance tree is against Object-Oriented coding practices. It is a way of having two-way inheritance between class (or interface) and subclass (or subinterface). This is an indication of poor class (or interface) design and class (or interface) inheritance. Such practices increase the complexity of the application.",
    "reference": "https://it-cisq.org/\nCISQ rule: ASCRM-RLB-14.",
    "remediation": "Review the design of the Class hierarchy",
    "sample": "C# Sample:\n    public class MySuperClass\n    {\n        public void aMethod() { MySubClass c = null; } // VIOLATION: Reference to a sub class\n    }\n\n    class MySubClass : MySuperClass\n    {\n        protected int m_subclassField = 0;\n    }",
    "total": "Number of classes and interfaces",
    "alternativeName": "Avoid Superclass (or Interface) knowing Subclass (or Interface)",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "AIP/technologies/141901"
        },
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-14",
            "name": "Parent Class Element with References to Child Class Element",
            "url": null,
            "description": "Objective\nAvoid parent class references to child class(es)\n\nConsequence\nSoftware that does not follow the principles of inheritance and polymorphism results in unexpected behaviors\n\nMeasure Element\nNumber of instances where a parent class element that is used in the 'to' association of an Extends class relation, references the child class element used in the 'from' association of an Extends class relation, directly or indirectly through a parent and child class element, using a callable or data relation (the reference statement is made directly to the child class element or to any one of its own method or member elements)\n\n"
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
