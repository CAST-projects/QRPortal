{
    "id": 4604,
    "name": "Avoid using 'java.lang.Error'",
    "href": "AIP/quality-rules/4604",
    "critical": false,
    "maxWeight": 2,
    "description": "Java artifacts should not use 'java.lang.Error()'",
    "output": "This report lists all java Objects using 'java.lang.Error()'. It provides the following information: Object full name",
    "rationale": "Using 'java.lang.Error()' is not recommended since it goes against the Exception error handling model. An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch. Most of these errors are abnormal conditions.",
    "reference": "https://docs.oracle.com/javase/7/docs/api/java/lang/Error.html\nhttps://www.geeksforgeeks.org/errors-v-s-exceptions-in-java/\nhttps://www.cis.upenn.edu/~bcpierce/courses/629/jdkdocs/api/java.lang.Error.html",
    "remediation": "Prefer using the exception error handling model instead of 'java.lang.Error'",
    "remediationSample": "static private final class LookaheadSuccess extends java.lang.Exception { } //Fixed",
    "sample": "Sample#1:\nstatic private final class LookaheadSuccess extends java.lang.Error { }   //VIOLATION\n\nSample#2:\nprivate void parseAndRun(String[] args)\n    {\n        debugLog(\"Start of parseAndRun(args)\");\n        boolean optionParsed;\n        try\n        {\n            debugLog(\"Before parseOptions(args)\");\n            optionParsed = parseOptions(args);\n            debugLog(\"After parseOptions(args)\");\n        }\n   \n        catch (Error e)   //VIOLATION\n        {\n            setErrorCode(ERROR_CODE_OPTION_PARSE_EXCEPTION);\n            throw Logging.fatal(e, \"cast.commandLine.exceptionDuringOptionCheck\");\n        }\n}\n\nSample#3:\n\n/** Constructor. */\npublic DataParserTokenManager(SimpleCharStream stream){\n   if (SimpleCharStream.staticFlag)\n      throw new Error(\"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.\"); //VIOLATION\n   input_stream = stream;\n}\n\nSample#4:\n\n//Error Field\nError err = new Error();  //VIOLATION",
    "total": "Number of Java Objects",
    "alternativeName": "Prefer using the exception error handling model instead of 'java.lang.Error'",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 2,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": "Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
