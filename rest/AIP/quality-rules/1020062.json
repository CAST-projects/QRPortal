{
    "id": 1020062,
    "name": "Avoid using non thread-safe Javascript singleton pattern",
    "href": "AIP/quality-rules/1020062",
    "critical": false,
    "severity": 10,
    "maxWeight": 8,
    "extension": {
        "name": "com.castsoftware.html5",
        "href": "AIP/extensions/com.castsoftware.html5"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "Singleton objects should use a thread-safe pattern for creating their shared instance.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "If singleton is invoked in a multi-threaded program, you could end up creating multiple instances of the class which will make the application unstable.",
    "reference": "OMG CISQ",
    "remediation": "Make sure that you have only one instance created in class constructor and it has been frozen to avoid any changes.",
    "remediationSample": "class UserStore { \n  constructor(){ \n   if(! UserStore.instance){ \n     UserStore.instance = this; \n   } \n\n   return UserStore.instance; \n  } \n\n} \n\nconst instance = new UserStore(); \nObject.freeze(instance); \n\nexport default instance;",
    "sample": "class UserStore { \n  constructor(){ \n   if(! UserStore.instance){ \n     UserStore.instance = this; \n   } \n\n   return UserStore.instance; \n  } \n\n// VIOLATION, THIS IS NOT ENOUGH \n}",
    "total": "Number of Javascript Classes",
    "alternativeName": "Make sure that you have only one instance created in class constructor and it has been frozen to avoid any changes.",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062158,
            "name": "ASCRM-RLB-12 - Singleton Class Instance Creation without Proper Lock Element Management",
            "href": "AIP/technical-criteria/1062158",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061146,
            "name": "CWE-1096 - Singleton Class Instance Creation without Proper Locking or Synchronization",
            "href": "AIP/technical-criteria/1061146",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061060,
            "name": "CWE-543 - Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
            "href": "AIP/technical-criteria/1061060",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "href": "AIP/technical-criteria/66063",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "AIP/technologies/1020000"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCRM-RLB-12",
            "name": "Singleton Class Instance Creation without Proper Lock Element Management",
            "href": "AIP/quality-standards/CISQ/items/ASCRM-RLB-12",
            "standard": "CISQ"
        },
        {
            "id": "CWE-543",
            "name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
            "href": "AIP/quality-standards/CWE/items/CWE-543",
            "standard": "CWE"
        },
        {
            "id": "CWE-1096",
            "name": "Singleton Class Instance Creation without Proper Locking or Synchronization",
            "href": "AIP/quality-standards/CWE/items/CWE-1096",
            "standard": "CWE"
        },
        {
            "id": "CWE-543",
            "name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-543",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-1096",
            "name": "Singleton Class Instance Creation without Proper Locking or Synchronization",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-1096",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-543",
            "name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-543",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "CWE-1096",
            "name": "Singleton Class Instance Creation without Proper Locking or Synchronization",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-1096",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "href": "AIP/quality-standards/OWASP/items/M7-2016",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities identified in the vulnerability identification process (as defined in PCI DSS Requirement 6.1).",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.6",
            "name": "All high risk vulnerabilities identified in the vulnerability identification process (as defined in PCI DSS Requirement 6.1).",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.6",
            "standard": "PCI-DSS-V3.2.1"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
