{
    "id": 8400,
    "name": "Avoid having lock on this object",
    "href": "AIP/quality-rules/8400",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule detects all objects having lock on this object.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Software featuring inconsistent locking discipline incurs the risk of deadlock. \nLocking on this or public members is a bad practice because it means the class loses control over the lock. Any other class could use the instance or the public member for synchronization, and impair scalability (best case) or create deadlocks (worst case).",
    "reference": "https://docs.microsoft.com/dotnet/csharp/language-reference/keywords/lock-statement",
    "remediation": "Review and refactor the source code.",
    "remediationSample": "public class Account\n{\n    private readonly object balanceLock = new object();\n    private decimal balance;\n\n    public Account(decimal initialBalance)\n    {\n        balance = initialBalance;\n    }\n\n    public decimal Debit(decimal amount)\n    {\n        lock (balanceLock)\n        {\n            if (balance >= amount)\n            {\n                Console.WriteLine($\"Balance before debit :{balance, 5}\");\n                Console.WriteLine($\"Amount to remove     :{amount, 5}\");\n                balance = balance - amount;\n                Console.WriteLine($\"Balance after debit  :{balance, 5}\");\n                return amount;\n            }\n            else\n            {\n                return 0;\n            }\n        }\n    }\n}",
    "sample": "public class Account\n{\n    private decimal balance;\n\n    public Account(decimal initialBalance)\n    {\n        balance = initialBalance;\n    }\n\n    public decimal Debit(decimal amount)\n    {\n        lock (this)\n        {\n            if (balance >= amount)\n            {\n                Console.WriteLine($\"Balance before debit :{balance, 5}\");\n                Console.WriteLine($\"Amount to remove     :{amount, 5}\");\n                balance = balance - amount;\n                Console.WriteLine($\"Balance after debit  :{balance, 5}\");\n                return amount;\n            }\n            else\n            {\n                return 0;\n            }\n        }\n    }\n}",
    "total": "Number of artifacts",
    "alternativeName": "Avoid having lock on this object",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062185,
            "name": "ASCSM-CWE-667 - Shared Resource Improper Locking",
            "href": "AIP/technical-criteria/1062185",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061076,
            "name": "CWE-667 - Improper Locking",
            "href": "AIP/technical-criteria/1061076",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCSM-CWE-667",
            "name": "Shared Resource Improper Locking",
            "href": "AIP/quality-standards/CISQ/items/ASCSM-CWE-667",
            "standard": "CISQ"
        },
        {
            "id": "CWE-250",
            "name": "Execution with Unnecessary Privileges",
            "href": "AIP/quality-standards/CWE/items/CWE-250",
            "standard": "CWE"
        },
        {
            "id": "CWE-667",
            "name": "Improper Locking",
            "href": "AIP/quality-standards/CWE/items/CWE-667",
            "standard": "CWE"
        },
        {
            "id": "CWE-667",
            "name": "Improper Locking",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-667",
            "standard": "ISO-5055"
        },
        {
            "id": "NIST-AC-6",
            "name": "Least Privilege",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-AC-6",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "CWE-667",
            "name": "Improper Locking",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-667",
            "standard": "OMG-ASCQM"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
