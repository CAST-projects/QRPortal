{
    "id": 1039016,
    "name": "Avoid Unvalidated URL Redirect",
    "href": "AIP/quality-rules/1039016",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks. \n\nScenario \n1. A user is tricked into visiting the malicious URL: http://website.com/login?redirect=http://evil.vvebsite.com/fake/login \n2. The user is redirected to a fake login page that looks like a site they trust. (http://evil.vvebsite.com/fake/login) \n3. The user enters his credentials. \n4. The evil site steals the user's credentials and redirects him to the original website. \n\nThis attack is plausible because most users don't double check the URL after the redirection. Also, redirection to an authentication page is very common.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.",
    "reference": "http://cwe.mitre.org/data/definitions/601 \nhttps://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet",
    "remediation": "Don't accept redirection destinations from users \nAccept a destination key, and use it to look up the target (legal) destination \nAccept only relative paths \nWhite list URLs (if possible) \nValidate that the beginning of the URL is part of a white list",
    "remediationSample": "response.sendRedirect(\"http://www.mysite.com\"); // Violation FIXED",
    "sample": "Sample 1: \nThe following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address. \n\npublic class RedirectServlet extends HttpServlet { \nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { \nString query = request.getQueryString(); \nif (query.contains(\"url\")) { \nString url = request.getParameter(\"url\"); \nresponse.sendRedirect(url); \n} \n} \n} \n\n\n------------------------------------------------------------------------ \nSample 2: \nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { \n    [...] \n    resp.sendRedirect(req.getParameter(\"redirectUrl\")); \n    [...] \n}",
    "total": "Number of Java artifacts",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-601",
            "name": "URL Redirection to Untrusted Site ('Open Redirect')",
            "url": "https://cwe.mitre.org/data/definitions/601.html",
            "description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-10",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A10-2013",
            "name": "Unvalidated Redirects and Forwards",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards",
            "description": "Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.7",
            "name": "  Cross-site scripting (XSS)",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70257",
            "name": "The application must protect from Cross-Site Scripting (XSS) vulnerabilities.",
            "url": null,
            "description": "XSS attacks are essentially code injection attacks against the various language interpreters contained within the browser. XSS can be executed via HTML, JavaScript, VBScript, ActiveX; essentially any scripting language a browser is capable of processing.\n\nXSS vulnerabilities are created when a website does not properly sanitize, escape, or encode user input. For example, \"&lt;\" is the HTML encoding for the \"<\" character. If the encoding is performed, the script code will not execute.\n\nThere are 3 parties involved in an XSS attack, the attacker, the trusted and vulnerable website, and the victim. An attacker will take advantage of a vulnerable website that does not properly validate user input by inserting malicious code into any data entry field.\n\nWhen the victim visits the trusted website and clicks on the malicious link left by the attacker, the attacker\u2019s script is executed in the victims browser with the trust permissions assigned to the site.\n\nThere are several different types of XSS attack and the complete details regarding XSS cannot be described completely here.\n\nTo address the issue of XSS, web application developers must escape, encode or otherwise validate all user input that is processed and output by the web server. They should also use web templates or a web development framework that provides the capability to encode or otherwise validate user input.\n\nExamples of XSS vulnerabilities can be obtained from the Open Web Application Security Project (OWASP) website.\n  \nThe site is available by pointing your browser to https://www.owasp.org."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
