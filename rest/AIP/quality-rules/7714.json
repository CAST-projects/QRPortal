{
    "id": 7714,
    "name": "Avoid using auto-wiring",
    "href": "AIP/quality-rules/7714",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "Field injection is not recommended. This rule reports all Spring Bean that use autowire attribute.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Auto-wiring can save you time in small applications, but in many cases, it leads to bad practices and is inflexible in large applications. Using byName seems like a good idea, but it may lead you to give your classes artificial property names so that you can take advantage of the auto-wiring functionality. The whole idea behind Spring is that you can create your classes how you like and have Spring work for you, not the other way around. You may be tempted to use byType until you realize\nthat you can only have one bean for each type in your BeanFactory -- a restriction that is problematic when you need to maintain beans with different configurations of the same type.\n\nAlso it will affect the performance of your application since auto-wiring is slow.",
    "reference": "https://blog.marcnuri.com/field-injection-is-not-recommended/\nhttps://howtodoinjava.com/best-practices/13-best-practices-for-writing-spring-configuration-files/\nhttps://www.vojtechruzicka.com/field-dependency-injection-considered-harmful/\nhttp://code.google.com/p/google-guice/wiki/SpringComparison\nhttps://www.baeldung.com/spring-annotations-resource-inject-autowire\nhttps://stackoverflow.com/questions/7142622/what-is-the-difference-between-inject-and-autowired-in-spring-framework-which",
    "remediation": "Define your wiring explicitly, and you benefit from explicit semantics and full flexibility on property naming and on how many instances of\nthe same type you manage.\n\nSpring team recommands to Always use constructor based on dependency injection in your bean and Always use assertions  for mandatory dependencies",
    "remediationSample": "<beans>\n   <bean id=\"myBean\" class=\"com.cast.MyBean\"/> // FIXED\n...\n</beans>\n\n@Service\npublic class ModuleManagementService {\n\n    \n  private ModuleManagementManager moduleManagementManager;\n \n  //  Prefer setter injection over constructor injection\n  @Inject  // OR @Autowired\n  public void setInjectedBean() {\n      moduleManagementManager = new ModuleManagementManager();   // NO VIOLATION\n  }\n}",
    "sample": "<beans>\n   <bean id=\"myBean\" autowire=\"byName\" class=\"com.cast.MyBean\"/> // VIOLATION\n...\n</beans>\n\n\n\nimport org.springframework.stereotype.Component;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Component\npublic class ModuleManagementManager {\n  private static final Logger LOGGER = LoggerFactory.getLogger(ModuleManagementManager.class);\n}\n\nimport org.springframework.stereotype.Service;\n\nimport javax.enterprise.inject.Instance;\nimport javax.inject.Inject;\nimport javax.inject.Named;\nimport javax.inject.Provider;\nimport javax.inject.Qualifier;\nimport javax.inject.Scope;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Service\npublic class ModuleManagementService {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(ModuleManagementService.class);\n  \n  // JSR-330 injection\n  @Inject\n  ModuleManagementManager moduleManagementManager = new ModuleManagementManager(); // VIOLATION\n}",
    "total": "Number of Java classes",
    "alternativeName": "Prefer not using auto-wiring to guarantee more flexibility and better performance of your application",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66009,
            "name": "Architecture - Reuse",
            "href": "AIP/technical-criteria/66009",
            "weight": 7
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-609",
            "name": "Double-Checked Locking",
            "href": "AIP/quality-standards/CWE/items/CWE-609",
            "standard": "CWE"
        },
        {
            "id": "NIST-SI-16",
            "name": "Memory Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-16",
            "standard": "NIST-SP-800-53R4"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
