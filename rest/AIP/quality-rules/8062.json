{
    "id": 8062,
    "name": "An unconditional 'throw', 'return' or 'break' shall terminate every non-empty switch-clause",
    "href": "AIP/quality-rules/8062",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule checks for a 'switch'-clause that does not end with a 'break', a 'return' or a 'throw'. This construct should be at the top level in the 'switch'-clause. The rule is not triggered if the last 'switch'-clause of a 'switch' statement is 'default', and does not explicitly end with 'break', 'return' or 'throw'.",
    "output": "Associated to each C function, C++ method, constructor, and destructor with violations, the Quality Rule provides:\n- The number of violations patterns\n- Bookmarks for violation occurrences found in source code:\n  - case clause",
    "rationale": "By default, when the program reaches the end of a 'switch'-clause, it continues to the next clause. While this may prove useful in some cases, it is very uncommon and not at all obvious.",
    "reference": "MISRA C++",
    "remediation": "Add a 'break', 'return' or 'throw' statement to end 'case' clauses.",
    "sample": "int main()\n{\n    int i = 2;\n    switch(i)\n    {\n    case 0:\n        cout << \"0\" << endl;\n        // Violation\n    case 1:\n        // No violation: Empty clause\n    case 2:\n        cout << \"1 or 2\" << endl;\n        break; // No violation: A break\n    default:\n        cout << \"Other\" << endl;\n        // No violation: Last clause is default\n    }\n}",
    "total": "Number of C functions, C++ methods, constructors, and destructors",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61024,
            "name": "Programming Practices - Structuredness",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "AIP/technologies/-2"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "AIP/technologies/-3"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-484",
            "name": "Omitted Break Statement in Switch",
            "url": "https://cwe.mitre.org/data/definitions/484.html",
            "description": "The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
