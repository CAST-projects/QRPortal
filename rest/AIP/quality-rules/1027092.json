{
    "id": 1027092,
    "name": "Always pass optional parameters too, when making 'base' calls",
    "href": "AIP/quality-rules/1027092",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will raise a violation when a parameter of a method in a base class is ignored while making a 'base' call",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When a parameter of a method in a base class is ignored while making a 'base' call in an override, the value passed by the caller is ignored. This will lead to unexpected result.",
    "reference": "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/base\n\nhttps://cwe.mitre.org/data/definitions/628.html",
    "remediation": "Pass the optional parameters",
    "remediationSample": "public class BaseClass\n{\n    int num;\npublic virtual void BaseMethod(int i = 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\npublic override void BaseMethod(int i = 1)\n    {\n        // ...\n        base.BaseMethod(i); // Violation Fixed\n    }\n}\n\n\npublic class Program\n{\nstatic int Main(string[] args)\n    {\n        DerivedClass dc = new DerivedClass();\n        dc.BaseMethod(7);  // prints 7\n    }\n}",
    "sample": "public class BaseClass\n{\n    int num;\npublic virtual void BaseMethod(int i = 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\npublic override void BaseMethod(int i = 1)\n    {\n        // ...\n        base.BaseMethod(); // Violation; caller's value is ignored\n    }\n\n}\n\npublic class Program\n{\n    static int Main(string[] args)\n    {\n        DerivedClass dc = new DerivedClass();\n        dc.BaseMethod(7);  // prints 1\n    }\n}",
    "total": "Number of Methods",
    "alternativeName": "Always pass optional parameters too, when making 'base' calls",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
