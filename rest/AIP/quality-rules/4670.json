{
    "id": 4670,
    "name": "Public Methods must have JavaDoc comments",
    "href": "AIP/quality-rules/4670",
    "critical": false,
    "severity": 10,
    "maxWeight": 6,
    "extension": {
        "name": "com.castsoftware.jee",
        "href": "AIP/extensions/com.castsoftware.jee"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "When enforcing the utilization of JavaDoc Comments to document an application, all Methods must have JavaDoc Comments. Those comments must be defined just before the declaration of the Method with the appropriate structure (/** */)\n\nThe Private Methods are not Considered bu this rule\nException: \n-  Methods that implement or override a method in an interface or superclass without adding any interesting behavior beyond what is already documented for the overridden method\n- Getters and Setters\n- Empty constructors",
    "output": "This report lists Methods not having JavaDoc comments.\nThis report provides the following information:\n Method full name",
    "rationale": "There is no dispute that these comments contribute to a developer's understanding and help a developer write reliable applications more quickly. Without documenting methods it is dififcult for anyone else than the author to guess the purpose of the method except by looking at the code and eventually the code called by this method.",
    "reference": "https://developer.atlassian.com/server/confluence/javadoc-standards/",
    "remediation": "You should add JavaDoc Comments for all  methods (Except Private Methods,getters and setters, Empty Constructors and Methods overriding another method) of the application.",
    "remediationSample": "/**\n * Extracts the user's name from the input arguments.\n *\n * Precondition: 'args' should contain at least one element, the user's name.\n *\n * @param  args            the command-line arguments.\n * @return                 the user's name (the first command-line argument).\n * @throws NoNameException if 'args' contains no element.\n */\npublic static String getName(String[] args) throws NoNameException {\n    if(args.length == 0) {\n        throw new NoNameException();\n    } else {\n        return args[0];\n    }\n}",
    "sample": "public static String classMethod(String[] args) throws NoNameException {  //Violation\n    if(args.length == 0) {\n        throw new NoNameException();\n    } else {\n        return args[0];\n    }\n}",
    "total": "Number of methods Excluding Priviate Methods",
    "alternativeName": "Ensure Methods have JavaDoc comments",
    "businessCriteria": [
        {
            "id": 66033,
            "name": "Documentation",
            "href": "AIP/business-criteria/66033"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61008,
            "name": "Documentation - Automated Documentation",
            "href": "AIP/technical-criteria/61008",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
