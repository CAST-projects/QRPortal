{
    "id": 1039042,
    "name": "'Optional.isPresent' should be used before invoking 'Optional.get' to access value",
    "href": "AIP/quality-rules/1039042",
    "critical": true,
    "associatedValueName": "Number of Java Methods",
    "description": "With java.util.Optional<T> introduced in Java 1.8, the need for null references is significantly reduced. Nevertheless, some care is needed when creating an instance of an Optional or when using it. \n\nFor instance, the Optional.get method will throw a NoSuchElementException if the value is not present, or the Optional.of method will throw a NullPointerException if the provided value is null. Therefore, both of these methods are as risky as directly de-referencing potential null values. \n \nIn this rule, we check if Optional.isPresent is used before invoking  Optional.get as showing in the following sample \n\npublic String findZipCode(String userId) {\n    Optional<User> optUser = userRepository.findById(userId);\n    if(optUser.isPresent()) {\n        User user = optUser.get();\n        Optional<Address> optAddress = user.getAddress();\n        if(optAddress.isPresent()) {\n            Address address = optAddress.get();\n            return address.getZipCode().orElse(\"\");\n        }\n    }\n    return \"\";\n}",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation patterns\n- Bookmarks for violation patterns found in the source code",
    "rationale": "NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions",
    "reference": "https://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html\nhttps://dzone.com/articles/features-to-avoid-null-reference-exceptions-java-a\nhttps://cwe.mitre.org/data/definitions/476.html ",
    "remediation": "Optional.isPresent should be used before invoking  Optional.get. But PLEASE Note that one major benefit we get from an Optional is that it provides a set of higher order functions, which can be chained without worrying whether the value is present or not. orElse(...), orElseGet(...), or orElseThrow(...) or .ifPresentOrElse(...)  as following sample \n\nOptional.ifPresentOrElse is similar to Optional.ifPresent from Java 1.8, but it performs a second action if the value is not present. For example, if the task was to print the ZIP code and it is provided or print a message otherwise, we could do the following:\n\npublic String printZipCode(String userId) {\n    userRepository.findById(userId)  \n        .flatMap(User::getAddress)\n        .flatMap(Address::getZipCode)\n        .ifPresentOrElse(\n            System.out::println, \n            () -> System.out.println(\"The zip Code is not provided!\")\n        );\n}\n\n--------------------------\n\nJava 10 introduced a better alternative \u2014 Optional.orElseThrow \u2014 whose behavior is the same, but the method name is screaming that an exception will be thrown if the value is not present.\n\nThe code above is only intending to show an ugly usage of Optionals. A more elegant approach would be to make a chain of higher-order functions provided by the Optional API:\n\npublic String findZipCode(String userId) {\n    return userRepository.findById(userId)\n        .flatMap(User::getAddress)\n        .flatMap(Address::getZipCode)\n        .orElse(\"\");\n}",
    "remediationSample": " Optional<Department> deptOpt= studList.stream().min(comparator.comparing(Department::getDepartmentNo));\n\nDepartment department = null;\nif(deptOpt.isPresent())  // Violation FIXED\n    department = deptOpt.get();\n} ",
    "sample": "Optional<Department> deptOpt= studList.stream().min(comparator.comparing(Department::getDepartmentNo));\n\nDepartment department = null;\n    department = deptOpt.get();  // Violation  \n} ",
    "total": "Number of Java Artifact",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-476",
            "name": "NULL Pointer Dereference",
            "url": "https://cwe.mitre.org/data/definitions/476.html",
            "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
