{
    "id": 4712,
    "name": "Avoid inheritance down the Package path",
    "href": "AIP/quality-rules/4712",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Inherited Class Full Name",
    "description": "Classes should not inherit from another Class which is located in a subpackage. For example: given the Package path com.castsoftware.product.p1.p2.p3.p4 a Class c1 in p1 is not allowed to inherit from a Class c2 in p2, p3 or p4.",
    "output": "This report lists all Classes inheriting from a Class lower down in the Package path. It provides the following information: Class full name, Inherited Class Full Name",
    "rationale": "Each package is seen as completely independent by the JVM, sub-packages are seen just like any other package. It is, however, good practice to respect this hierarchy so that any package acts as a container of sub-packages. The advantages of this for other modules are that it is only necessary to import the parent package to benefit from the service offered by this parent package, and, as such, there is no obligation to import other sub-packages. The package is then seen as a unit of abstraction of the implementation of a service implemented by the classes in this package and sub-packages. This will ease the maintainability and transferability of the packages.",
    "remediation": "Review the design of the Class.",
    "total": "Number of classes",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "AIP/business-criteria/60011"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
