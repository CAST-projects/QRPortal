{
    "id": 1021016,
    "name": "Avoid using MD5 hashes to hash passwords or to encrypt data",
    "href": "AIP/quality-rules/1021016",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "MD5 hashes were used as salt to hash a password or a passphrase. In cryptography, a salt is random data that's used as additional input to a one-way function. Recently, several exploits were developed which proved that MD5 will generate identical outputs for the different input parameters. As a consequence, somebody can break your encryption or log on to your website. This rule is compliant with CISQ OMG ASCSM-CWE-327 recommendation.",
    "output": "Line and column for each violation\nAssociated value => number of violations found",
    "rationale": "The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.",
    "remediation": "Avoid using MD5 hashes as input to cryptographic functions or to store passwords. Python offers the following hashing algorithms: SHA1, SHA224, SHA256, SHA384, and SHA512. Make sure you choose the most appropriate one, depending on your use case, security requirements and runtime constraints.",
    "remediationSample": ">>> import hashlib\n>>> secure_hash = hashlib.sha512()\n>>> secure_hash.update(\"This hash is secure\")\n>>> secure_hash.digest()\n        ",
    "sample": ">>> import hashlib\n>>> md5_hash = hashlib.md5()\n>>> md5_hash.update(\"This hash can be exploited\")\n>>> md5_hash.digest()\n",
    "total": "Python artifacts using hashlib library",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "AIP/technologies/1021000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-327",
            "name": "Broken or Risky Cryptographic Algorithm Usage",
            "reference": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A3-2017",
            "name": "Sensitive Data Exposure",
            "reference": "https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure",
            "description": "Many web applications and APIs do not properly protect sensitive data, such as financial, healthcare, and PII. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data may be compromised without extra protection, such as encryption at rest or in transit, and requires special precautions when exchanged with the browser."
        },
        {
            "standard": "OWASP",
            "id": "A6-2013",
            "name": "Sensitive Data Exposure",
            "reference": "https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure",
            "description": "Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser."
        }
    ]
}
