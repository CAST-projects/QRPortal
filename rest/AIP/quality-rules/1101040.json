{
    "id": 1101040,
    "name": "Avoid empty catch blocks (SQL)",
    "href": "AIP/quality-rules/1101040",
    "critical": true,
    "associatedValueName": "Number of violation occurrences",
    "description": "In a TRY..CATCH statement, CATCH blocks should have code to handle the thrown exception. If they are empty or only contain comments, the Exception will not be handled.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "An empty catch block defeats the purpose of exceptions.\nWhen an exception occurs, nothing happens and the program fails for an unknown reason. The application can be in an unknown state that will affect subsequent processing.\nSince the reason for the issue (the exception type and potential embedded message) are ignored, it will require more time to fix the issue.",
    "reference": "An insider's guide to writing robust, understandable, maintainable, state-of-the-art ABAP programs - Part 3\nAndreas Blumenthal - Horst Keller \n\nhttp://www.javapractices.com/Topic16.cjp\nhttp://cwe.mitre.org/data/definitions/391.html",
    "remediation": "The exception must be handled correctly according to its type.",
    "remediationSample": "Microsoft SQL Server:\nBEGIN TRY  \n-- Generate divide-by-zero error. \n    SELECT 1/0 \nEND TRY \nBEGIN CATCH  \n-- Compliant\n SELECT ERROR_NUMBER() AS ErrorNumber, ERROR_MESSAGE() AS ErrorMessage;\nEND CATCH; \n\nMySQL and MariaDB:\nDECLARE CONTINUE HANDLER FOR SQLWARNING \n# Compliant\nBEGIN \n# not an empty block\nSET done = TRUE;\nEND;\n\nPostgreSQL:\nBEGIN\n    INSERT INTO db(a,b) VALUES (key, data);\n        RETURN;\n    EXCEPTION WHEN unique_violation THEN\n    RAISE NOTICE 'caught unique_violation ';\n    RETURN;\nEND;\n\nOracle:\nDECLARE\n    pe_ratio NUMBER(3,1);\n    BEGIN\n        BEGIN  ---------- sub-block begins\n            SELECT 1 / NVL(null, 0) INTO pe_ratio FROM dual;\n        EXCEPTION\n          WHEN ZERO_DIVIDE THEN\n            -- Compliant\n            pe_ratio := 0;\n        END;  ---------- sub-block ends\n    EXCEPTION\n        WHEN OTHERS THEN\n            NULL;\n            -- Compliant\n            pe_ratio := Null;\n    END;",
    "sample": "Microsoft SQL Server:\nBEGIN TRY  \n-- Generate divide-by-zero error. \n    SELECT 1/0 \nEND TRY \nBEGIN CATCH  \n-- Non-compliant\nEND CATCH;\n\nMySQL and MariaDB:\nDECLARE CONTINUE HANDLER FOR SQLWARNING \n# Non-compliant \nBEGIN \n# empty block\nEND;\n\nPostgreSQL:\nBEGIN\n    INSERT INTO db(a,b) VALUES (key, data);\n        RETURN;\n    EXCEPTION WHEN unique_violation THEN\n    -- Do nothing, and loop to try the UPDATE again.\n    NULL;\nEND;\n\nOracle:\nDECLARE\n    pe_ratio NUMBER(3,1);\n    BEGIN\n        BEGIN  ---------- sub-block begins\n            SELECT 1 / NVL(null, 0) INTO pe_ratio FROM dual;\n        EXCEPTION\n          WHEN ZERO_DIVIDE THEN\n            -- Compliant\n            pe_ratio := 0;\n        END;  ---------- sub-block ends\n    EXCEPTION\n        WHEN OTHERS THEN\n            -- Non-Compliant\n            NULL;\n    END;",
    "total": "Number of Artifacts with SQL code.",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1101000,
            "name": "SQLAnalyzer",
            "href": "AIP/technologies/1101000"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-1",
            "name": "Empty Exception Block",
            "url": null,
            "description": "Objective\nAvoid improper responses to unusual and unexpected situations\n\nConsequence\nSoftware without consistent and complete handling of errors and exceptions makes it impossible to accurately identify and adequately respond to unusual and unexpected situations.\n\nMeasure Element\nNumber of instances where an exception handling block (such as Catch and Finally blocks) of the named callable and method control elements does not contain any other control element\n\n"
        },
        {
            "standard": "CWE",
            "id": "CWE-390",
            "name": "Detection of Error Condition Without Action",
            "url": "https://cwe.mitre.org/data/definitions/390.html",
            "description": "The software detects a specific error, but takes no actions to handle the error."
        },
        {
            "standard": "CWE",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
