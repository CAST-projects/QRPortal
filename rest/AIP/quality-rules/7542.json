{
    "id": 7542,
    "name": "Avoid using FOR ALL ENTRIES IN without emptiness check",
    "href": "AIP/quality-rules/7542",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Number of violation occurrences",
    "description": "This metric retrieves all ABAP artifacts using FOR ALL ENTRIES IN statement without explicitly checking the emptiness of the internal table used in the FOR ALL ENTRIES IN statement.\nThe emptiness checks recognized are the following \nCHECK NOT ts_table[] IS INITIAL.\nIF NOT ts_table[] IS INITIAL.",
    "output": "Associated to each ABAP Artifact with violations, the Quality Rule provides:\n- The number of violation occurrences",
    "rationale": "As the FOR ALL ENTRIES IN is part of the WHERE clause, an empty internal table can end-up in a full table scan and thus cause performance troubles. This is why it is mandatory to include an  emptiness check before any use of the FOR ALL ENTRIES IN statement.",
    "reference": "Enhancing the Quality of ABAP Development, \nMeijs-Krouwels-Heulmans-Sommen, SAP Press\nISBN 1-59229-030-2",
    "remediation": "Use an emptiness check based on one of the following syntax :\nCHECK NOT ts_table[] IS INITIAL.\n or\nIF NOT ts_table[] IS INITIAL.",
    "remediationSample": "* Select orders for specific material and order type\nSELECT matnr auart vbeln posnr\n              FROM vapma\n              INTO TABLE ts_vapma[]\n              WHERE matnr IN so_matnr\n              AND auart IN so_auart.\n\n* Use this result to read the detail data from VBAP: \n* Order Item Data\nIF NOT ts_vapma[] IS INITIAL.\nSELECT matnr vbeln kwmeng vrkme\n              FROM vbap\n              INTO TABLE ts_orders\n              FOR ALL ENTRIES IN ts_vapma[]\n              WHERE vbeln = ts_vapma\n              AND posnr = ts_vapma-posnr.\nENDIF.",
    "sample": "* Select orders for specific material and order type\nSELECT matnr auart vbeln posnr\n              FROM vapma\n              INTO TABLE ts_vapma[]\n              WHERE matnr IN so_matnr\n             AND auart IN so_auart.\n\n* Use this result to read the detail data from VBAP: \n* Order Item Data\nSELECT matnr vbeln kwmeng vrkme\n              FROM vbap\n              INTO TABLE ts_orders\n              FOR ALL ENTRIES IN ts_vapma[]\n              WHERE vbeln = ts_vapma\n              AND posnr = ts_vapma-posnr",
    "total": "Number of ABAP Artifacts containing OpenSQL statements",
    "alternativeName": "Avoid using FOR ALL ENTRIES IN without emptiness check",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "AIP/business-criteria/60014"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061041,
            "name": "CWE-391: Unchecked Error Condition",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61019,
            "name": "Efficiency - SQL and Data Handling Performance",
            "weight": 9,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "AIP/technologies/-15"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": "Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
