{
    "id": 1027058,
    "name": "Avoid blocking async methods (.NET, VB)",
    "href": "AIP/quality-rules/1027058",
    "critical": false,
    "severity": 10,
    "maxWeight": 5,
    "extension": {
        "name": "com.castsoftware.dotnet",
        "href": "AIP/extensions/com.castsoftware.dotnet"
    },
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check the used Task methods in asynchronous methods.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "According to the MSDN documentation:\n\nThe root cause of this deadlock is due to the way await handles contexts. By default, when an incomplete Task is awaited, the current \u201ccontext\u201d is captured and used to resume the method when the Task completes. This \u201ccontext\u201d is the current SynchronizationContext unless it\u2019s null, in which case it\u2019s the current TaskScheduler. GUI and ASP.NET applications have a SynchronizationContext that permits only one chunk of code to run at a time. When the await completes, it attempts to execute the remainder of the async method within the captured context. But that context already has a thread in it, which is (synchronously) waiting for the async method to complete. They\u2019re each waiting for the other, causing a deadlock.",
    "reference": "https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming",
    "remediation": "In an asynchronous method:\n - To retrieve the result of a background task don't use \"Task.Wait, Task.Result\" or \"Task.GetAwaiter.GetResult\"  but use \"await\" \n - To wait for any task to complete don't use \"Task.WaitAny\" but use \"await Task.WhenAny\"\n - To retrieve the results of multiple tasks don't use \"Task.WaitAll\" but use \"await Task.WhenAll\"\n - To wait a period of time don't use \"Thread.Sleep\"  but use \"await Task.Delay\"",
    "remediationSample": "public static class DeadlockDemo\n{\n\u00a0 private static async Task DelayAsync()\n\u00a0 {\n\u00a0\u00a0\u00a0 await Task.Delay(1000);\n\u00a0 }\n\u00a0 // This method causes a deadlock when called in a GUI or ASP.NET context.\n\u00a0 public static void Test()\n\u00a0 {\n\u00a0\u00a0\u00a0 // Start the delay.\n\u00a0\u00a0\u00a0 var delayTask = DelayAsync();\n\u00a0\u00a0\u00a0 // Wait for the delay to complete.\n\u00a0\u00a0\u00a0 await delayTask; // NO VIOLATION\n\u00a0 }\n}",
    "sample": "public static class DeadlockDemo\n{\n\u00a0 private static async Task DelayAsync()\n\u00a0 {\n\u00a0\u00a0\u00a0 await Task.Delay(1000);\n\u00a0 }\n\u00a0 // This method causes a deadlock when called in a GUI or ASP.NET context.\n\u00a0 public static void Test()\n\u00a0 {\n\u00a0\u00a0\u00a0 // Start the delay.\n\u00a0\u00a0\u00a0 var delayTask = DelayAsync();\n\u00a0\u00a0\u00a0 // Wait for the delay to complete.\n\u00a0\u00a0\u00a0 delayTask.Wait(); // VIOLATION\n\u00a0 }\n}",
    "total": "Number of methods",
    "alternativeName": "Ensure not using blocking async methods (.NET)",
    "businessCriteria": [
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 20140522,
            "name": "GreenIT-Index",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062165,
            "name": "ASCRM-RLB-19 - Synchronous Call Time-Out Absence",
            "href": "AIP/technical-criteria/1062165",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061139,
            "name": "CWE-1088 - Synchronous Access of Remote Resource without Timeout",
            "href": "AIP/technical-criteria/1061139",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1061096,
            "name": "CWE-821 - Incorrect Synchronization",
            "href": "AIP/technical-criteria/1061096",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "href": "AIP/technical-criteria/66069",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCRM-RLB-19",
            "name": "Synchronous Call Time-Out Absence",
            "href": "AIP/quality-standards/CISQ/items/ASCRM-RLB-19",
            "standard": "CISQ"
        },
        {
            "id": "CWE-821",
            "name": "Incorrect Synchronization",
            "href": "AIP/quality-standards/CWE/items/CWE-821",
            "standard": "CWE"
        },
        {
            "id": "CWE-1088",
            "name": "Synchronous Access of Remote Resource without Timeout",
            "href": "AIP/quality-standards/CWE/items/CWE-1088",
            "standard": "CWE"
        },
        {
            "id": "CWE-821",
            "name": "Incorrect Synchronization",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-821",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-1088",
            "name": "Synchronous Access of Remote Resource without Timeout",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-1088",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-821",
            "name": "Incorrect Synchronization",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-821",
            "standard": "OMG-ASCQM"
        },
        {
            "id": "CWE-1088",
            "name": "Synchronous Access of Remote Resource without Timeout",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-1088",
            "standard": "OMG-ASCQM"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
