{
    "id": 4656,
    "name": "Avoid declaring throwing an exception and not throwing it",
    "href": "AIP/quality-rules/4656",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Exception Class Full Name",
    "description": "Reports all methods with code (i.e. not interface or abstract method or instance of generic method) that are declared to throw an exception that is never thrown in the method body.\n\nThat is to say all methods:\n- declared to throw an exception in the signature\n- AND \n   o not throwing this exception or subclass directly or via a method declared to throw it\n   o OR that catch this exception \n\nNote that catching an exception is verified independently of where it occurs in the method code.",
    "output": "This report lists all Methods declaring throwing an exception and not throwing it.\nIt provides the following information:\n - Method full name\n - Exception Class Full Name",
    "rationale": "When a method is declared to throw an exception but does not throw any exception:\n- the caller must write extra code to handle this potential exception\n- it makes the code difficult to read\n- the caller will have to write a try/catch block that will affect the performance of the application",
    "reference": "http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html",
    "remediation": "Remove the throw declaration in the signature.",
    "remediationSample": "public void aMethod() {\n   System.println(\"a Method\"); // FIXED\n}",
    "sample": "public void aMethod() throws myException {\n   System.println(\"a Method\"); // VIOLATION\n}",
    "total": "Number of methods declaring throwing an exception in the signature except methods from interface and abstract methods",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "AIP/business-criteria/20140522"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-397",
            "name": "Declaration of Throws for Generic Exception",
            "url": null,
            "description": "Objective\nAvoid failure to use dedicated exception types\n\nConsequence\nSoftware unaware of accurate execution status control incurs the risk of bad data being used in operations, possibly leading to a crash or other unintended behaviors\n\nMeasure Element\nNumber of instances where the named callable control element or method control element throws an exception parameter whose data type is part of a list of overly broad exception data types\n\n"
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
