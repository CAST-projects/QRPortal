{
    "id": 8526,
    "name": "Avoid second order deserialization injection",
    "href": "AIP/quality-rules/8526",
    "critical": true,
    "maxWeight": 9,
    "description": "Using CAST data-flow engine, this quality rule detects execution paths from data stored in database down to deserialization methods, which are open vulnerabilities to injection flaws.\n\nThe list of deserialization methods car be extended thanks to a user configuration (Deserialize.write)",
    "output": "List all methods that make resource calls forged by user input\n\nIt provides the following information:\n - Method full name\n - Call stack from database storage down to the target deserialization method",
    "rationale": "Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.\nThe business impact depends on the protection needs of the application and data.",
    "reference": "CWE-502: Deserialization of Untrusted Data\nhttps://cwe.mitre.org/data/definitions/502.html\n\nOpen Web Application Security Project (OWASP) Top Ten 2017 - Category A8\nhttps://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization",
    "remediation": "Avoid serialising and deserialising objects\nUse signatures to detect tampering\nConfigure your library safely\nAs a last resort, restrict deserialization to be possible only to specific, whitelisted classes.\nCheck out the OWASP Deserialisation Cheat Sheet",
    "remediationSample": "Using readObject\n________________\n\nInputStream is; // is must not depend on a database access\nObjectOutputStream ois = new ObjectOutputStream(is);\nMyClass myclass1 = (MyClass)ois.readObject();\n\n\n\nUsing XMLdecoder\n________________\n\nXMLdecoder d = new XMLdecoder(\n                            new BufferedInputStream(\n                            new FileInputStream(file)));\n\nObject result = d.readObject();\nd.close();\n\n\nUsing Kryo\n________________\n\nString userInput = param;\nKryo kryo = new Kryo();\nOutput output = new Output(new FileOutputStream(\"file.dat\"));\nInput input = new input(new FileInputStream(file));\nObject someObject = \"some string\";\nkryo.writeClassAndObject(output, someObject);\noutput.close();\nObject theObject = kryo.readClassAndObject(input);\ninput.close();",
    "sample": "Using readObject\n________________\n\nInputStream is; // value given by a database access\nObjectOutputStream ois = new ObjectOutputStream(is);\nMyClass myclass1 = (MyClass)ois.readObject(); //Violation\n\n\n\nUsing XMLdecoder\n________________\n\nString userInput; // value given by a database access\nXMLdecoder d = new XMLdecoder(\n                            new BufferedInputStream(\n                            new FileInputStream(userInput)));\n\nObject result = d.readObject(); //Violation\nd.close();\n\n\nUsing Kryo\n________________\n\nString userInput; // value given by a database access\nKryo kryo = new Kryo();\nOutput output = new Output(new FileOutputStream(\"file.dat\"));\nInput input = new input(new FileInputStream(userInput));\nObject someObject = \"some string\";\nkryo.writeClassAndObject(output, someObject);\noutput.close();\nObject theObject = kryo.readClassAndObject(input);  //Violation\ninput.close();",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Avoid second order deserialization injection",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": null,
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": null,
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-502",
            "name": "Deserialization of Untrusted Data",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A8-2017",
            "name": "Insecure Deserialization",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "API8-2019",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
