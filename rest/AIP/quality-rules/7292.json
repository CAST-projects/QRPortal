{
    "id": 7292,
    "name": "Avoid cyclical calls and inheritances between packages",
    "href": "AIP/quality-rules/7292",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Cyclically called / inherited Package full name",
    "description": "This metric reports all packages that have one-on-one and more static circular dependencies.\nDependencies mean:\n - references through static methods call\n - references through class fields\n - references through inheritance\n\nNote that all these links are static link and not runtime.\nThe threshold parameter permit to define the maximal number of packages to cross for a cycle.\n\nNote that cycle notion means here a directed path in a graph that is directed by dependencies relations.",
    "output": "This report lists all packages with static cyclical call to or inheritance with another Java Package.\nIt provides the following information:\n  - Package full name\n  - cyclically called / inherited Package full name",
    "rationale": "When two packages refer to each other through a call, the result is a circular dependency. Neither packages can function without the other, and so neither is reusable without the other. In some cases redesign may eliminate these dependencies.\nWhen circular references are necessary, redesign it to ensure reusability. The same problem happen when some classes from a package A inherit from classes of a package B and other classes from package B inherit from other classes from package A. This rule can be extended to circular dependencies for more than 2 packages (for example a package A call a package B that call a package C, that call package A).",
    "reference": "http://en.wikipedia.org/wiki/Circular_dependency\nhttps://wiki.sei.cmu.edu/confluence/display/java/DCL60-J.+Avoid+cyclic+dependencies+between+packages",
    "remediation": "If there are circular relationships among packages, the partitioning is not clear and should be redesigned. Use CAST Enlighten to see all dependencies to fix.",
    "remediationSample": "package bank;\npublic interface BankApplication {  \n  void depositFunds(BankApplication ba, String username, double amount);\n  double getBalance(String accountNumber);\n  double getUserBalance(String accountNumber);\n  boolean exists(String username);\n}\n \npackage account;\nimport bank.BankApplication;  // Import from a third package\nclass AccountHolder  {\n  private BankApplication ba;\n  public void setBankApplication(BankApplication newBA) {\n    ba = newBA;\n  }\n \n  public synchronized void depositFunds(BankApplication ba,\n      String username, double amount) {\n    // Use a utility method of UserDetails\n    // to check whether username exists\n    if (ba.exists(username)) {\n      // Deposit the amount\n    }\n  }\n  public double getBalance(String accountNumber) {\n    // Return the account balance\n    return 1.0;\n  }  \n}\n \npackage user;\nimport account.AccountHolder; // One-way dependency\nimport bank.BankApplication;  // Import from a third package\npublic class UserDetails extends AccountHolder\n      implements BankApplication {\n  public synchronized double getUserBalance(\n      String accountNumber) {\n    // Use a method of AccountHolder to get the account balance\n    return getBalance(accountNumber);\n  }\n  public boolean exists(String username) {\n    // Check whether user exists\n    return true;\n  }\n}",
    "sample": "package account;\nimport user.User;\npublic class AccountHolder {\n \n  private User user;\n  public void setUser(User newUser) {user = newUser;}\n  \n  synchronized void depositFunds(String username, double amount) {\n    // Use a utility method of User to check whether username exists\n    if (user.exists(username)) {\n      // Deposit the amount\n    }\n  }\n \n  protected double getBalance(String accountNumber) {\n    // Return the account balance\n    return 1.0;\n  }\n}\n \npackage user;\nimport account.AccountHolder;\npublic class UserDetails extends AccountHolder {\n  public synchronized double getUserBalance(String accountNumber) {\n    // Use a method of AccountHolder to get the account balance\n    return getBalance(accountNumber);\n  }\n}\n  \npublic class User {\n    private AccountHolder acc;\n      public boolean exists(String username) {\n          if(username != \"\") {\n              acc = new AccountHolder();\n          }\n        // Check whether user exists\n        return true; // Exists\n      }\n    }",
    "total": "Total number of packages",
    "alternativeName": "Ensure to have packages without cyclical calls and inheritances between packages",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 1062100,
            "name": "CISQ-Index",
            "href": "AIP/business-criteria/1062100"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        },
        {
            "id": 60017,
            "name": "Total Quality Index",
            "href": "AIP/business-criteria/60017"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1062127,
            "name": "ASCMM-MNT-7 - Inter-Module Dependency Cycles",
            "href": "AIP/technical-criteria/1062127",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062159,
            "name": "ASCRM-RLB-13 - Inter-Module Dependency Cycles",
            "href": "AIP/technical-criteria/1062159",
            "weight": 5,
            "critical": false
        },
        {
            "id": 61001,
            "name": "Architecture - Multi-Layers and Data Access",
            "href": "AIP/technical-criteria/61001",
            "weight": 7,
            "critical": false
        },
        {
            "id": 1061110,
            "name": "CWE-1047: Modules with Circular Dependencies",
            "href": "AIP/technical-criteria/1061110",
            "weight": 5,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "id": "ASCMM-MNT-7",
            "name": "Inter-Module Dependency Cycles",
            "href": "AIP/quality-standards/CISQ/items/ASCMM-MNT-7",
            "standard": "CISQ"
        },
        {
            "id": "ASCRM-RLB-13",
            "name": "Inter-Module Dependency Cycles",
            "href": "AIP/quality-standards/CISQ/items/ASCRM-RLB-13",
            "standard": "CISQ"
        },
        {
            "id": "CWE-1047",
            "name": "Modules with Circular Dependencies",
            "href": "AIP/quality-standards/CWE/items/CWE-1047",
            "standard": "CWE"
        },
        {
            "id": "CWE-1047",
            "name": "Modules with Circular Dependencies",
            "href": "AIP/quality-standards/ISO-5055/items/CWE-1047",
            "standard": "ISO-5055"
        },
        {
            "id": "CWE-1047",
            "name": "Modules with Circular Dependencies",
            "href": "AIP/quality-standards/OMG-ASCQM/items/CWE-1047",
            "standard": "OMG-ASCQM"
        }
    ],
    "parameters": [
        {
            "name": "Max_LEVEL",
            "description": null,
            "technologies": [
                {
                    "id": 0,
                    "name": "ALL TECHNOLOGIES",
                    "href": "AIP/technologies/0",
                    "values": [
                        10
                    ]
                }
            ]
        }
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
