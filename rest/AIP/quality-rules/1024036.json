{
    "id": 1024036,
    "name": "Always check all the BiometricPrompt acquired options in the onAuthenticationSucceeded method ",
    "href": "AIP/quality-rules/1024036",
    "critical": true,
    "maxWeight": 7,
    "associatedValueName": "Number of violation occurrences",
    "description": "This rule will check if the BiometricPrompt acquired implements onAuthenticationSucceeded.",
    "output": "Associated to each violation, the following information is provided:\n- The number of violation occurrences\n- Bookmarks for violation occurrences found in the source code",
    "rationale": "Running an application which does not fail of/correctly use the platform capability is a mandatory step from development team. The defining characteristic of risks in this category of rules is that the platform (iOS, Android, Windows Phone, etc.) provides a feature or a capability that is documented and well understood.\n\nAlways check all the BiometricPrompt acquired options to ensure when implementing onAuthenticationSucceeded.",
    "reference": "https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt#constants",
    "remediation": "Ensure all the following status have been checked:\nBIOMETRIC_ACQUIRED_GOOD (The image acquired was good.)\nBIOMETRIC_ACQUIRED_IMAGER_DIRTY (The biometric image was too noisy due to suspected or detected dirt on the sensor.)\nBIOMETRIC_ACQUIRED_INSUFFICIENT (The biometric image was too noisy to process due to a detected condition or a possibly dirty sensor)\nBIOMETRIC_ACQUIRED_PARTIAL (Only a partial biometric image was detected.)\nBIOMETRIC_ACQUIRED_TOO_FAST (The biometric image was incomplete due to quick motion.)\nBIOMETRIC_ACQUIRED_TOO_SLOW (The biometric image was unreadable due to lack of motion.)",
    "remediationSample": "private BiometricPrompt.AuthenticationCallback getAuthenticationCallback() {\n        // Callback for biometric authentication result\n        return new BiometricPrompt.AuthenticationCallback() {\n\n            @Override\n            public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {\n                Log.i(TAG, \"onAuthenticationSucceeded\");\n                super.onAuthenticationSucceeded(result);\n\n                switch(result) {\n                    case BIOMETRIC_ACQUIRED_GOOD:\n                       Log.i(\"The image acquired was good\");\n                       // call the success method\n                       break;\n                    case BIOMETRIC_ACQUIRED_IMAGER_DIRTY:\n                    case BIOMETRIC_ACQUIRED_INSUFFICIENT:\n\n                       Log.i(\"The image acquired was not good, please try again\");\n                       // call again the authentication method\n                       break;\n                    case BIOMETRIC_ACQUIRED_PARTIAL:\n                    case BIOMETRIC_ACQUIRED_TOO_FAST:\n                    case BIOMETRIC_ACQUIRED_TOO_SLOW:\n                       Log.i(\"Technical issue happened, please try again\");\n                       // call again the authentication method\n                       break;\n\n\n                }\n            }\n        };\n    }",
    "sample": "private BiometricPrompt.AuthenticationCallback getAuthenticationCallback() {\n        // Callback for biometric authentication result\n        return new BiometricPrompt.AuthenticationCallback() {\n\n            @Override\n            public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {\n                Log.i(TAG, \"onAuthenticationSucceeded\");\n                super.onAuthenticationSucceeded(result);\n\n                // do not check success status\n            }\n        };\n    }",
    "total": "Number of Android artifacts",
    "alternativeName": "Ensure to check all BiometricPrompt acquired options in the onAuthenticationSucceeded method",
    "businessCriteria": [
        {
            "id": 1061000,
            "name": "ISO-5055-Index",
            "href": "AIP/business-criteria/1061000"
        },
        {
            "id": 1061003,
            "name": "ISO-5055-Reliability",
            "href": "AIP/business-criteria/1061003"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1061041,
            "name": "CWE-391: Unchecked Error Condition",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "ISO-5055",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-11",
            "name": "Error Handling",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/SI-11",
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-391",
            "name": "Unchecked Error Condition",
            "url": "https://cwe.mitre.org/data/definitions/391.html",
            "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
        },
        {
            "standard": "OWASP",
            "id": "M1-2016",
            "name": "Improper Platform Usage",
            "url": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M1-Improper_Platform_Usage",
            "description": "In order for this vulnerability to be exploited, the organization must expose a web service or API call that is consumed by the mobile app. The exposed service or API call is implemented using insecure coding techniques that produce an OWASP Top Ten vulnerability within the server. Through the mobile interface, an adversary is able to feed malicious inputs or unexpected sequences of events to the vulnerable endpoint. Hence, the adversary realizes the original OWASP Top Ten vulnerability on the server."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.2.1",
            "id": "PCI-Requirement-6.5.5",
            "name": "Improper error handling",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70391",
            "name": "The application must not be subject to error handling vulnerabilities.",
            "url": null,
            "description": "Error handling is the failure to check the return values of functions or catch top level exceptions within a program. Improper error handling in an application can lead to an application failure or possibly result in the application entering an insecure state. \n\nThe primary way to detect error handling vulnerabilities is to perform code reviews. If a manual code review cannot be performed, static code analysis tools should be employed in conjunction with tests to help force the error conditions by specifying invalid input (such as fuzzed data and malformed filenames) and by using different accounts to run the application. These tests may give indications of vulnerability, but they are not comprehensive.\n\nIn order to minimize error handling errors, ensure proper return code and exception handling is implemented throughout the application."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
