{
    "id": 3616,
    "name": "Data Access must be based on Stored Procedure Calls",
    "href": "AIP/quality-rules/3616",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Accessed SQL object",
    "description": "Data Access must be based on Stored Procedure Calls.",
    "output": "This report lists all Dynamic SQL\nIt provides the following information: Object full name",
    "rationale": "By using Stored Procedures the database engine is more able to optimize the access plan and to reuse them. It also limits the parsing phase of the SQL order. This generally results in better performance.\nFrom a security point of view, it is generally safer to use SP that do not use dynamic SQL rather than dynamic SQL, as this limits the risk of SQL-injection.",
    "remediation": "Transform the SQL into a SP and use parameters. Then call the SP.\nDo not transform the SQL in a SP that in turn uses dynamic SQL (e.g. @exec or EXECUTE_IMMEDIATE) as this deny all the benefits of the change.",
    "remediationSample": "class MyClass\n{\n   public void fct( String sVal )\n   {\n      exec \"MySP +sVal\"\n   }",
    "sample": "class MyClass\n{\n   private String s = \"select col1from MyTable where col2 =\";\n   public void fct( String sVal )\n   {\n      s +=  \"'\" + sVal + \"'\"; \n      exec s;\n   }",
    "total": "Total number of artifacts accessing the database",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "AIP/business-criteria/66032"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "AIP/business-criteria/60013"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61001,
            "name": "Architecture - Multi-Layers and Data Access",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "AIP/technologies/141901"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-12",
            "name": "Named Callable and Method Control Element with Layer-skipping Call",
            "url": null,
            "description": "Objective\nAvoid breaches of layered architecture principles due to layer-skipping references\n\nConsequence\nSoftware that does not follow the principles of layered architectures (such as strict partitioning and strict call hierarchy) decreases comprehensibility as well as simplicity to evolve the code\n\nMeasure Element\nNumber of instances where a named callable or method control element from a higher horizontal layer directly calls a named callable or method control element in a lower horizontal layer that is not adjacent to the upper layer making the call, as defined in a model of the application\u2019s architectural layers (this excludes the vertical utility layers that can be referenced from any horizontal layer)\n\n"
        },
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-10",
            "name": "Non-SQL Named Callable and Method Control Element with Excessive Number of Data Resource Access",
            "url": null,
            "description": "Objective\nDetection of occurrences of this pattern helps decrease software resource waste by the existence of software elements requiring too many data access outside of the data manager.\n\nConsequence\nSoftware that does not leverage database capabilities to efficiently run data processing (such as stored procedures and functions) requires excessive computational resources\n\n"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
