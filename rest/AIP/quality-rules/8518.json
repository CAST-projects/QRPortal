{
    "id": 8518,
    "name": "Avoid regular expression injection",
    "href": "AIP/quality-rules/8518",
    "critical": true,
    "severity": 30,
    "maxWeight": 9,
    "extension": {
        "name": "com.castsoftware.securityanalyzer",
        "href": "AIP/extensions/com.castsoftware.securityanalyzer"
    },
    "associatedValueName": "Call stack from user input source down to the target method",
    "description": "This metric uses CAST data-flow engine to detect a call path where input data from the user is sent to a Regular expression without prior validation and sanitization.",
    "output": "List all methods that make resource calls forged by user input\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target method.",
    "rationale": "The software constructs all or part of a Regular expression via user-controllable inputs. These inputs are not neutralized or are incorrectly neutralized. As a consequence, a user may create a Denial Of Service attack.",
    "reference": "Regular expression Denial of Service - ReDoS\nhttps://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\nCWE-400: Uncontrolled Resource Consumption\nhttps://cwe.mitre.org/data/definitions/400.html\n\nWeaknesses in the 2019 CWE Top 25 Most Dangerous Software Errors\nhttps://cwe.mitre.org/data/definitions/1200.html",
    "remediation": "Use authorized sanitization methods, limit the computation time of the Regular expression.",
    "remediationSample": "public bool ValidateInputVulnerable()\n{\n    string startDate = textBoxStartDate.Text;\n    string endDate = textBoxEndDate.Text;\n    string dateFormat = textBoxDateFormat.Text;\n    Regex format = new Regex(dateFormat);\n\n    if (string.IsNullOrWhiteSpace(startDate) || string.IsNullOrWhiteSpace(endDate) || string.IsNullOrWhiteSpace(dateFormat))\n    {\n        return false;\n    }\n    \n    // White list\n    List<string> allowedDateFormats = new List<string>\n    {\n        \"dd-MM-yyyy\",\n        \"MM/dd/yyyy\",\n        // Add other formats here\n    };\n    \n    if (!allowedDateFormats.Contains(dateFormat))\n    {\n        return false;\n    }\n    \n    Regex regex = new Regex($\"^{Regex.Escape(dateFormat)}$\");\n    if (regex.IsMatch(startDate) && regex.IsMatch(endDate))\n    {\n        return true;\n    }\n    \n    return false;\n}",
    "sample": "public bool ValidateInputVulnerable()\n{\n    string startDate = textBoxStartDate.Text;\n    string endDate = textBoxEndDate.Text;\n    string dateFormat = textBoxDateFormat.Text;\n    Regex format = new Regex(dateFormat);\n    if (format.IsMatch(startDate) && format.IsMatch(endDate))\n        return true;\n    else\n        return false;\n}",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Ensure you don't have unsanitized regular expressions",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 1066500,
            "name": "CWE-400 - Uncontrolled Resource Consumption",
            "href": "AIP/technical-criteria/1066500",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062301,
            "name": "OWASP-2013-A1 - Injection",
            "href": "AIP/technical-criteria/1062301",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062321,
            "name": "OWASP-2017-A1 - Injection",
            "href": "AIP/technical-criteria/1062321",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1062343,
            "name": "OWASP-2021-A03 - Injection",
            "href": "AIP/technical-criteria/1062343",
            "weight": 5,
            "critical": false
        },
        {
            "id": 1063114,
            "name": "PCI-Requirement-6.5.1 - Injection flaws, particularly SQL injection",
            "href": "AIP/technical-criteria/1063114",
            "weight": 5,
            "critical": false
        },
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "href": "AIP/technical-criteria/66062",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "id": "CWE-400",
            "name": "Uncontrolled Resource Consumption",
            "href": "AIP/quality-standards/CWE/items/CWE-400",
            "standard": "CWE"
        },
        {
            "id": "NIST-SC-5",
            "name": "Denial-of-service Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SC-5",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53/items/NIST-SI-10",
            "standard": "NIST-SP-800-53"
        },
        {
            "id": "NIST-SC-5",
            "name": "Denial-of-service Protection",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SC-5",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "href": "AIP/quality-standards/NIST-SP-800-53R4/items/NIST-SI-10",
            "standard": "NIST-SP-800-53R4"
        },
        {
            "id": "A1-2013",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2013",
            "standard": "OWASP"
        },
        {
            "id": "A1-2017",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A1-2017",
            "standard": "OWASP"
        },
        {
            "id": "A03-2021",
            "name": "Injection",
            "href": "AIP/quality-standards/OWASP/items/A03-2021",
            "standard": "OWASP"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.1"
        },
        {
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection",
            "href": "AIP/quality-standards/PCI-DSS-V3.2.1/items/PCI-Requirement-6.5.1",
            "standard": "PCI-DSS-V3.2.1"
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
