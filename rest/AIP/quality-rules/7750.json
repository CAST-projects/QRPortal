{
    "id": 7750,
    "name": "Avoid XPath injection vulnerabilities",
    "href": "AIP/quality-rules/7750",
    "critical": true,
    "associatedValueName": "Call stack from user input source down to the target XPath execution method",
    "description": "The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.\n\nUsing CAST data-flow engine, this metric detects execution paths from user input methods down to file creation methods, paths which are open vulnerabilities to operating system injection flaws.",
    "output": "List all methods that miss calling the required input validation calls\n\nIt provides the following information:\n - Method full name\n - Call stack from user input source down to the target XPath execution method.",
    "rationale": "The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",
    "reference": "CWE-91: XML Injection (aka Blind XPath Injection)\nhttps://cwe.mitre.org/data/definitions/91.html\n\nOpen Web Application Security Project (OWASP) \nhttps://www.owasp.org/index.php/Top_10-2017_A1-Injection",
    "remediation": "Use authorized sanitization methods.",
    "remediationSample": "XPath xPath = XPathFactory.newInstance().newXPath();\nInputSource inputXml = new InputSource(xmlFile);\nString username = request.getParameter(\"username\");\nString password = request.getParameter(\"password\");\n//code a validate function for the inputs recieved \"username\" and \"password\"\nString query = \"//users/user[name/text()='\" + username +\n               \"' and pass/text()='\" + password + \"']\" +\n               \"/secret/text()\";\nString result = (String)xPath.evaluate(query, inputXml, XPathConstants.STRING);",
    "sample": "XPath xPath = XPathFactory.newInstance().newXPath();\nInputSource inputXml = new InputSource(xmlFile);\nString username = request.getParameter(\"username\");\nString password = request.getParameter(\"password\");\nString query = \"//users/user[name/text()='\" + username +\n               \"' and pass/text()='\" + password + \"']\" +\n               \"/secret/text()\";\nString result = (String)xPath.evaluate(query, inputXml, XPathConstants.STRING);",
    "total": "Number of potentially vulnerable methods",
    "alternativeName": "Avoid XPath injection vulnerabilities",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "AIP/technologies/138383"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "AIP/technologies/138385"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-91",
            "name": "XML Injection (aka Blind XPath Injection)",
            "url": null,
            "description": null
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-SI-10",
            "name": "Information Input Validation",
            "url": null,
            "description": null
        },
        {
            "standard": "OMG-ASCQM",
            "id": "CWE-91",
            "name": "XML Injection (aka Blind XPath Injection)",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2013",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A1-2017",
            "name": "Injection",
            "url": null,
            "description": null
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.1",
            "name": "Injection flaws, particularly SQL injection. Also consider OS Command Injection, LDAP and XPath injection flaws as well as other injection flaws.",
            "url": null,
            "description": null
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70261",
            "name": "The application must protect from command injection.",
            "url": null,
            "description": null
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        98.0,
        99.0,
        99.5,
        99.99
    ]
}
