{
    "id": 1040012,
    "name": "Ensure that HTTP Session is invalidated during logout",
    "href": "AIP/quality-rules/1040012",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "Logout is composed of 2 steps:\n  1. Invalidate user session : indicate web server that the session is not used anymore.\n  2. Cancel cookie send by the web server to track user session. And also all cookies sent by web application, this, in order to have a global clean state.\nThis rule reports violation when Http session has not been invalidated during the Logout.",
    "rationale": "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",
    "reference": "https://cwe.mitre.org/data/definitions/287.html\nhttps://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
    "remediationSample": "protected void configure(HttpSecurity http) throws Exception {\n      http\n          .logout()\n                 .logoutUrl(\"/my/logout\")\n                 .logoutSuccessUrl(\"/my/index\")\n                 .logoutSuccessHandler(logoutSuccessHandler)\n                 .invalidateHttpSession(true) // InvalidateHttpSession is set to TRUE\n                 ...\n                 .and()\n             ...\n}",
    "sample": "protected void configure(HttpSecurity http) throws Exception {\n      http\n          .logout()\n                     .logoutUrl(\"/my/logout\")\n                     .logoutSuccessUrl(\"/my/index\")\n                     .logoutSuccessHandler(logoutSuccessHandler)\n                     .invalidateHttpSession(false) // InvalidateHttpSession is set to FALSE\n                     ...\n                     .and()\n             ...\n}\n----------------\nprotected void configure(HttpSecurity http) throws Exception {\n      http\n          .logout()\n                     .logoutUrl(\"/my/logout\")\n                     .logoutSuccessUrl(\"/my/index\")\n                     .logoutSuccessHandler(logoutSuccessHandler)\n\n                     ...\n                     // InvalidateHttpSession is missing\n                     .and()\n             ...\n}",
    "total": "Number of Java Methods and Xml tags",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-384",
            "name": "Session Fixation",
            "url": "https://cwe.mitre.org/data/definitions/384.html",
            "description": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions."
        },
        {
            "standard": "NIST-SP-800-53R4",
            "id": "NIST-IA-9",
            "name": "Service Identification and Authentication",
            "url": "https://nvd.nist.gov/800-53/Rev4/control/IA-9",
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A2-2013",
            "name": "Broken Authentication and Session Management",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A2-Broken Authentication and Session Management",
            "description": "Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities."
        },
        {
            "standard": "OWASP",
            "id": "A2-2017",
            "name": "Broken Authentication",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
            "description": "Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users' identities temporarily or permanently."
        },
        {
            "standard": "OWASP",
            "id": "A4-2013",
            "name": "Insecure Direct Object References",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References",
            "description": "A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data."
        },
        {
            "standard": "OWASP",
            "id": "A5-2017",
            "name": "Broken Access Control",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control",
            "description": "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users' accounts, view sensitive files, modify other users' data, change access rights, etc."
        },
        {
            "standard": "PCI-DSS-V3.1",
            "id": "PCI-Requirement-6.5.10",
            "name": "Broken authentication and session management",
            "url": null,
            "description": "Note: Requirement 6.5.10 is a best practice until June 30, 2015, after which it becomes a requirement."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69241",
            "name": "The application must clear temporary storage and cookies when the session is terminated.",
            "url": null,
            "description": "Persistent cookies are a primary means by which a web application will store application state and user information.  Since HTTP is a stateless protocol, this persistence allows the web application developer to provide a robust and customizable user experience.\n\nHowever, if a web application stores user authentication information within a persistent cookie or other temporary storage mechanism, this information can be stolen and used to compromise the users account.\n\nLikewise, HTML 5 provides the developer with a client storage capability where application data larger than the 4K cookie size limit can be stored on the local client.  While this can be beneficial to the developer, this is considered insecure storage and should not be used for storing sensitive session or security tokens.  A cross site scripting attack can put this data at risk.\n\nWeb applications must clear sensitive data from files and storage areas on the client when the session is terminated."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70207",
            "name": "The application must destroy the session ID value and/or cookie on logoff or browser close.",
            "url": null,
            "description": "Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession cookies contain application session information that can be used to impersonate the web application user or hijack their application session. Once the user's session has terminated, these session IDs must be destroyed and not reused."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
