{
    "id": 1040012,
    "name": "Ensure that HTTP Session is invalidated during logout",
    "href": "AIP/quality-rules/1040012",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "Logout is composed of 2 steps:\n  1. Invalidate user session : indicate web server that the session is not used anymore.\n  2. Cancel cookie send by the web server to track user session. And also all cookies sent by web application, this, in order to have a global clean state.\nThis rule reports violation when Http session has not been invalidated during the Logout.",
    "rationale": "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",
    "reference": "https://cwe.mitre.org/data/definitions/287.html\nhttps://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication",
    "remediationSample": "protected void configure(HttpSecurity http) throws Exception {\n      http\n          .logout()\n                 .logoutUrl(\"/my/logout\")\n                 .logoutSuccessUrl(\"/my/index\")\n                 .logoutSuccessHandler(logoutSuccessHandler)\n                 .invalidateHttpSession(true) // InvalidateHttpSession is set to TRUE\n                 ...\n                 .and()\n             ...\n}",
    "sample": "protected void configure(HttpSecurity http) throws Exception {\n      http\n          .logout()\n                     .logoutUrl(\"/my/logout\")\n                     .logoutSuccessUrl(\"/my/index\")\n                     .logoutSuccessHandler(logoutSuccessHandler)\n                     .invalidateHttpSession(false) // InvalidateHttpSession is set to FALSE\n                     ...\n                     .and()\n             ...\n}\n----------------\nprotected void configure(HttpSecurity http) throws Exception {\n      http\n          .logout()\n                     .logoutUrl(\"/my/logout\")\n                     .logoutSuccessUrl(\"/my/index\")\n                     .logoutSuccessHandler(logoutSuccessHandler)\n\n                     ...\n                     // InvalidateHttpSession is missing\n                     .and()\n             ...\n}",
    "total": "Number of Java Methods and Xml tags",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-287",
            "name": "Improper Authentication",
            "url": "https://cwe.mitre.org/data/definitions/287.html",
            "description": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct."
        },
        {
            "standard": "OWASP",
            "id": "A4-2013",
            "name": "Insecure Direct Object References",
            "url": "https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References",
            "description": "A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data."
        },
        {
            "standard": "OWASP",
            "id": "A5-2017",
            "name": "Broken Access Control",
            "url": "https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control",
            "description": "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users' accounts, view sensitive files, modify other users' data, change access rights, etc."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69241",
            "name": "The application must clear temporary storage and cookies when the session is terminated.",
            "url": null,
            "description": "Persistent cookies are a primary means by which a web application will store application state and user information.  Since HTTP is a stateless protocol, this persistence allows the web application developer to provide a robust and customizable user experience.\n\nHowever, if a web application stores user authentication information within a persistent cookie or other temporary storage mechanism, this information can be stolen and used to compromise the users account.\n\nLikewise, HTML 5 provides the developer with a client storage capability where application data larger than the 4K cookie size limit can be stored on the local client.  While this can be beneficial to the developer, this is considered insecure storage and should not be used for storing sensitive session or security tokens.  A cross site scripting attack can put this data at risk.\n\nWeb applications must clear sensitive data from files and storage areas on the client when the session is terminated."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69243",
            "name": "The application must automatically terminate the non-privileged user session and log off non-privileged users after a 15 minute idle time period has elapsed.",
            "url": null,
            "description": "Leaving a user\u2019s application session established for an indefinite period of time increases the risk of session hijacking.\n\nSession termination terminates an individual user's logical application session after 15 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69245",
            "name": "The application must automatically terminate the admin user session and log off admin users after a 10 minute idle time period is exceeded.",
            "url": null,
            "description": "Leaving an admin user's application session established for an indefinite period of time increases the risk of session hijacking.\n\nSession termination terminates an individual user's logical application session after 10 minutes of application inactivity at which time the user must re-authenticate and a new session must be established if the user desires to continue work in the application."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-69247",
            "name": "Applications requiring user access authentication must provide a logoff capability for user initiated communication session.",
            "url": null,
            "description": "If a user cannot explicitly end an application session, the session may remain open and be exploited by an attacker.  Applications providing user access must provide the ability for users to manually terminate their sessions and log off."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70187",
            "name": "The application must terminate all network connections associated with a communications session at the end of the session.",
            "url": null,
            "description": "Networked applications routinely open connections to and from other systems as part of their design and function.  When connections are opened by the application, system resources are consumed.  Terminating the network connection at the end of the application session frees up these resources for later use and aids in maintaining system stability. \n\nTerminating network connections associated with communications sessions includes, for example, de-allocating associated TCP/IP address/port pairs at the operating system level, or de-allocating networking assignments at the application level if multiple application sessions are using a single, operating system level network connection. \n\nThis does not mean that the application terminates all sessions or network access; it only ends the inactive session and releases the resources associated with that session.\n\nMany applications rely on the underlying OS to control the network connection aspect of the application which is perfectly acceptable.\n\nAdditionally, application specific operational issues may occasionally be encountered which dictate exceptions be granted to this requirement in order to ensure continuity of operations and application availability.\n\nWhen the aforementioned type of situation occurs, the root cause of the issue as well as the mitigations implemented in order to prevent a loss of availability must be documented.   Common mitigation procedures include but are not limited to stopping and restarting application or system services in order to manually release system resources."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70207",
            "name": "The application must destroy the session ID value and/or cookie on logoff or browser close.",
            "url": null,
            "description": "Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework.\n\nSession cookies contain application session information that can be used to impersonate the web application user or hijack their application session. Once the user's session has terminated, these session IDs must be destroyed and not reused."
        },
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70211",
            "name": "Applications must validate session identifiers.",
            "url": null,
            "description": "Many web development frameworks such as PHP, .NET, and ASP include their own mechanisms for session management. Whenever possible it is recommended to utilize the provided session management framework."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
