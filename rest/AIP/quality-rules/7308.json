{
    "id": 7308,
    "name": "Avoid using Inner Classes",
    "href": "AIP/quality-rules/7308",
    "critical": false,
    "maxWeight": 1,
    "associatedValueName": "Inner class accessed",
    "description": "This Quality Rule retrieves all methods that use inner classes except if the class is a static one.",
    "output": "This report lists all methods using Inner Classes. It provides the following information:\n - Method full name\n - Inner class accessed",
    "rationale": "Java bytecode has no concept of inner classes, so the compiler translates inner classes into ordinary classes that can be accessed by any code in the same package. An inner class can access the fields of the enclosing outer class even if these fields are declared private and the inner class is translated into a separate class. To allow this separate class to access the fields of the outer class, the compiler silently changes these fields' scope from private to package. As a result, when inner classes are declared, they are exposed but the compiler also silently overrules the decision to make some fields private.",
    "reference": "Gary McGraw & Ed Felten, http://www.securingjava.com/preface.html",
    "remediation": "Make the inner class a standard class.",
    "remediationSample": "public class MyInner {\n}\n\npublic class MyOuter {\n\n private MyInner inner;\n \n public MyInner saveInner(MyInner in) {\n  inner = in;\n  return in;\n }\n}\n\npublic class AClass extends MyOuter {\n MyOuter outer;\n \n   public MyInner saveInner(MyInner in) {\n    return outer.saveInner(in);\n   }\n}",
    "sample": "package org.test;\n\npublic class MyOuter {\n\n \n public class MyInner {\n }\n private MyInner inner;\n \n public MyInner saveInner(MyInner in) {\n  inner = in;\n  return in;\n }\n}\n\n\npublic class AClass extends MyOuter{\n MyOuter outer;\n \n   public MyInner saveInner(MyInner in) { /* VIOLATION: reference to the inner class MyInner */\n    return outer.saveInner(in);\n   }\n}",
    "total": "Number of Java artifacts",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "AIP/business-criteria/60012"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "AIP/business-criteria/66031"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "AIP/business-criteria/60016"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
            "weight": 1,
            "critical": false
        },
        {
            "id": 66066,
            "name": "Secure Coding - Encapsulation",
            "weight": 1,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "AIP/technologies/140029"
        }
    ],
    "qualityStandards": [
        {
            "standard": "STIG-V4R8",
            "id": "STIG-V-70385",
            "name": "The application development team must follow a set of coding standards.",
            "url": null,
            "description": "Coding standards are guidelines established by the development team or individual developers that recommend programming style, practices and methods.  The coding standards employed will vary based upon the programming language that is being used to develop the application and the development team.\n\nCoding standards often cover the use of white space characters, variable naming conventions, function naming conventions, and comment styles.  Implementing coding standards provides many benefits to the development process.  These benefits include code readability, coding consistency among both individual and teams of developers as well as ease of code integration.  \n\nThe following are examples of what will typically be in a coding standards document.  This list is an example of what one can expect to find in typical coding standard documents and is not a comprehensive list:\n\n- Indent style conventions\n- Naming conventions\n- Line length conventions\n- Comment conventions\n- Programming best practices\n- Programming style conventions\n\nCoding standards allow developers to quickly adapt to code which has been developed by various members of a development team.  Coding standards are useful in the code review process as well as in situations where a team member leaves and duties must then be assigned to another team member.  \n\nCode conforming to a standard format is easier to read, especially if someone other than the original developer is examining the code.  In addition, formatted code can be debugged and corrected faster than unformatted code.\n\nIntroducing coding standards can help increase the consistency, reliability, and security of the application by ensuring common programming structures and tasks are handled by similar methods, as well as, reducing the occurrence of common logic errors."
        }
    ],
    "parameters": [
        
    ],
    "thresholds": [
        50.0,
        90.0,
        95.0,
        99.0
    ]
}
