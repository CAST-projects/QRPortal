{
    "id": "PCI-DSS4-Requirement-6.2.4",
    "name": "Software engineering techniques or other methods are defined and in use by software development personnel to prevent or mitigate common software attacks and related vulnerabilities in bespoke and custom software",
    "href": "AIP/quality-standards/PCI-DSS4/items/PCI-DSS4-Requirement-6.2.4",
    "url": "https://listings.pcisecuritystandards.org/documents/PCI-DSS-v4_0-FR.pdf",
    "description": "Purpose\nDetecting or preventing common errors that result in vulnerable code as early as possible in the software development process lowers the probability that such errors make it through to production and lead to a compromise. Having formal engineering techniques and tools embedded in the development process will catch these errors early. This philosophy is sometimes called \u201cshifting security left.\u201d\n\nGood Practice\nFor both bespoke and custom software, the entity must ensure that code is developed focusing on the prevention or mitigation of common software attacks, including:\n\u2022 Attempts to exploit common coding vulnerabilities (bugs).\n\u2022 Attempts to exploit software design flaws.\n\u2022 Attempts to exploit implementation/configuration flaws.\n\u2022 Enumeration attacks \u2013 automated attacks that are actively exploited in payments and abuse identification, authentication, or authorization mechanisms. See the PCI Perspectives blog article \u201cBeware of Account Testing Attacks.\u201d\nResearching and documenting software engineering techniques or other methods helps to define how software developers prevent or mitigate various software attacks by features or countermeasures they build into software. This might include identification/authentication mechanisms, access control, input validation routines, etc. Developers should be familiar with different types of vulnerabilities and potential attacks and use measures to avoid potential attack vectors when developing code. \nExamples\nTechniques include automated processes and practices that scan code early in the development cycle when code is checked in to confirm the vulnerabilities are not present.",
    "isoPatterns": null,
    "count": 601,
    "qualityRules": {
        "name": "Quality Rules in numeric ID order",
        "href": "AIP/quality-standards/PCI-DSS4/items/PCI-DSS4-Requirement-6.2.4/quality-rules"
    },
    "qualityTemplates": {
        "name": "Quality Templates in numeric ID order",
        "href": "AIP/quality-standards/PCI-DSS4/items/PCI-DSS4-Requirement-6.2.4/quality-templates"
    }
}
