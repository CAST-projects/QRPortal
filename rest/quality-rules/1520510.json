{
    "id": 1520510,
    "type": "quality-rule",
    "name": "SiebelScriptingReview: Explicit Object Release",
    "href": "quality-rules/1520510.json",
    "critical": false,
    "maxWeight": 4,
    "associatedValueName": "Number of variable declarations / Number of variable destructions",
    "description": "Unless object variables are explicitly destroyed, the amount of time they remain in memory may be longer than necessary.  This may in turn lead to performance issues and unexpected application errors or crashes.  This issue becomes more critical with Siebel 7 WebClient and Portal implementations accessing the application via the Siebel Object Manager, which shares memory among a number of user connections.\nObjects should be destroyed from the bottom up; in a Siebel context this means that Pick BusComps and MVG BusComps must be destroyed first, followed by Business Components and then finally Business Objects. If objects are not destroyed in this order, memory leaks are likely to occur.",
    "output": "This rule reports Functions having objects which are not explicitly released from memory after use, or are not released in the correct order",
    "rationale": "Several script functions were found containing objects which are not explicitly released from memory after use, or are not released in the correct order.",
    "remediation": "It is a good coding practice to release objects explicitly when they are no longer needed rather than rely on the interpreter to clean up. \nIn Siebel eScript, objects can be released by setting their value to null, as in:\nbcAccount = null;\nIn Siebel VB, objects can be released by setting their value to null, as in:\nSet bcAccount = nothing;\nPlease note that objects must be destroyed in the reverse order of their creation, otherwise references to the already destroyed object can be lost.\nAs a general practice, the objects should be destroyed in the finally{} section of the exception handling mechanism. The 'finally' section is always executed, even if there are several return() statements in the try{} section.\nWhen terminating function execution using Exit Function all new object instances have to be released first.",
    "total": "Number of added or modified eScripts",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": 1520000,
            "name": "Siebel",
            "href": "technologies/1520000.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
