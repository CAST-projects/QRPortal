{
    "id": 7956,
    "type": "quality-rule",
    "name": "Avoid indirect exception handling inside loops",
    "href": "quality-rules/7956.json",
    "critical": false,
    "maxWeight": 3,
    "associatedValueName": "Associated Value",
    "description": "Reports all methods which contain a try/catch block and are called within a loop (for, while, do while) at a depth level less than <depth level>.\n\n<depth level> is a parameter that can be changed at will.",
    "output": "This reports all methods having a loop in which there is a call to a method that contains try/catch blocks.\nIt provides the following information:\n Method full name that has the loop, the call path from the method that contains the loop to the method that does the try/catch\n\nNote that:\n1/ The call path may contain different paths while only one is an error. For example:\nvoid myException(){\n     try{  throw exception(); }\n     catch(exception e){}\n}\n\nvoid g() {myException();}\n\nvoid  f() {\n       while (myCondition) { g ();}\n        g();\n        } \n\nwill report both path to g() while only one is a violation, the one that is called in the loop.\n\n2/ Several paths for the same method violating the rule are identified in the Metric Detail page by a sequence ID (in the Value column), this ID is dynamically set during each snapshot and the same path can have a different sequence ID in different snapshots.",
    "rationale": "Exception handling tends to be relatively costly, given the work in unwinding the stack, trying various exception handlers, and so on. You should avoid placing try/catch blocks within a method that is called in a loop as it can add up when performed many times inside a loop.",
    "reference": "http://www.precisejava.com/javaperf/j2se/Exceptions.htm",
    "remediation": "If possible, put the loop inside the try/catch block.",
    "remediationSample": "public class ExceptionTest {\n     static final int N = 18000000;\n\n     public void myException(void) throws Throwable {\n         Throwable exc = new Throwable();\n         throw exc;\n    }\n}\n\npublic class LoopTest {\n     static final int N = 18000000;\n     private ExceptionTest et = new ExceptionTest();\n \n     public void myLoop(void) {\n         try {                                               \n             for (int i = 1; i <= N; i++) {\n                  et.myException(); // FIXED\n             }\n        } catch (Throwable e) { }\n    }\n}",
    "sample": "public class ExceptionTest {\n    static final int N = 18000000;\n\n    public void myException(void) {\n         Throwable exc = new Throwable();\n         try {                                               \n             throw exc;\n         } catch (Throwable e) { }\n    }\n}\n\npublic class LoopTest {\n    static final int N = 18000000;\n    private ExceptionTest et = new ExceptionTest();\n \n    public void myLoop(void) {\n       for (int i = 1; i <= N; i++) {\n            et.myException(); // VIOLATION\n       }\n    }\n}",
    "total": "Number of methods that contain at least one loop",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops"
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "technologies/140029.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
