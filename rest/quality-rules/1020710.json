{
    "id": 1020710,
    "type": "quality-rule",
    "name": "Ensure the X-XSS-Protection header is enabled",
    "href": "quality-rules/1020710.json",
    "critical": true,
    "description": "An attacker can use XSS to send a malicious script to an unsuspecting user. The end user\u2019s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page. This rule is compliant with CISQ OMG ASCSM-CWE-079 recommendation and OWASP 2013 and 2017 A5 - Security Misconfiguration.",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "In Node.js, enable X-XSS-Protection to enable the Cross-site scripting (XSS) filter in most recent web browsers.",
    "reference": "https://expressjs.com/en/advanced/best-practice-security.html \nhttps://www.owasp.org/index.php/XSS",
    "remediation": "Ensure you have enabled the X-XSS-Protection in your express instance or use third-party helmet package",
    "remediationSample": "var express = require('express'); \nvar app = express(); \n\nvar xssFilter = require('x-xss-protection') \napp.use(xssFilter()) \n\n// or with helmet \n\nvar helmet = require('helmet'); \napp.use(helmet()) \n\napp.listen(3000); ",
    "sample": "var express = require('express'); \nvar app = express(); \n\napp.listen(3000);",
    "total": "Number of javascript source codes using express",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 9,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "technologies/1020000.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-79",
            "name": "Cross-site Scripting Improper Input Neutralization",
            "reference": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A3-2013",
            "name": "Cross-Site Scripting (XSS)",
            "reference": "https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victims' browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        },
        {
            "standard": "OWASP",
            "id": "A5-2013",
            "name": "Security Misconfiguration",
            "reference": "https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration",
            "description": "Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date."
        },
        {
            "standard": "OWASP",
            "id": "A5-2017",
            "name": "Broken Access Control",
            "reference": "https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control",
            "description": "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users' accounts, view sensitive files, modify other users' data, change access rights, etc."
        },
        {
            "standard": "OWASP",
            "id": "A7-2017",
            "name": "Cross-Site Scripting (XSS)",
            "reference": "https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application includes untrusted data in a new web page without proper validation or escaping, or updates an existing web page with user-supplied data using a browser API that can create HTML or JavaScript. XSS allows attackers to execute scripts in the victim's browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        }
    ]
}
