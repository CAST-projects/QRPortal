{
    "id": 7640,
    "type": "quality-rule",
    "name": "Avoid catch blocks with assertion",
    "href": "quality-rules/7640.json",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Associated Value",
    "description": "Reports all catch blocks that refer to the assert instruction.",
    "output": "This report lists all Methods that refer to the assert instruction.It provides the following information: Method full name",
    "rationale": "Assertion in a catch block has no meaning. It is often related poor conception because:\n- assertions are not enabled in production environments, so the application will end-up with an empty catch-block\n- assertions do not give any meaning to the issue\n\nAlso, in a catch block it is too late to refer to an assertion.",
    "remediation": "The exception must be handled correctly according to its type.",
    "remediationSample": "try {\n   Date defaultDate=format.parse(DEFAULT_DATE_STRING);\n...\n} catch( ParseException pexc ) {\n  // This must never happen!\n     throw myException(\"bad init value\", pexc); // FIXED\n}",
    "sample": "try {\n   Date defaultDate=format.parse(DEFAULT_DATE_STRING);\n...\n} catch( ParseException pexc ) {\n  // This must never happen!\n  assert false : \"bad init value\"; // VIOLATION\n}",
    "total": "Methods and constructors that have code (not abstracts or from interfaces) containing a catch block.",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "technologies/140029.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
