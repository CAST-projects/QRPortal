{
    "id": 2564,
    "type": "quality-rule",
    "name": "Use a single Error Handling Method",
    "href": "quality-rules/2564.json",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Associated Value",
    "description": "Functions should use an Error Handling Method.",
    "output": "This report lists all Functions that do not use an Error Handling Method (to be defined).",
    "rationale": "There are three ways of registering an error handler:\n  # On Error GoTo <label>\n  # On Error Resume Next\n  # On Error GoTo 0\n\nUsing the 'On Error GoTo <label>' statement directs execution to re-start at the specified <label> in the event of an error. Error handling code is normally placed at the end of a procedure to aid source code readability. If so, you must ensure that execution does not accidentally 'fall through' into your error handler code.\n\nUsing the 'On Error Resume Next' statement directs execution to re-start at the statement after the statement which 'generated' the error. If the error occurred in a nested procedure with no active error handler then the 'next' statement will actually be that of the active error handler and not the statement following the statement which generated the error.\n\nThe 'On Error GoTo 0' statement removes any active error handler for the current procedure thereby directing errors back up the call stack to the last registered error handler (now the active error handler).\n\nAdopting the rule of a single error trap per procedure generally keeps both error handling and application logic simple and readable. Always end the error handler with a 'Resume', 'Resume Next', 'Resume <label>', 'Exit Sub/Function/Property', 'End Sub/Function/Property' or 'Err.Raise' statement.",
    "reference": "http://www.dotnetjohn.com/articles.aspx?articleid=42",
    "remediation": "Choose one method and stick to it.",
    "total": "Total number of functions",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling"
        }
    ],
    "technologies": [
        {
            "id": -9,
            "name": "Visual Basic",
            "href": "technologies/-9.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
