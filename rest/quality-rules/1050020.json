{
    "id": 1050020,
    "type": "quality-rule",
    "name": "Avoid return statement in @finally block",
    "href": "quality-rules/1050020.json",
    "critical": true,
    "description": "Reports all methods that contain an abrupt in a finally block. An abrupt completion of a statement or block occurs when it throws an exception, executes a break or continues to an enclosing statement, or executes a return from the method. This rule is compliant with CISQ OMG ASCMM-MNT-01 recommendation.",
    "output": "Reports all methods that contain an abrupt exit in a finally block. An abrupt exit of a statement or block occurs when it throws an exception, executes a break or continues to an enclosing statement, or executes a return from the method.\n\nIt provides the following information:\n Method full name",
    "rationale": "Care must be taken if completion of a try-catch block occurs as a result of executing a return. If a finally block also returns a value, then that return supersedes any previous return in the try-catch block. Also, if an exception was thrown in the try or catch blocks that was not caught, then execution of a return in the finally block prevents the exception from being thrown to the caller (because it is not possible for the caller to simultaneously evaluate the return and catch the exception). This is also valid for break or continue instructions.",
    "reference": "OWASP\nhttp://www.owasp.org/index.php/Return_Inside_Finally_Block\n\nCWE\nhttp://cwe.mitre.org/data/definitions/584.html",
    "sample": "@try { \n    NSException *e = [NSException exceptionWithName:@\"FileNotFoundException\" reason:@\"File Not Found on System\" userInfo:nil]; \n    @throw e; \n} \n@catch(NSException *e) { \n    @throw; // rethrows e implicitly \n} \n@finally { \n    NSLog(@\"finally\"); \n    // VIOLATION: the NSException e will never be delivered to the caller. The finally block will cause the exception to be discarded. \n    return; \n}",
    "total": "Number of Objective-C methods",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61014,
            "name": "Programming Practices - Error and Exception Handling"
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCMM-MNT-1",
            "name": "Control Flow Transfer Control Element outside Switch Block",
            "reference": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "reference": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ]
}
