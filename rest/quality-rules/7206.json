{
    "id": 7206,
    "type": "quality-rule",
    "name": "Avoid the use of InstanceOf inside loops",
    "href": "quality-rules/7206.json",
    "critical": false,
    "maxWeight": 4,
    "associatedValueName": "Associated Value",
    "description": "All methods that use InstanceOf inside a loop will be reported.",
    "output": "This report lists all methods with a call to instanceof inside a loop.\nIt provides the following information:\n  Method full name",
    "rationale": "The run-time type checking is a time expensive operation and as such should be avoided within loops.\nIn a more general matter, the use of InstanceOf operator, run-time type checking might indicate a misuse of Object Oriented programming. In deed, it is always recommended to design classes and interfaces so client code do not need to use InstanceOf operator and downcasting. The recommended way is to prefer polymorphism over InstanceOf operator and downcasting.",
    "reference": "Peter Sestoft (sestoft@dina.kvl.dk)\nhttp://www.dina.dk/~sestoft/papers/performance.pdf",
    "remediation": "Prefer polymorphism over 'is' operator and downcasting.\n\nIt is always recommended to design classes and interfaces so client code do not need to use InstanceOf operator and downcasting. The recommended way is to prefer polymorphism over InstanceOf operator and downcasting.",
    "remediationSample": "class BaseExample { ... }\nclass Example1 extends BaseExample { ... }\nclass Examplet2 extends BaseExample { ... }\n\nclass Test {\n  BaseExample[] exList;\n  void method () {\n     for (int i = exList.length-1; i >= 0; i--) {\n       // common method to refactor aMethod1 and aMethod2\n        exList[i]).commonMethod(); // FIXED\n       } \n     }\n  }\n}",
    "sample": "class BaseExample { ... }\nclass Example1 extends BaseExample { ... }\nclass Example2 extends BaseExample { ... }\n\nclass Test {\n  BaseExample[] exList;\n  void method () {\n     for (int i = exList.length-1; i >= 0; i--) {\n        if (exList[i] instanceof Example1) { // VIOLATION\n          ((Example1) exList[i]).aMethod1();\n       } elseif (exList[i] instanceof Example2) { // VIOLATION\n         ((Example2) exList[i]).aMethod2();\n     }\n  }\n}",
    "total": "The total is the total number of methods",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops"
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "technologies/140029.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-8",
            "name": "Control Elements Requiring Significant Resource Element within Control Flow Loop Block",
            "reference": null,
            "description": null
        }
    ]
}
