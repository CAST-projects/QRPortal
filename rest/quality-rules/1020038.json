{
    "id": 1020038,
    "type": "quality-rule",
    "name": "Avoid defining and calling functions inside loops",
    "href": "quality-rules/1020038.json",
    "critical": false,
    "maxWeight": 5,
    "description": "Writing functions within loops tends to result in errors due to the way the function creates a closure around the loop.",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "ASCPEM-PRF-08, ASCMM-MNT-05",
    "reference": "http://eslint.org/docs/rules/no-loop-func",
    "remediationSample": "var a = function() {}; \n\nfor (var i=10; i; i--) { \n    a(); \n} \n\nfor (var i=10; i; i--) { \n    var a = function() {}; // OK, no references to variables in the outer scopes. \n    a(); \n} \n\nfor (let i=10; i; i--) { \n    var a = function() { return i; }; // OK, all references are referring to block scoped variables in the loop. \n    a(); \n} \n\nvar foo = 100; \nfor (let i=10; i; i--) { \n    var a = function() { return foo; }; // OK, all references are referring to never modified variables. \n    a(); \n}",
    "sample": "for (var i=10; i; i--) { \n    (function() { return i; })(); \n} \n\nwhile(i) { \n    var a = function() { return i; }; \n    a(); \n} \n\ndo { \n    function a() { return i; }; \n    a(); \n} while (i); \n\nlet foo = 0; \nfor (let i=10; i; i--) { \n    // Bad, function is referencing block scoped variable in the outer scope. \n    var a = function() { return foo; }; \n    a(); \n}",
    "total": "Number of HTML Contents",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops"
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "technologies/1020000.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
