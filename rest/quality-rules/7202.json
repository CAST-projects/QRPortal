{
    "id": 7202,
    "type": "quality-rule",
    "name": "Check usage of '==' and '!=' on objects",
    "href": "quality-rules/7202.json",
    "critical": true,
    "associatedValueName": "Associated Value",
    "description": "Report use of == and != operators between two objects (not primitive types).",
    "output": "This report lists all methods that use the == or != operators. It provides the following information:\n Method full name",
    "rationale": "It is a source of great confusion to novice programmers that Java has two ways of thinking about the equality of objects. When used with object references, the == operator returns true only if both references are to the same object. The == operator is used to compare values of primitive types or object references, but it does not test for value or semantic equality. This is the same for the '!=' operator.",
    "reference": "Practical Java Programming Language Guide - ISBN 0-201-61646-7, http://javatechniques.com/blog/string-equality-and-interning",
    "remediation": "In the case of a semantic equality replace it with a call to equals method.",
    "remediationSample": "Integer ia;\nInteger ib;\n\nif (ia.equals(ib)) {}  // FIXED\nif (!ia.equals(ib)) {} // FIXED",
    "sample": "int i = 1;\nint j = 2;\nInteger ia;\nInteger ib;\n\nif (i == j) {}     // OK: i and j are primitive types\nif (ia == ib) {} // VIOLATION\nif (ia != ib) {}  // VIOLATION",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "technologies/140029.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
