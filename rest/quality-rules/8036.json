{
    "id": 8036,
    "type": "quality-rule",
    "name": "Avoid improperly written  triangular joins with XXL tables in PL/SQL code",
    "href": "quality-rules/8036.json",
    "critical": false,
    "maxWeight": 4,
    "associatedValueName": "Position of join",
    "description": "List all SQL artifacts having a query that includes  improper triangular join.\n\nA Triangular Join is nothing more than about half of a Cross-Join. The \"shape\" of the Triangular Join depends on the relationship of < or >, <= or >=, or < > between tables.\n\nthe diag should detect:\n- <= or >= or \"Equality\" Triangular Join\n- < or > \"Inequality\" Triangular Join\n- < > \"Not Equal\" Triangular Join \n\n\nThey appear in the SELECT list as correlated subqueries usually with a stand-alone inequality of some sort.\nThey can also appear in WHERE clauses with the same type of standalone inequality.\n\nWith some restraint and the right criteria, Triangular Joins can be used. As a consequence we will only detect statements that include improperly written triangular joins i.e  that include at least one triangular join and nothing else in terms of restrictive criteria ....\n\n.",
    "output": "List all Client-Server Artifacts having at least triangular join. \nDisplay the name of each faulty statement.",
    "rationale": "Improperly written Triangular Joins are worse than even Cursors or While Loops and can bring a CPU and Disk System right to it's knees. their processing algorithm is close to quadratic complexity.\n\nFor very small counts, the number of internal rows spawned are nearly trivial. But, it doesn't take very many rows to spawn nightmarish numbers of internal rows that can bring a server to its knees. \nThere's danger in thinking that just avoiding the loop leads to set based code. Triangular Joins are a form of \"Hidden row by row agonizing row\" that can and will crush performance in the face of even the smallest scalability expectations.",
    "remediation": "restrict the conditions using other critersion",
    "sample": "SELECT x.OrderID, x.Freight, \n        (SELECT SUM(y.Freight) FROM dbo.Orders y\n          WHERE y.OrderID <= x.OrderID) AS RunningTotal,\n        (SELECT COUNT(y.Freight)\n           FROM dbo.Orders y\n          WHERE y.OrderID <= x.OrderID) AS RunningCount\n  FROM dbo.Orders X\n ORDER BY x.OrderID",
    "total": "The total procedure counts the number of Client-Server Artifacts",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": -10,
            "name": "Forms",
            "href": "technologies/-10.json"
        },
        {
            "id": 139287,
            "name": "PL/SQL",
            "href": "technologies/139287.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
