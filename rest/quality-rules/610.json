{
    "id": 610,
    "type": "quality-rule",
    "name": "Avoid circular references between header files",
    "href": "quality-rules/610.json",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "The depth of inclusion",
    "description": "This rule searches for circular references between header files.",
    "output": "Associated to each C++ header file with violations, the Quality Rule provides: \n- the depth of inclusion",
    "rationale": "Circular references between header files can lead to difficulties during the program compilation (or can even prevent the compilation).",
    "remediation": "The best answer to this problem is to reconsider the architecture of the program. Sometimes you can use forward declarations to avoid circular references. Using pointers instead of the class allows this to be achieved more easily.",
    "remediationSample": "// FILE C1.H \n#ifndef C1_H \n#define C1_H \nclass C2;\nclass C1 \n{ \n   public:\n       C1(); \n        C2 * x; \n}; \n#endif \n\n// FILE C2.H \n#ifndef C2_H \n#define C2_H \nclass C1;\nclass C2 \n{ \n   public:\n      C2(); \n      C1 * x; \n}; \n#endif",
    "sample": "// FILE C1.H \n#ifndef C1_H \n#define C1_H \n#include \"C2.h\" \nclass C2;\nclass C1 \n{ \n   public:\n      C1(); \n      C2 x; \n}; \n#endif\n\n\n// FILE C2.H \n#ifndef C2_H \n#define C2_H \n#include \"C1.h\" \nclass C1;\nclass C2 \n{ \n   public:\n       C2(); \n       C1 x; \n}; \n#endif",
    "total": "Number of C++ header files",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "business-criteria/66032.json"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "business-criteria/60012.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61001,
            "name": "Architecture - Multi-Layers and Data Access",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
