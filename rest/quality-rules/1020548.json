{
    "id": 1020548,
    "type": "quality-rule",
    "name": "Avoid disabling withCredentials option for the httpProvider",
    "href": "quality-rules/1020548.json",
    "critical": true,
    "description": "In order to prevent bad security configuration, you have to ensure that deployed application frameworks are secure properly configured. This rule is compliant with CISQ OMG ASCSM-CWE-079 recommendation and OWASP 2013 A3 recommendation.",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "The most interesting capability exposed by both XMLHttpRequest or Fetch and CORS is the ability to make \"credentialed\" requests that are aware of HTTP cookies and HTTP Authentication information. By default, in cross-site XMLHttpRequest or Fetch invocations, browsers will not send credentials. A specific flag has to be set on the XMLHttpRequest object or the Request constructor when it is invoked.",
    "reference": "https://docs.angularjs.org/api/ng/service/$http",
    "remediationSample": "$httpProvider.defaults.withCredentials = true;",
    "sample": "// BAD PRACTICE\n$httpProvider.defaults.withCredentials = false;",
    "total": "Number of angular applications",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66062,
            "name": "Secure Coding - Input Validation",
            "weight": 7,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "technologies/1020000.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-79",
            "name": "Cross-site Scripting Improper Input Neutralization",
            "reference": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "A3-2013",
            "name": "Cross-Site Scripting (XSS)",
            "reference": "https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)",
            "description": "XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victims' browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites."
        }
    ]
}
