{
    "id": 7308,
    "type": "quality-rule",
    "name": "Avoid using Inner Classes",
    "href": "quality-rules/7308.json",
    "critical": false,
    "maxWeight": 1,
    "associatedValueName": "Inner class accessed",
    "description": "This Quality Rule retrieves all methods that use inner classes.",
    "output": "This report lists all methods using Inner Classes. It provides the following information:\n - Method full name\n - Inner class accessed",
    "rationale": "Java bytecode has no concept of inner classes, so the compiler translates inner classes into ordinary classes that can be accessed by any code in the same package. An inner class can access the fields of the enclosing outer class even if these fields are declared private and the inner class is translated into a separate class. To allow this separate class to access the fields of the outer class, the compiler silently changes these fields' scope from private to package. As a result, when inner classes are declared, they are exposed but the compiler also silently overrules the decision to make some fields private.",
    "reference": "Gary McGraw & Ed Felten, http://www.securingjava.com/preface.html",
    "remediation": "Make the inner class a standard class.",
    "remediationSample": "public class MyInner {\n}\n\npublic class MyOuter {\n\n private MyInner inner;\n \n public MyInner saveInner(MyInner in) {\n  inner = in;\n  return in;\n }\n}\n\npublic class AClass extends MyOuter {\n MyOuter outer;\n \n   public MyInner saveInner(MyInner in) {\n    return outer.saveInner(in);\n   }\n}",
    "sample": "package org.test;\n\npublic class MyOuter {\n\n \n public class MyInner {\n }\n private MyInner inner;\n \n public MyInner saveInner(MyInner in) {\n  inner = in;\n  return in;\n }\n}\n\n\npublic class AClass extends MyOuter{\n MyOuter outer;\n \n   public MyInner saveInner(MyInner in) { /* VIOLATION: reference to the inner class MyInner */\n    return outer.saveInner(in);\n   }\n}",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "business-criteria/60012.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity"
        },
        {
            "id": 66066,
            "name": "Secure Coding - Encapsulation"
        }
    ],
    "technologies": [
        {
            "id": 140029,
            "name": "JEE",
            "href": "technologies/140029.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
