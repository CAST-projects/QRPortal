{
    "id": 1050018,
    "type": "quality-rule",
    "name": "Never use strcpy() function",
    "href": "quality-rules/1050018.json",
    "critical": true,
    "description": "Strings are a common form of input. Because many string-handling functions have no built-in checks for string length, strings are frequently the source of exploitable buffer overflows. This rule is compliant with CISQ OMG ASCSM-CWE-134, ASCSM-CWE-120, ASCRM-CWE-120 recommendations and with OWASP 2016 M7 recommendation.",
    "output": "Associated to each C/C++/Objective-C function/method with violations, the Quality Rule provides: \n- Number of violation patterns \n- Bookmarks for violation patterns found in the source code: \n  - function call",
    "rationale": "The 'strcpy()' function is a source of buffer overflow vulnerabilities. More secure variants of the function are available and should be used.",
    "reference": "\nISO/IEC. ISO/IEC 9899 Second edition 1999-12-01 Programming languages - C. International Organization for Standardization, 1999. \n\nApple Secure Coding Guide \nhttps://developer.apple.com/library/mac/documentation/Security/Conceptual/SecureCodingGuide/Articles/BufferOverflows.html#//apple_ref/doc/uid/TP40002577-SW1",
    "remediation": "On Linux/Unix/Windows, prefer using the 'strncpy()' function instead. \nOn iOS (FreeBSD), prefer using the 'strlcpy()' function instead",
    "total": "Number of C/C++/Objective-C functions and methods",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-120",
            "name": "Buffer Copy without Checking Size of Input",
            "reference": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-120",
            "name": "Buffer Copy without Checking Size of Input",
            "reference": null,
            "description": null
        },
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-134",
            "name": "Format String Improper Input Neutralization",
            "reference": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M7-2016",
            "name": "Poor Code Quality",
            "reference": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality",
            "description": "Code quality issues are fairly prevalent within most mobile code. The good news is that most code quality issues are fairly benign and result in bad programming practice. It is typically difficult to detect these types of issues through manual code review. Instead, attackers will use third-party tools that perform static analysis or perform fuzzing. These types of tools will typically identify memory leaks, buffer overflows, and other less severe issues that result in bad programming practice. Hackers with extreme low-level knowledge and expertise are able to effectively exploit these types of issues. The typical primary goal is to execute foreign code within the mobile code's address space."
        }
    ]
}
