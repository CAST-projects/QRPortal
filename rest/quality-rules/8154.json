{
    "id": 8154,
    "type": "quality-rule",
    "name": "Avoid using GC.Collect()",
    "href": "quality-rules/8154.json",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Associated Value",
    "description": "This rule list all the artifacts that use GC.Collect().",
    "output": "This report lists all artifacts using GC.Collect(). It provides the following information:   Artifact full name.\n",
    "rationale": ".Net framework use a garbage collector that release the memory at the most appropriate time in order to optimize the memory usage.\nThe GC.Collect() is a very expensive method which should be avoided.",
    "remediation": "Review the Function / Procedure design",
    "sample": "using System; \n\nclass MyGCCollectClass \n{ \n   private const int maxGarbage = 1000; \n\n   static void Main() \n   { \n      // Put some objects in memory. \n      MyGCCollectClass.MakeSomeGarbage(); \n      Console.WriteLine(\"Memory used before collection: {0:N0}\", \n                        GC.GetTotalMemory(false)); \n\n      // Collect all generations of memory. \n      GC.Collect(); \n      Console.WriteLine(\"Memory used after full collection: {0:N0}\", \n                        GC.GetTotalMemory(true)); \n   } \n\n   static void MakeSomeGarbage() \n   { \n      Version vt; \n\n      // Create objects and release them to fill up memory with unused objects. \n      for(int i = 0; i < maxGarbage; i++) { \n         vt = new Version(); \n      } \n   } \n} \n// The output from the example resembles the following: \n// Memory used before collection: 79,392\n// Memory used after full collection: 52,640\n  ",
    "total": "All the artifacts using GC.Collect()",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
