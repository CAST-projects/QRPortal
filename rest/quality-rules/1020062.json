{
    "id": 1020062,
    "type": "quality-rule",
    "name": "Avoid using non thread-safe Javascript singleton pattern",
    "href": "quality-rules/1020062.json",
    "critical": false,
    "maxWeight": 8,
    "description": "Singleton objects should use a thread-safe pattern for creating their shared instance.\n",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "If singleton is invoked in a multi-threaded program, you could end up creating multiple instances of the class which will make the application unstable.",
    "reference": "OMG CISQ",
    "remediation": "Make sure that you have only one instance created in class constructor and it has been frozen to avoid any changes.",
    "remediationSample": "class UserStore { \n  constructor(){ \n   if(! UserStore.instance){ \n     UserStore.instance = this; \n   } \n\n   return UserStore.instance; \n  } \n\n} \n\nconst instance = new UserStore(); \nObject.freeze(instance); \n\nexport default instance;",
    "sample": "class UserStore { \n  constructor(){ \n   if(! UserStore.instance){ \n     UserStore.instance = this; \n   } \n\n   return UserStore.instance; \n  } \n\n// VIOLATION, THIS IS NOT ENOUGH \n} ",
    "total": "Number of Javascript Classes",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66063,
            "name": "Secure Coding - API Abuse"
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "technologies/1020000.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
