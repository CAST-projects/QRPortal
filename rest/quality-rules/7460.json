{
    "id": 7460,
    "type": "quality-rule",
    "name": "Avoid using untyped DataSet",
    "href": "quality-rules/7460.json",
    "critical": true,
    "associatedValueName": "Associated Value",
    "description": "Avoid using Untyped DataSet. This also apply to DataTables and DataRows.",
    "output": "List all objects using an untyped DataSet/DataTable/DataRow (i.e. directly the class DataSet/DataTable/DataRow).\nUsing an untyped dataset can be used within the code of a method, as a parameter of a method, or a data member of the class.",
    "rationale": "A typed DataSet is a class that derives from a DataSet. As such, it inherits all the methods, events, and properties of a DataSet. Additionally, a typed DataSet provides strongly typed methods, events, and properties. This means you can access tables and columns by name, instead of using collection-based methods. Aside from the improved readability of the code, a typed DataSet also allows the Visual Studio .NET code editor to automatically complete lines as you type.\n\nAdditionally, the strongly typed DataSet provides access to values as the correct type at compile time. With a strongly typed DataSet, type mismatch errors are caught when the code is compiled rather than at run time.",
    "reference": "MSDN",
    "remediation": "Use Typed DataSet instead of Untyped DataSet.",
    "remediationSample": "// C# Sample: Using Typed DataSet:\n\n//Create DataAdapter\nSqlDataAdapter daEmp = new SqlDataAdapter( \"SELECT empno,empname,empaddress FROM EMPLOYEE\",conn);\n//Create a DataSet Object\nEmployeeDS dsEmp = new EmployeeDS ();\n//Fill the DataSet\ndaEmp.Fill(dsEmp,\"EMPLOYEE\");\n//Let us print first row and first column of the table\nConsole.Write(dsEmp.EMPLOYEE[0].empno.ToString());\n//Assign a value to the first column\ndsEmp.EMPLOYEE[0].empno = \"12345\";//This will generate compile time error.",
    "sample": "// C# Sample: Using untyped DataSet:\n\n//Create DataAdapter\nSqlDataAdapter daEmp = new sqlDataAdapter( \"SELECT empno,empname,empaddress FROM EMPLOYEE\",conn);\n//Create a DataSet Object\nDataSet dsEmp = new DataSet(); // VIOLATION HERE\n//Fill the DataSet\ndaEmp.Fill(dsEmp,\"EMPLOYEE\");\n//Let us print first row and first column of the table\nConsole.Write(dsEmp.Tables[\"EMPLOYEE\"].Rows[0][0].ToString());\n//Assign a value to the first column\ndsEmp.Tables[\"EMPLOYEE\"].Rows[0][0] = \"12345\";//This will generate runtime error as empno column is integer",
    "total": "Total number of objects using typed or untyped DataSet/DataTable/DataRow.",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "business-criteria/60012.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "business-criteria/60011.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61024,
            "name": "Programming Practices - Structuredness"
        }
    ],
    "technologies": [
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "technologies/141901.json"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
