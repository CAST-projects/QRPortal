{
    "id": 1101958,
    "type": "quality-rule",
    "name": "Avoid artifacts having db.collection.ensureIndex() to create new indexes",
    "href": "quality-rules/1101958.json",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Number of violation patterns",
    "description": "Be careful when using deprecated methods. The deprecation period should be used to smoothly make the transition. The rule raises an issue when using MongoDB collections with ensureIndex.",
    "output": "List all Artifacts with ensureIndex on MongoDB collections.\nThe following information is provided: \n- The number of violation patterns\n- Bookmarks for violation patterns found in the source code",
    "rationale": "UAs the db.collection.ensureIndex() is deprecated since version 3.0.0 and the  db.collection.ensureIndex() is now an alias for db.collection.createIndex() it is recommended to always use db.collection.createIndex() rather than db.collection.ensureIndex() to create new indexes.\nIndeed Using deprecated MongoDB API could lead to security compliancy issues.",
    "remediation": "Use db.collection.createIndex() rather than db.collection.ensureIndex() to create new indexes.",
    "remediationSample": "var client = new MongoClient(\"mongodb://localhost\");\nvar db = client.GetServer().GetDatabase(\"myapp\");\nvar collection = db.GetCollection<User>(\"users\");\n\ncollection.CreateIndex(new IndexKeysBuilder().Ascending(\"EmailAddress\"), IndexOptions.SetBackground(true));",
    "sample": "var server = MongoServer.Create(\"mongodb://localhost\");\nvar db = server.GetDatabase(\"myapp\");\n\nvar users = db.GetCollection<User>(\"users\");\n\nusers.EnsureIndex(new IndexKeysBuilder().Ascending(\"EmailAddress\"));",
    "total": "The total procedure counts MongoDB Collections.",
    "businessCriteria": [
        {
            "id": 66032,
            "name": "Architectural Design",
            "href": "business-criteria/66032.json"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "business-criteria/60012.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61004,
            "name": "Architecture - OS and Platform Independence",
            "weight": 6,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138636,
            "name": "ASP.NET",
            "href": "technologies/138636.json"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
