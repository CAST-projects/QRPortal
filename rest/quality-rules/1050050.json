{
    "id": 1050050,
    "type": "quality-rule",
    "name": "Avoid using cryptography hash without salt",
    "href": "quality-rules/1050050.json",
    "critical": true,
    "description": "When using some cryptography function, an empty salt could compromise system security in a way that cannot be easily remedied. This rule is compliant with OWASP M5 2016 and with CISQ-OMG ASCSM-CWE-327 recommendation.\n",
    "output": "This report lists all uses of CCKeyDerivationPBKDF, CCCalibratePBKDF function call\nIt provides the following information:\nObject full name, number of violations\n",
    "rationale": "This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions.",
    "reference": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M5-Insufficient_Cryptography\nhttps://cwe.mitre.org/data/definitions/759",
    "remediation": "Better to use the values are:\n\n- kCCKeySizeAES128 which is 128 bit AES key size.\n- kCCKeySizeAES192 which is 192 bit AES key size.\n- kCCKeySizeAES256 which is 256 bit AES key size.\n",
    "remediationSample": "CCKeyDerivationPBKDF(kCCPBKDF2,\n                     password,\n                     passwordLen,\n                     \"NeedsASaltHere\",\n                     14,\n                     kCCPRFHmacAlgSHA256,\n                     100000,\n                     derivedKey,\n                     derivedKeyLen);",
    "sample": "CCKeyDerivationPBKDF(kCCPBKDF2,\n                     password,\n                     passwordLen,\n                     \"\",\n                     0,\n                     kCCPRFHmacAlgSHA256,\n                     100000,\n                     derivedKey,\n                     derivedKeyLen);",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCSM-CWE-327",
            "name": "Broken or Risky Cryptographic Algorithm Usage",
            "reference": null,
            "description": null
        },
        {
            "standard": "OWASP",
            "id": "M5-2016",
            "name": "Insufficient Cryptography",
            "reference": "https://www.owasp.org/index.php/Mobile_Top_10_2016-M5-Insufficient_Cryptography",
            "description": "In order to exploit this weakness, an adversary must successfully return encrypted code or sensitive data to its original unencrypted form due to weak encryption algorithms or flaws within the encryption process."
        }
    ]
}
