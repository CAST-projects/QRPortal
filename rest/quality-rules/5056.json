{
    "id": 5056,
    "type": "quality-rule",
    "name": "Avoid using SEARCH without the ALL addition",
    "href": "quality-rules/5056.json",
    "critical": false,
    "maxWeight": 9,
    "associatedValueName": "Associated Value",
    "description": "This rule searches for Cobol programs using the SEARCH statement without the ALL addition, with only one WHEN clause, on internal table defined with more than X lines. X is a parameter and can be changed at will.",
    "output": "This report lists all Cobol Programs that use SEARCH statements without the ALL addition although they contain only one WHEN clause and that the internal table is about more than X lines.\nIt provides the following information:\n- Cobol Program full name\n- Number of violations\n\nIt also provides bookmarks for violation patterns found in source code:\n- SEARCH statement\n- Internal table definition",
    "rationale": "A binary search is a very efficient search when you are dealing with a large table. Note that a binary search will only work if the table is in order by the element you are searching. A binary search looks at the first item in the table. If a match is found, the search is done. If a match is not found, it checks to see if the item you are trying to match is larger or smaller than the middle element. If it is larger, than we know that we only have to look at the half of the table past the middle. If it is smaller, than we know that we only have to look at the half of the table before the middle. Based on this decision, we have eliminate half the table from the search. We next look at the middle item in the half that is left and compare it to the element. This will either find a match or eliminate another quarter of the table. Note that in establishing what the middle is if the number of elements is even, the programmer of a binary search can choose to round or truncate. This process continue until either a match is found or it is clear that the element is not in the table.",
    "reference": "Sort the table data either in Ascending or Descending order and use a SEARCH\n ALL if the search condition is simple.",
    "remediation": "If the data stored in the table come from an external file then be sure that this file is sorted before processing by the program.",
    "remediationSample": "B-200-LOOP.\n    ...\n    ... processing not related to search ...\n    ...\n    SEARCH ALL ENTRIES\n        AT END\n            MOVE ERROR-MSG-TBL TO ITEM-NAME-PR\n        WHEN ITEM-NUMBER-TBL (ITEM-INDX) = ITEM-NUMBER-IN\n            MOVE ITEM-NAME-TBL (ITEM-INDX) TO ITEM-NAME-PR\n    ...\n    ... processing not related to search...\n    ...",
    "sample": "B-200-LOOP.\n    ...\n    ... processing not related to search ...\n    ...\n    SET ITEM-INDX TO 1.\n    SEARCH ENTRIES\n        AT END\n            MOVE ERROR-MSG-TBL TO ITEM-NAME-PR\n        WHEN ITEM-NUMBER-TBL (ITEM-INDX) = ITEM-NUMBER-IN\n            MOVE ITEM-NAME-TBL (ITEM-INDX) TO ITEM-NAME-PR\n    ...\n    ... processing not related to search...\n    ...",
    "total": "Number of Cobol Programs",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61019,
            "name": "Efficiency - SQL and Data Handling Performance"
        }
    ],
    "technologies": [
        {
            "id": -4,
            "name": "Cobol",
            "href": "technologies/-4.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
