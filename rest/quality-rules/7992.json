{
    "id": 7992,
    "type": "quality-rule",
    "name": "Avoid using getpass() function",
    "href": "quality-rules/7992.json",
    "critical": false,
    "maxWeight": 6,
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for C/C++ functions, methods, constructors, and destructors that call the 'getpass()' function.",
    "output": "Associated to each C/C++ function/method/constructor/destructor with violations, the Quality Rule provides:\n- Number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - 'getpass()' function call",
    "rationale": "Some versions of the 'getpass()' function can lead to buffer overflow situations, depending on the implementation. As a consequence, it is important to use this function carefully.",
    "reference": "Build Security In (https://buildsecurityin.us-cert.gov/bsi/articles/knowledge/coding)",
    "remediation": "Check the technical documentation part related to the implementation of the function. You can also use the 'readpassphrase()' fucntionif available.",
    "remediationSample": "void foo()\n{\n  char password[20];\n  if ( !readpassphrase(\"Password:\", password, 20, 0) )\n  {\n    /* Manage error */\n  }\n  ...\n}",
    "sample": "void foo()\n{\n  char *password = getpass(\"Password:\");\n  ...\n}",
    "total": "Number of C/C++ functions, constructors, destructors, and methods",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        },
        {
            "id": -2,
            "name": "C",
            "href": "technologies/-2.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
