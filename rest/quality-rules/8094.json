{
    "id": 8094,
    "type": "quality-rule",
    "name": "Avoid locking of Objects with weak identities",
    "href": "quality-rules/8094.json",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Associated Value",
    "description": "The quality rule searches all the methods or functions having threads that try to lock objects with weak identity.",
    "output": "This report lists all the methods having threads that try to lock objects with weak identity.\nIt provides following information:\n-  Method name or Function name",
    "rationale": "Applications, having threads that try to acquire a lock, on an object that has a weak identity, can have reliability issues. This is because the thread can be blocked by a second thread in a different application domain that has a lock on the same object. An object is said to have a weak identity when it can be directly accessed across application domain boundaries. The following types have a weak identity and are flagged by the rule:\n* MarshalByRefObject \n* ExecutionEngineException \n* OutOfMemoryException \n* StackOverflowException \n* String \n* MemberInfo \n* ParameterInfo \n* Thread",
    "reference": "http://msdn.microsoft.com/en-us/library/ms182290.aspx",
    "remediation": "Try and avoid using weak identities.",
    "sample": "using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Threading;\n\nnamespace ReliabilityLibrary\n{\n   class WeakIdentities\n   {\n      void LockOnWeakId1()\n      { \n         lock(typeof(WeakIdentities)) {}\n      }\n\n      void LockOnWeakId2() \n      {\n         MemoryStream stream = new MemoryStream();\n         lock(stream) {} \n      }\n}",
    "total": "Number of Methods and Functions",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66065,
            "name": "Secure Coding - Time and State",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
