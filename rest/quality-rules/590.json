{
    "id": 590,
    "type": "quality-rule",
    "name": "Avoid using global objects in Constructors and Destructors",
    "href": "quality-rules/590.json",
    "critical": false,
    "maxWeight": 5,
    "associatedValueName": "Global object used",
    "description": "This rule searches for C++ constructors and destructors using global objects. Note that constructors and destructors using global variables defined in the same compilation are not considered as violating the rule.",
    "output": "Associated to each C++ destructor and destructor with violations, the Quality Rule provides:\n- The global object used\n- Bookmarks for violation patterns found in source code:\n  - global object used",
    "rationale": "It is not recommended to use global objects in constructors or destructors because it is not possible to know in which order the global objects are instantiated or deleted through different C++ compilation units. Thus there is a risk when global objects are used in constructors or destructors that the application will crash because a call is made to an object that is not yet in existence or has already been destroyed.",
    "remediation": "Review the object construction/destruction logic to not use global objects at this step.",
    "total": "Number of C++ Constructors and Destructors",
    "businessCriteria": [
        {
            "id": 60012,
            "name": "Changeability",
            "href": "business-criteria/60012.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61020,
            "name": "Programming Practices - Modularity and OO Encapsulation Conformity"
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
