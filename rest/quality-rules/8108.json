{
    "id": 8108,
    "type": "quality-rule",
    "name": "Close the outermost stream ASAP",
    "href": "quality-rules/8108.json",
    "critical": true,
    "associatedValueName": "Associated Value",
    "description": "Reports methods that open a stream in the body and that:\n- doesn't close the outermost stream in a finally block. Note that the number of calls to open a stream and the methods in the finally must be the same.\n- or doesn't annotate this stream with @Cleanup annotation (lombok.Cleanup)\n- or doesn't use the try with resource to declare the stream that must be closed\n\nThe following objects are taken into account:\n- output streams\n- input streams\n- readers\n- writers\n- channel",
    "output": "This report lists all methods that do not close the outermost stream they opened \nIt provides the following information: \n- method full name",
    "rationale": "A frequent issue when dealing with stream is resource leak. This mainly comes from an incorrect code that miss to close the stream in any cases. Incorrect resource management is a common source of failures in production applications, with the usual pitfalls being database connections and file descriptors remaining opened after an exception has occurred somewhere else in the code. This leads to application servers being frequently restarted when resource exhaustion occurs, because operating systems and server applications generally have an upper-bound limit for resources.",
    "reference": "http://it-cisq.org/\nCISQ: ASCSM-CWE-772, ASCRM-CWE-772\nCWE: CWE-772",
    "remediation": "You can:\n- use the try with resource to declare the resource that must be closed (available in java 7)\n- or close the resource in a finally block. \n- or annotate this resource with @Cleanup annotation (lombok.Cleanup)",
    "remediationSample": "with finally\n~~~~~~~~~~~~   \nprivate void correctWriting() throws IOException {\n    DataOutputStream out = null;\n    try {\n        out = new DataOutputStream(new FileOutputStream(\"data\"));\n        out.writeInt(666);\n        out.writeUTF(\"Hello\");\n    } finally {\n        if (out != null) {\n            out.close(); // FIX\n        }\n    }        \n}\n\nwith Java 7\n~~~~~~~~~~~\nprivate void writingWithARM() throws IOException {\n    try (DataOutputStream out \n            = new DataOutputStream(new FileOutputStream(\"data\"))) { // FIX\n        out.writeInt(666);\n        out.writeUTF(\"Hello\");\n    }\n}\n\nwith @Cleanup annotation\n~~~~~~~~~~~~~~~~~~~~~~~~\nprivate void writingWithCleanup() throws IOException {\n    @Cleanup DataOutputStream out = new DataOutputStream(new FileOutputStream(\"data\")); // FIX\n    out.writeInt(666);\n    out.writeUTF(\"Hello\");\n}",
    "sample": "private void incorrectWriting() throws IOException {\n    DataOutputStream out = new DataOutputStream(new FileOutputStream(\"data\"));\n    out.writeInt(666);\n    out.writeUTF(\"Hello\");\n    out.close();\n} // VIOLATION",
    "total": "All the methods that open a stream in the body",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61018,
            "name": "Efficiency - Memory, Network and Disk Space Management",
            "weight": 8,
            "critical": true
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "technologies/140029.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-772",
            "name": "Missing Release of Resource after Effective Lifetime",
            "reference": null,
            "description": null
        }
    ]
}
