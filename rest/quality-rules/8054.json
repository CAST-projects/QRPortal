{
    "id": 8054,
    "type": "quality-rule",
    "name": "Avoid calling blocking functions with an infinite timeout",
    "href": "quality-rules/8054.json",
    "critical": false,
    "maxWeight": 8,
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for C++ methods that call blocking functions with the infinite timeout parameter. Functions that are detected by the rule are:\n- WaitForSingleObject() \n- WaitForMultipleObjects() \n- Sleep()",
    "output": "Associated to each C++ method with violations, the Quality Rule provides:\n- the number of violation patterns\n- Bookmarks for violation patterns found in source code:\n  - blocking function call",
    "rationale": "Calling this type of function with parameters corresponding to infinite timeout can lead to program blocking and/or deadlock. \n\nEven if the logical behavior would be to wait infinitely until some event occurs, it can be good practice to add a timeout to detect a bad situation (such as a probable deadlock).",
    "remediation": "Correct this violation by adding logic that deals with a situation when the mutex is never released.",
    "remediationSample": "void f(HANDLE mutex)\n{\n    int const TIMEOUT = 10000; // Value depends on your application\n    DWORD result = WaitForSingleObject(mutex, TIMEOUT);\n    if (result == WAIT_TIMEOUT)\n    {\n        throw std::runtime_error(\"Cannot access mySharedData. Deadlock?\");\n    }\n    mySharedData = 10;\n    ReleaseMutex(mutex);\n}",
    "sample": "void f(HANDLE mutex)\n{\n    WaitForSingleObject(mutex, INFINITE);\n    mySharedData = 10;\n    ReleaseMutex(mutex);\n}",
    "total": "Number of C++ methods",
    "businessCriteria": [
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66069,
            "name": "Programming Practices - Unexpected Behavior",
            "weight": 8,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": -2,
            "name": "C",
            "href": "technologies/-2.json"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
