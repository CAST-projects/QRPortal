{
    "id": 7212,
    "type": "quality-rule",
    "name": "Avoid instantiations inside loops",
    "href": "quality-rules/7212.json",
    "critical": true,
    "associatedValueName": "Associated Value",
    "description": "Reports all artifacts with loops (for, while, do while)  that contain object instantiations (object creation).\n.NET artifacts include all methods and constructors.\n \nIf the instantiation concerns  one of the following cases listed here below  it will be not considered as a violation.\n* The instantiation is an element of the list created using following methods.\n       - System.Collections.Generic.Dictionary<TKey, TValue>..Add(TKey, TValue)\n       - System.Collections.Generic.List<T>..Add(T)\n       - System.Collections.Generic.Queue<T>.Enqueue\n       - System.Collections.Generic.SortedList<TKey, TValue>.Add\n       - System.Collections.Generic.Stack<T>.Push\n       - System.Collections.ArrayList.Add\n       - System.Collections.Hashtable.Add\n       - System.Collections.Queue.Enqueue\n      - System.Collections.Stack.Push\n      - System.Collections.Concurrent.BlockingCollection<T>.Add(T)\n\n* The instantiation is in the end of a return or throw statement.\n\n The list can be extended with other methods given as parameter of the rule.",
    "rationale": "One of the fundamental OO performance management principles is this: Avoid excessive object creation. This doesn't mean that you should give up the benefits of object-oriented programming by not creating any objects, but you should be wary of object creation inside of tight loops when executing performance-critical code. Object creation is expensive enough that you should avoid unnecessarily creating temporary or intermediate objects in situations where performance is an issue.",
    "reference": "CISQ rule: ASCPEM-PRF-8.",
    "remediationSample": "public class MyLoop {\n     public void printCount() {\n         StringBuilder sb = new StringBuilder(); // FIXED\n         for (int i = 0; i < 100; i++) {\n             sb.Length = 0;\n             sb.Append(\"count = \");\n             sb.Append(i);\n              Console.WriteLine(sb);\n         }\n     }\n }",
    "sample": "public class MyLoop {\n     public void printCount() {\n         for (int i = 0; i < 100; i++) {\n             StringBuilder sb = new StringBuilder(); // VIOLATION\n             sb.Append(\"count = \");\n             sb.Append(i);\n            Console.WriteLine(sb);\n         }\n     }\n }",
    "total": "Total number of methods and constructors",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 66068,
            "name": "Efficiency - Expensive Calls in Loops"
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        },
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "technologies/141901.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCPEM-PRF-8",
            "name": "Control Elements Requiring Significant Resource Element within Control Flow Loop Block",
            "reference": null,
            "description": null
        }
    ]
}
