{
    "id": 1021022,
    "type": "quality-rule",
    "name": "'Initialize ancestors when overriding __init__'",
    "href": "quality-rules/1021022.json",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Single Value",
    "description": "Inheritance in object-oriented programming allows code reuse between hierarchically related classes. In Python by default the subclass inherits all of the methods including the __init__ method which is usually used for instance member initialization. However the subclass can replace any particular implementation that has inherited. To avoid accidental access to uninitialized instance members we strongly suggest you to initialize ancestor classes in the overriden __init__ method or to reconsider refactoring the code so that no inheritance is needed.",
    "output": "Line and column for each violation\nAssociated value => number of violations found",
    "rationale": "Accessing uninitialized variables is a typical source of errors and unexpected behaviour. Overriding the __init__ method of an ancestor class without initializing it can leave unitialized instance members.",
    "remediation": "Initialize ancestors when overriding __init__ using consistently non-super methods or super() if their ancestors do.",
    "remediationSample": ">>> # approach (1)\n>>> class B(A):\n>>>     def __init__(self):\n>>>         super().__init__()        # in Python2: super(B, self).__init__()\n>>>         self.y = 2\n>>>\n>>> # approach (2)\n>>> class B(A):\n>>>     def __init__(self):\n>>>         A.__init__()\n>>>         self.y = 2\n        ",
    "sample": ">>> class A:\n>>>     def __init__(self):\n>>>         self.x = 3\n>>>         self.y = 14\n>>>\n>>> class B(A):\n>>>     def __init__(self):\n>>>         self.y = 2\n",
    "total": "Python artifacts initializing instance members",
    "businessCriteria": [
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60011,
            "name": "Transferability",
            "href": "business-criteria/60011.json"
        }
    ],
    "technicalCriteria": [
        {
            "id": 61003,
            "name": "Programming Practices - OO Inheritance and Polymorphism",
            "weight": 7,
            "critical": false
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "technologies/1021000.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
