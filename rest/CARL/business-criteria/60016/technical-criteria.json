[
    {
        "id": 61001,
        "name": "Architecture - Multi-Layers and Data Access",
        "description": "Respect of multi-tier and multi-layer best practices as well data access and data integrity best practices",
        "href": "CARL/technical-criteria/61001",
        "weight": 8
    },
    {
        "id": 61004,
        "name": "Architecture - OS and Platform Independence",
        "description": "Respect of Operating System level resource usage practices",
        "href": "CARL/technical-criteria/61004",
        "weight": 3
    },
    {
        "id": 61014,
        "name": "Programming Practices - Error and Exception Handling",
        "description": "Respect of error handling practices",
        "href": "CARL/technical-criteria/61014",
        "weight": 10
    },
    {
        "id": 61018,
        "name": "Efficiency - Memory, Network and Disk Space Management",
        "description": "Respect of memory and disk space optimization practices",
        "href": "CARL/technical-criteria/61018",
        "weight": 5
    },
    {
        "id": 66062,
        "name": "Secure Coding - Input Validation",
        "description": "Input validation security breaches result from trusting user input and lack of strong checks/cleanup of the user input.",
        "href": "CARL/technical-criteria/66062",
        "weight": 10
    },
    {
        "id": 66063,
        "name": "Secure Coding - API Abuse",
        "description": "API Abuse security breaches result from misused calls to a programming interface or to a flawed, compromised API.\n\nAn API implements a contract between a caller and a callee. The most common forms of API abuse are caused by the caller failing to honor its end of this contract.",
        "href": "CARL/technical-criteria/66063",
        "weight": 8
    },
    {
        "id": 66064,
        "name": "Secure Coding - Weak Security Features",
        "description": "Weak Security Features security breaches are vulnerabilities that come from wrong or erroneous use of security features such as authentication, access control, confidentiality, cryptography.",
        "href": "CARL/technical-criteria/66064",
        "weight": 8
    },
    {
        "id": 66065,
        "name": "Secure Coding - Time and State",
        "description": "Time and State security breaches result from multithreading misuse and coding practices that ignore the fact that software components are shared and executed within concurrent thread and processes.",
        "href": "CARL/technical-criteria/66065",
        "weight": 4
    },
    {
        "id": 66066,
        "name": "Secure Coding - Encapsulation",
        "description": "Encapsulation security breaches appear whenever the principle of  information hiding are violated and that malicious user can gain access to data which should be kept private.",
        "href": "CARL/technical-criteria/66066",
        "weight": 5
    },
    {
        "id": 66069,
        "name": "Programming Practices - Unexpected Behavior",
        "description": "Respect of structuredness practices",
        "href": "CARL/technical-criteria/66069",
        "weight": 10
    }
]
