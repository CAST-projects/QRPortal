[
    {
        "id": 61001,
        "name": "Architecture - Multi-Layers and Data Access",
        "description": "Respect of multi-tier and multi-layer best practices as well data access and data integrity best practices",
        "href": "AIP/technical-criteria/61001",
        "weight": 8
    },
    {
        "id": 61004,
        "name": "Architecture - OS and Platform Independence",
        "description": "Respect of Operating System level resource usage practices",
        "href": "AIP/technical-criteria/61004",
        "weight": 3
    },
    {
        "id": 61009,
        "name": "Complexity - Algorithmic and Control Structure Complexity",
        "description": "Respect of complexity practices regarding algorithmic complexity control",
        "href": "AIP/technical-criteria/61009",
        "weight": 3
    },
    {
        "id": 61010,
        "name": "Complexity - OO Inheritance and Polymorphism",
        "description": "Respect of complexity practices regarding object-oriented complexity control",
        "href": "AIP/technical-criteria/61010",
        "weight": 3
    },
    {
        "id": 61011,
        "name": "Complexity - SQL Queries",
        "description": "Respect of evolutive coding practices of SQL queries",
        "href": "AIP/technical-criteria/61011",
        "weight": 4
    },
    {
        "id": 61013,
        "name": "Architecture - Object-level Dependencies",
        "description": "Respect of coupling practices at the object level",
        "href": "AIP/technical-criteria/61013",
        "weight": 7
    },
    {
        "id": 61017,
        "name": "Documentation - Naming Convention Conformity",
        "description": "Respect of naming practices",
        "href": "AIP/technical-criteria/61017",
        "weight": 3
    },
    {
        "id": 61020,
        "name": "Programming Practices - Modularity and OO Encapsulation Conformity",
        "description": "Respect of object-oriented encapsulation practices",
        "href": "AIP/technical-criteria/61020",
        "weight": 8
    },
    {
        "id": 61024,
        "name": "Programming Practices - Structuredness",
        "description": "Respect of structuredness practices",
        "href": "AIP/technical-criteria/61024",
        "weight": 7
    },
    {
        "id": 61027,
        "name": "Dead code (static)",
        "description": "Respect of code coverage practices",
        "href": "AIP/technical-criteria/61027",
        "weight": 1
    },
    {
        "id": 61028,
        "name": "Documentation - Volume of Comments",
        "description": "Respect of comment practices regarding comments volume",
        "href": "AIP/technical-criteria/61028",
        "weight": 3
    },
    {
        "id": 61029,
        "name": "Complexity - Dynamic Instantiation",
        "description": "Respect of practices regarding dynamic instantiation",
        "href": "AIP/technical-criteria/61029",
        "weight": 5
    },
    {
        "id": 61031,
        "name": "Complexity - Empty Code",
        "description": "Respect of practices regarding empty code",
        "href": "AIP/technical-criteria/61031",
        "weight": 1
    },
    {
        "id": 61032,
        "name": "Complexity - ERP customization",
        "description": "Measures the customization of an ERP environment which threatens the testability, the stability and the upgrade cost.",
        "href": "AIP/technical-criteria/61032",
        "weight": 7
    },
    {
        "id": 66009,
        "name": "Architecture - Reuse",
        "description": "Respect of code reuse practices",
        "href": "AIP/technical-criteria/66009",
        "weight": 4
    },
    {
        "id": 66070,
        "name": "Architecture - Architecture Models Automated Checks",
        "description": "This metric measures of how compliant is the application with the user defined Architecture Models.\n\nArchictecture Models can be defined using ArchiChecker. And once assigned to an application, the Archictecture Model becomes a CAST AIP quality rule and is automatically computed for each snapshot. An application can be assigned multiple models, so that Architects can check different aspect of application architecture, both the technical ones and the functional ones.",
        "href": "AIP/technical-criteria/66070",
        "weight": 8
    }
]
