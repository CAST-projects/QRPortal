{
    "id": "STIG-V-222567",
    "name": "The application must not be vulnerable to race conditions.",
    "href": "CARL/quality-standards/STIG-V5/items/STIG-V-222567",
    "url": "https://www.stigviewer.com/stig/application_security_and_development/2024-06-05/finding/V-222567",
    "description": "A race condition is a timing event within an application that can become a security vulnerability.  A race condition can occur when a pair of programming calls operating simultaneously do not work in a sequential or coordinated manner.  A race condition is a timing event within software that can become a security vulnerability if the calls are not performed in the correct order.  \n\nThere are different types of race conditions and they are dependent upon the action that the application is undertaking when the race condition occurs.  Some examples of race conditions include but are not limited to:\n\n- Time of check, time of use: the time in which a given resource is checked, and the time that resource is used.\n- Thread based: two threads of execution use a resource simultaneously, resource may be invalid when used.\n- Switch based: variable switches values while switch statement is in progress.\n\nDevelopers must be cognizant of programming sequence and use sanity checks to validate data prior to acting upon it.\n\nA code review or a static code analysis is the method used to identify race conditions.",
    "isoPatterns": null,
    "count": 0,
    "qualityRules": null
}
