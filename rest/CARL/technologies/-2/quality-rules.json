[
    {
        "id": 1050,
        "name": "Static Functions naming conventions - case control",
        "href": "AIP/quality-rules/1050",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C"
        ]
    },
    {
        "id": 1052,
        "name": "Macros naming conventions - case control",
        "href": "AIP/quality-rules/1052",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C"
        ]
    },
    {
        "id": 1054,
        "name": "Types naming conventions - suffix control",
        "href": "AIP/quality-rules/1054",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C"
        ]
    },
    {
        "id": 1058,
        "name": "Avoid large Files - too many Lines of Code",
        "href": "AIP/quality-rules/1058",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1060,
        "name": "Avoid large Macros - too many Lines of Code",
        "href": "AIP/quality-rules/1060",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1066,
        "name": "Avoid implementation files that do not include a header file with the same name",
        "href": "AIP/quality-rules/1066",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1070,
        "name": "Avoid header files circular references",
        "href": "AIP/quality-rules/1070",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C"
        ]
    },
    {
        "id": 1072,
        "name": "Avoid using memory management Functions (free/malloc/realloc)",
        "href": "AIP/quality-rules/1072",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1074,
        "name": "Avoid using signals management Functions",
        "href": "AIP/quality-rules/1074",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1078,
        "name": "Avoid undocumented Header files",
        "href": "AIP/quality-rules/1078",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1082,
        "name": "Avoid header files with a very low comment/code ratio",
        "href": "AIP/quality-rules/1082",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1084,
        "name": "Non static functions naming conventions - case control",
        "href": "AIP/quality-rules/1084",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C"
        ]
    },
    {
        "id": 1090,
        "name": "Ensure the file is truly unnecessary. If not, then remove it from the project to avoid dead code.",
        "href": "AIP/quality-rules/1090",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C"
        ]
    },
    {
        "id": 1092,
        "name": "Avoid undocumented Implementation files",
        "href": "AIP/quality-rules/1092",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1094,
        "name": "Avoid Implementation files with a very low comment/code ratio",
        "href": "AIP/quality-rules/1094",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7296,
        "name": "Never define static variables in header files",
        "href": "AIP/quality-rules/7296",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7766,
        "name": "Ensure you keep simple the design of the component/module to reduce number of independent paths",
        "href": "AIP/quality-rules/7766",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "JavaScript",
            "VB.NET"
        ]
    },
    {
        "id": 7768,
        "name": "Avoid Artifacts with High Depth of Code",
        "href": "AIP/quality-rules/7768",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "JavaScript",
            "VB.NET"
        ]
    },
    {
        "id": 7770,
        "name": "Avoid Artifacts with too many parameters",
        "href": "AIP/quality-rules/7770",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7772,
        "name": "Avoid Artifacts with High Essential Complexity",
        "href": "AIP/quality-rules/7772",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "JavaScript",
            "VB.NET"
        ]
    },
    {
        "id": 7774,
        "name": "Avoid Artifacts with High Integration Complexity",
        "href": "AIP/quality-rules/7774",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "JavaScript",
            "VB.NET"
        ]
    },
    {
        "id": 7776,
        "name": "Avoid Artifacts with High Fan-In",
        "href": "AIP/quality-rules/7776",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "JavaScript",
            "VB.NET"
        ]
    },
    {
        "id": 7778,
        "name": "Ensure you reduce the number of referenced Artifacts",
        "href": "AIP/quality-rules/7778",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "JavaScript",
            "VB.NET"
        ]
    },
    {
        "id": 7784,
        "name": "Avoid Artifacts with lines longer than X characters",
        "href": "AIP/quality-rules/7784",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "JavaScript",
            "VB.NET"
        ]
    },
    {
        "id": 7806,
        "name": "Avoid Artifacts with Group By",
        "href": "AIP/quality-rules/7806",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7808,
        "name": "Avoid Artifacts with SQL statement including subqueries",
        "href": "AIP/quality-rules/7808",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++",
            "JEE"
        ]
    },
    {
        "id": 7810,
        "name": "Avoid Artifacts with a Complex SELECT Clause",
        "href": "AIP/quality-rules/7810",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++",
            "JEE"
        ]
    },
    {
        "id": 7816,
        "name": "Avoid using GOTO statement",
        "href": "AIP/quality-rules/7816",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "VB.NET"
        ]
    },
    {
        "id": 7818,
        "name": "Ensure you have a good level of comments of your Functions",
        "href": "AIP/quality-rules/7818",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "JEE",
            "JavaScript"
        ]
    },
    {
        "id": 7822,
        "name": "Avoid Artifacts with queries on more than 4 Tables",
        "href": "AIP/quality-rules/7822",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++",
            "JEE"
        ]
    },
    {
        "id": 7828,
        "name": "Ensure to write SQL query with a limited number of tables used in the FROM clause",
        "href": "AIP/quality-rules/7828",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++",
            "JEE"
        ]
    },
    {
        "id": 7836,
        "name": "Add comments into functions to explain what is their goal and how they work.",
        "href": "AIP/quality-rules/7836",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++",
            "JEE",
            "JavaScript"
        ]
    },
    {
        "id": 7842,
        "name": "Avoid large Artifacts - too many Lines of Code",
        "href": "AIP/quality-rules/7842",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7846,
        "name": "Ensure your methods are commented enough to provide good understanding to other contributors",
        "href": "AIP/quality-rules/7846",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7860,
        "name": "Ensure all the functions and procedures are used",
        "href": "AIP/quality-rules/7860",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++",
            "JEE",
            "JavaScript"
        ]
    },
    {
        "id": 7912,
        "name": "Ensure all the data members are used",
        "href": "AIP/quality-rules/7912",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++",
            "JEE"
        ]
    },
    {
        "id": 7914,
        "name": "Prefer using stored procedure instead of using direct SQL queries to database",
        "href": "AIP/quality-rules/7914",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 7924,
        "name": "Avoid defining Functions with 'struct' or 'class' parameters passed by value",
        "href": "AIP/quality-rules/7924",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7966,
        "name": "Avoid includes in Header Files",
        "href": "AIP/quality-rules/7966",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7968,
        "name": "Never use strcat() function (C/C++)",
        "href": "AIP/quality-rules/7968",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7970,
        "name": "Never use strcpy() function (C/C++)",
        "href": "AIP/quality-rules/7970",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7972,
        "name": "Never use sprintf() or vsprintf() functions",
        "href": "AIP/quality-rules/7972",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7976,
        "name": "Never use gets() function",
        "href": "AIP/quality-rules/7976",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7978,
        "name": "Avoid using the scanf() function family",
        "href": "AIP/quality-rules/7978",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7980,
        "name": "Avoid using strtrns() function",
        "href": "AIP/quality-rules/7980",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7982,
        "name": "Avoid using strlen() function family",
        "href": "AIP/quality-rules/7982",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7984,
        "name": "Avoid using strecpy() function",
        "href": "AIP/quality-rules/7984",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7986,
        "name": "Avoid using streadd() function",
        "href": "AIP/quality-rules/7986",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7988,
        "name": "DEPRECATED: Avoid using snprintf() function family",
        "href": "AIP/quality-rules/7988",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7990,
        "name": "Avoid using realpath() function",
        "href": "AIP/quality-rules/7990",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7992,
        "name": "Avoid using getpass() function",
        "href": "AIP/quality-rules/7992",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7994,
        "name": "Avoid using getopt() function",
        "href": "AIP/quality-rules/7994",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 7998,
        "name": "Avoid local variables that are not initialized at declaration time",
        "href": "AIP/quality-rules/7998",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8002,
        "name": "Never perform C-style cast between incompatible Class pointers",
        "href": "AIP/quality-rules/8002",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8008,
        "name": "Avoid data members that are never read",
        "href": "AIP/quality-rules/8008",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8028,
        "name": "Ensure you don't forget the default clause in your switch statement",
        "href": "AIP/quality-rules/8028",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 8032,
        "name": "Ensure you don't use break statement in FOR loops",
        "href": "AIP/quality-rules/8032",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C#",
            "C++",
            "HTML5",
            "JEE",
            "VB.NET"
        ]
    },
    {
        "id": 8046,
        "name": "Do not return non-const handles to Class data from const member Functions",
        "href": "AIP/quality-rules/8046",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8048,
        "name": "Invoke 'delete' with the same form as the matching 'new'",
        "href": "AIP/quality-rules/8048",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8050,
        "name": "Do not hide declarations in other scopes",
        "href": "AIP/quality-rules/8050",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8052,
        "name": "Avoid setting a pointer to the address of a local variable defined in a lower scope",
        "href": "AIP/quality-rules/8052",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8054,
        "name": "Avoid calling blocking functions with an infinite timeout",
        "href": "AIP/quality-rules/8054",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8056,
        "name": "Method override fails due to mismatch of const/volatile qualifiers",
        "href": "AIP/quality-rules/8056",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8058,
        "name": "A pointer to a derived Class shall only be cast implicitly to a pointer to base Class",
        "href": "AIP/quality-rules/8058",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8060,
        "name": "A pointer to a base Class shall only be cast to a pointer to a derived Class by means of 'dynamic_cast'",
        "href": "AIP/quality-rules/8060",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8062,
        "name": "An unconditional 'throw', 'return' or 'break' shall terminate every non-empty switch-clause",
        "href": "AIP/quality-rules/8062",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8064,
        "name": "Assignment operator should assign all non-static members of the target object",
        "href": "AIP/quality-rules/8064",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8066,
        "name": "Avoid using 'using namespace' or 'using' declarations in header files",
        "href": "AIP/quality-rules/8066",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8068,
        "name": "Do not return a dereferenced pointer allocated inside the function",
        "href": "AIP/quality-rules/8068",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8070,
        "name": "Do not alter a control variable in the body of a 'for' statement",
        "href": "AIP/quality-rules/8070",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8072,
        "name": "Never define collection of 'std::auto_ptr'",
        "href": "AIP/quality-rules/8072",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8074,
        "name": "Avoid using 'class' or 'struct' parameters with variadic Functions",
        "href": "AIP/quality-rules/8074",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8076,
        "name": "Avoid using 'new[]', prefer 'std::vector' or 'std::array'",
        "href": "AIP/quality-rules/8076",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 8078,
        "name": "Casting from pointer to base Class to pointer to derived Class should be done through 'dynamic_cast' or 'static_cast'",
        "href": "AIP/quality-rules/8078",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065000,
        "name": "Avoid using \"continue\" statement",
        "href": "AIP/quality-rules/1065000",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065002,
        "name": "\"enum\" members other than the first one should not be explicitly initialized unless all members are explicitly initialized.",
        "href": "AIP/quality-rules/1065002",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065004,
        "name": "Ensure that dynamically allocated memory on local pointer in functions/methods is freed.",
        "href": "AIP/quality-rules/1065004",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065008,
        "name": "Avoid use of unvalidated input in array indexing and memory allocation",
        "href": "AIP/quality-rules/1065008",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065012,
        "name": "Avoid using 'setjmp' or 'longjmp' (C/C++)",
        "href": "AIP/quality-rules/1065012",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065014,
        "name": "Avoid using the library functions bsearch and qsort from <stdlib.h> (C/C++)",
        "href": "AIP/quality-rules/1065014",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065016,
        "name": "Prefer using strto*() from core linrary instead of atol, atoll, atoi, atof from stdlib.h for a more robust string handling",
        "href": "AIP/quality-rules/1065016",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065022,
        "name": "Avoid using <stdio.h> (C/C++)",
        "href": "AIP/quality-rules/1065022",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065024,
        "name": "Make sure you do not use <time.h> to avoid unexpected and implementation dependent outcome",
        "href": "AIP/quality-rules/1065024",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065028,
        "name": "Ensure that Switch statements have at least 2 case clauses",
        "href": "AIP/quality-rules/1065028",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065030,
        "name": "All if \u2026 else if constructs shall be terminated with an else clause (C/C++)",
        "href": "AIP/quality-rules/1065030",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065032,
        "name": "Ensure to declare arrays with a defined size",
        "href": "AIP/quality-rules/1065032",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065036,
        "name": "Ensure to not use //, /* within comments",
        "href": "AIP/quality-rules/1065036",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065038,
        "name": "Avoid using 'signal.h' (C/C++)",
        "href": "AIP/quality-rules/1065038",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065042,
        "name": "Ensure to return a proper expression for a non-void function",
        "href": "AIP/quality-rules/1065042",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065044,
        "name": "Ensure that in global space only extern linkages, namespace and main function are present",
        "href": "AIP/quality-rules/1065044",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065050,
        "name": "Ensure to separate a side effect of an expression from the sizeof method",
        "href": "AIP/quality-rules/1065050",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065052,
        "name": "Prefer using Integers rather than Octal Constants",
        "href": "AIP/quality-rules/1065052",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065054,
        "name": "Do not override the standard library functions (C/C++)",
        "href": "AIP/quality-rules/1065054",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065060,
        "name": "Ensure to use an integral value to iterate in loops",
        "href": "AIP/quality-rules/1065060",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065062,
        "name": "Ensure that testing floating point numbers for equality is not used as is source of imprecision",
        "href": "AIP/quality-rules/1065062",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065064,
        "name": "Ensure to split the expressions and assignments into multiple lines for better readability and maintainability.",
        "href": "AIP/quality-rules/1065064",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065066,
        "name": "Avoid having  a method call or additional expressions in a statement using \"++\" or \"--\" operators (C/C++)",
        "href": "AIP/quality-rules/1065066",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065068,
        "name": "Avoid using Digraphs (C++)",
        "href": "AIP/quality-rules/1065068",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065070,
        "name": "Avoid using Trigraphs",
        "href": "AIP/quality-rules/1065070",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065072,
        "name": "Avoid using Unions",
        "href": "AIP/quality-rules/1065072",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065084,
        "name": "Ensure that you do not convert a function pointer to any other type to avoid unexpected behavior",
        "href": "AIP/quality-rules/1065084",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065086,
        "name": "Ensure that pointer types are not cast to integral types",
        "href": "AIP/quality-rules/1065086",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065090,
        "name": "Ensure that you use 'enum' types with  [ ], =, == and !=, the unary & operator, and <, <=, >, >=.",
        "href": "AIP/quality-rules/1065090",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065092,
        "name": "Ensure to have boolean operands with boolean operators",
        "href": "AIP/quality-rules/1065092",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065094,
        "name": "Avoid having expressions with bool type to be used as operands on operators other than =, &&, ||, !, ==, !=, the unary & operator, and the conditional operator",
        "href": "AIP/quality-rules/1065094",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065102,
        "name": "Avoid checking Integer overflow without explicit cast",
        "href": "AIP/quality-rules/1065102",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065104,
        "name": "Converting a multiplication to a larger type should be done before the multiplication takes place",
        "href": "AIP/quality-rules/1065104",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065106,
        "name": "Avoid comparing types of different widths in a loop",
        "href": "AIP/quality-rules/1065106",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065108,
        "name": "Bit-fields shall be either unsigned integral, or enumeration (with underlying type of unsigned integral type).",
        "href": "AIP/quality-rules/1065108",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065110,
        "name": "Ensure arrays and containers are accessed using unsigned values",
        "href": "AIP/quality-rules/1065110",
        "critical": true,
        "severity": 30,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065114,
        "name": "Avoid lines starting with \"#\" with invalid pre-processing directive",
        "href": "AIP/quality-rules/1065114",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065116,
        "name": "Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator",
        "href": "AIP/quality-rules/1065116",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065118,
        "name": "Arguments to a function-like macro shall not contain tokens that look like preprocessing directives.",
        "href": "AIP/quality-rules/1065118",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065120,
        "name": "Avoid using # OR ## operators more than once while defining macros",
        "href": "AIP/quality-rules/1065120",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065122,
        "name": "Prefer defining macros in Global Namespace",
        "href": "AIP/quality-rules/1065122",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065126,
        "name": "Avoid using goto to jump backwards into a statement in the same function(C/C++)",
        "href": "AIP/quality-rules/1065126",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065128,
        "name": "Mke sure you do not have unused labels in your code",
        "href": "AIP/quality-rules/1065128",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065130,
        "name": "Avoid defining, redefining or undefining standard macros from standard library",
        "href": "AIP/quality-rules/1065130",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "C",
            "C++"
        ]
    },
    {
        "id": 1065134,
        "name": "Avoid returning address of local variable",
        "href": "AIP/quality-rules/1065134",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "C",
            "C++"
        ]
    }
]
