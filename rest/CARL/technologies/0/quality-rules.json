[
    {
        "id": 7204,
        "name": "Avoid method invocation in a loop termination expression",
        "href": "AIP/quality-rules/7204",
        "critical": false,
        "severity": 30,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 7388,
        "name": "Avoid artifacts having recursive calls",
        "href": "AIP/quality-rules/7388",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 7424,
        "name": "Avoid using SQL queries inside a loop",
        "href": "AIP/quality-rules/7424",
        "critical": true,
        "severity": 30,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1020950,
        "name": "Avoid providing password in Web Service URL",
        "href": "AIP/quality-rules/1020950",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101000,
        "name": "Prefer using a Join with a consition when making SQL queries so that performance is not adversely impacted due to cartesian/cross join",
        "href": "AIP/quality-rules/1101000",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101002,
        "name": "Prefer using a Join with a consition when making SQL queries on XXL tables so that performance is not adversely impacted due to cartesian/cross join",
        "href": "AIP/quality-rules/1101002",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101004,
        "name": "Ensure to include index in your SQL table so that performance of your app is not adversely impacted",
        "href": "AIP/quality-rules/1101004",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101006,
        "name": "Ensure to include index in your SQL XXL tables so that performance of your app is not adversely impacted",
        "href": "AIP/quality-rules/1101006",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101008,
        "name": "Make sure you use SARGable predicate in WHERE clauses and JOINS to prevent additional costs on CPU",
        "href": "AIP/quality-rules/1101008",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101010,
        "name": "Prefer using INNER JOINS instead of NATURAL JOINS for better performance",
        "href": "AIP/quality-rules/1101010",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101012,
        "name": "While using ORDER BY in queries prefer using Column names instead of indexes for better maintainability and readability of queries in code",
        "href": "AIP/quality-rules/1101012",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101014,
        "name": "Try to separate JOIN and WHERE clauses by following ANSI-Standard joins format to improve maintainability and readabitliy",
        "href": "AIP/quality-rules/1101014",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101026,
        "name": "When inserting data into columns always define column names to prevent mistakes and wrong updates",
        "href": "AIP/quality-rules/1101026",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101028,
        "name": "Always use MINUS or EXCEPT operator instead of NOT EXISTS and NOT IN subqueries for better execution performance",
        "href": "AIP/quality-rules/1101028",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101032,
        "name": "When using EXISTS or NOT EXISTS clauses make sure that you refer to parent object and not  independent clauses to ensure better performance",
        "href": "AIP/quality-rules/1101032",
        "critical": true,
        "severity": 20,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101034,
        "name": "Prefer replacing DISTINCT in your queries with a WHERE, FROM clause that fetches only the required data",
        "href": "AIP/quality-rules/1101034",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101038,
        "name": "To improve the readability of your SQL statements use IN test condition instead of multiple OR conditions on same identifier",
        "href": "AIP/quality-rules/1101038",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101058,
        "name": "Prefer to use a similar syntax for JOIN in same SQL queries and not mix ANSI and non-ANSI syntax",
        "href": "AIP/quality-rules/1101058",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101060,
        "name": "When using LIKE operator make sure the first character in search string is not a wildcard character as it reduces execution performance",
        "href": "AIP/quality-rules/1101060",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101066,
        "name": "Ensure that when using triangular joins you restrict the results with some extra conditions to avoid severe performance issues",
        "href": "AIP/quality-rules/1101066",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101070,
        "name": "Always use 'IS NULL' or 'IS NOT NULL' to check for Nullability instead of using '=' or '!=' operators",
        "href": "AIP/quality-rules/1101070",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101072,
        "name": "Improve the readability and maintainability of your queries by using aliases for tables",
        "href": "AIP/quality-rules/1101072",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101074,
        "name": "Ensure your table aliases do not have numbers to improve readability",
        "href": "AIP/quality-rules/1101074",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101076,
        "name": "Ensure column references in queries are qualified to avoid any ambiguous and undefined references",
        "href": "AIP/quality-rules/1101076",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    },
    {
        "id": 1101102,
        "name": "LIKE conditions should not be used without wildcards characters",
        "href": "AIP/quality-rules/1101102",
        "critical": false,
        "severity": 10,
        "technologyNames": [
            "ALL TECHNOLOGIES"
        ]
    }
]
