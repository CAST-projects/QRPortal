{
    "id": 1002252,
    "type": "quality-rule",
    "name": "Avoid untested Return Code variables after ALLOCATE in Modules (FORTRAN)",
    "href": "quality-rules/1002252.json",
    "description": "The STAT usage in a allocate or deallocate operation are causing the analysis to create specific variables where the return code is stored in. Whenever this variable is not used in any IF construct , the artifact is reported as a violation. The proper order in which this needs to take place is not taken into account; only the artifacts that have no testing of STAT variables are captured by this diagnostic.",
    "rationale": "The variable that contains the STAT return code value must be tested to ensure properly handling of any errors in the ALLOCATE that may have occurred",
    "remediation": "Always use a variable to capture the return code in and test this variable to see if the operation resulted in success or not.",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": 1006000,
            "name": "Fortran",
            "href": "technologies/1006000.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
