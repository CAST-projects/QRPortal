{
    "id": 8192,
    "type": "quality-rule",
    "name": "Avoid any non-static data members not initialized in constructor",
    "href": "quality-rules/8192.json",
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches in C++ all member variables of scalar or pointer type that are not initialized in all the constructors of the class.\n\nInitializations can be performed in the constructor declaration or in the constructor body.\n\nMembers variables that are of a class type are not taken into account",
    "output": "Associated to each field with violations, the Quality Rule provides:\n- The number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - Field not initialized in all C++ class constructors\n  - Constructor if provided",
    "rationale": "All data member from a class must be initialized in each constructor of this class to avoid undefined behavior after successful construction and to simplify the understanding of the code.\n    ",
    "reference": "Effective C++, Item 12\nIndustrial Strength C++ 5.5",
    "remediation": "Initialize scalar-typed members in constructor header.",
    "remediationSample": "// Remediation \nclass C\n{\n  public:\n     C() : m_i(0) { }\n  protected:\n     int m_i;\n}",
    "sample": "class C\n{\n  public:\n     C() {  }; // VIOLATION: m_i is not initialized\n  protected:\n     int m_i;\n}",
    "total": "Number of field",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": 1050571,
            "name": "C/C++",
            "href": "technologies/1050571.json"
        }
    ]
}
