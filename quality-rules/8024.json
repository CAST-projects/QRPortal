{
    "id": 8024,
    "type": "quality-rule",
    "name": "Avoid Classes with a non-empty Destructor and the default assignment operator or copy Constructor",
    "href": "quality-rules/8024.json",
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for classes with a non-empty destructor but which let the compiler generate a default version for the assignment operator (operator=) or a copy constructor. \n\nNote: Empty destructors are not taken into account.",
    "output": "Associated to each C++ class with violations, the Quality Rule provides:\n- The number of violation patterns\n- Bookmarks for violation patterns found in source code:\n  - Non empty destructor",
    "rationale": "If you need a destructor you probably also need a specific operator= and a specific copy constructor. If you need a destructor, it is probably because your are doing some management of resources. Thus it's probable that you will need a copy constructor and override the copy constructor.",
    "reference": "\"C++ Notes: OOP: Copy Constructors\":http://www.fredosaurus.com/notes-cpp/oop-condestructors/copyconstructors.html",
    "remediation": "Prevent default generation of the copy constructor and assignment operator:\n- Provide your own version\n- Or declare it private without implementing it to prevent the operation",
    "total": "Number of C++ classes",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
