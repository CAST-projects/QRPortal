{
    "id": 7998,
    "type": "quality-rule",
    "name": "Avoid local variables that are not initialized at declaration time",
    "href": "quality-rules/7998.json",
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for C++ functions, methods, constructors, and destructors where at least one local variable is not initialized at declaration time. This applies to standard types ('char', 'int', etc) and pointers of any type. This does not apply to: \n- classes (i.e. local declarations like: 'myclass var;') as they have a constructor\n- structs and arrays\n\nVariables that are initialized after their declaration are considered as initialized as long as this is done before any program logic.",
    "output": "Associated to each C++ Function/Method/Constructor/Destructor with violations, the Quality Rule provides:\n- Number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - Uninitialized variable",
    "rationale": "Using a variable that is not initialized can lead to unexpected behavior. Some compilers may detect the use of uninitialized variables in some cases, but none can detect them all. For example the following sample remains undetected: \n\nvoid take_ptr(int * ptr) \n{\n    printf(\"%lx\", *ptr); \n} \n\nvoid main() \n{ \n    int c;\n    take_ptr(&c); \n}",
    "reference": "\"Black Hat Federal 2006 : Attack on uninitialized Variables\":http://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-Flake.pdf",
    "remediation": "See samples and remediation samples.",
    "remediationSample": "// SAMPLE 1: Basic example\nint main()\n{\n int c = 0;\n}\n\n// SAMPLE 3: Initialization in branch\n// Initialization done in conditional branching or in a called method are considered as a violation.\n\nvoid main()\n{\n     int i = 0; // REMEDIATION\n     if (...)\n         i = 3; \n} \n\n// SAMPLE 4: Use in function call\n// Although this usage is safe, we cannot know it in 'g' until we read the body of 'f'. If the implementation of 'f' changes, calling 'g' may become invalid. It is safer to initialize 'i' in 'g':\n\nvoid f( int * p) { *p = 3; }\n\nvoid g() \n{\n      int i = 0; // REMEDIATION\n      f( &i);\n}",
    "sample": "// SAMPLE 1: Basic example\nint main()\n{\n    int c; // VIOLATION\n}\n\n// SAMPLE 2: Non violations\nvoid main()\n{\n     int c;\n     c = 0; // is NOT considered as a violation\n\n     double d = f(); // not a violation\n}\n\n// SAMPLE 3: Initialization in branch\n// Initialization done in conditional branching or in a called method are considered as a violation.\n\nvoid main()\n{\n     int i;\n     if (...)\n         i = 3; // VIOLATION\n}\n\n// SAMPLE 4: Use in function call\n\nvoid f( int * p) { *p = 3; }\n\nvoid g() \n{\n      int i;\n      f( &i); // VIOLATION\n}",
    "total": "Number of C++ Functions, Methods, Constructors, and Destructors",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        },
        {
            "id": -2,
            "name": "C",
            "href": "technologies/-2.json"
        },
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        },
        {
            "id": 1050571,
            "name": "C/C++",
            "href": "technologies/1050571.json"
        }
    ]
}
