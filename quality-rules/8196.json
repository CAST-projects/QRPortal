{
    "id": 8196,
    "type": "quality-rule",
    "name": "Never use 'std::auto_ptr'",
    "href": "quality-rules/8196.json",
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for C++ functions that use 'std::auto_ptr'.",
    "output": "Associated to each C++ constructor, destructor,and method with violations, the Quality Rule provides:\n- The number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - assignment of 'auto_ptr' variables",
    "rationale": "The copy operation of an 'auto_ptr' is destructive (copying A to B changes the state of A)As a result, 'std::auto_ptr' should not be used.",
    "remediation": "Do not use 'auto_ptr'. Instead, use collections of 'std::unique_ptr' if your compiler supports C++11, or of a 'shared_ptr' type, such as 'std::shared_ptr', 'std::tr1::shared_ptr' or 'boost::shared_ptr', depending on what you have available.",
    "remediationSample": "void f()\n{\n    std::vector<std::unique_ptr<Widget>> v;\n}",
    "sample": "void f()\n{\n    std::vector<std::auto_ptr<Widget>> v;\n}",
    "total": "Number of C++ constructors, destructors, and methods",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        },
        {
            "id": 1050571,
            "name": "C/C++",
            "href": "technologies/1050571.json"
        }
    ]
}
