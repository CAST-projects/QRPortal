{
    "id": 8222,
    "type": "quality-rule",
    "name": "CWE-798 : Use of Hard-coded Credentials",
    "href": "quality-rules/8222.json",
    "critical": true,
    "associatedValueName": "Call stack from hardcoded string down to the target method",
    "description": "This Quality Rule uses the CAST AIP dataflow engine to detect a call path where a hardcoded credential is sent to a method used for its own inbound authentication, outbound communication to external components or validate the authentication for retrieval of data. \n\nThe list of credential passing methods can be customized.",
    "output": "Lists all methods that call target methods, passing at least one hardcoded credential parameter. \n\nIt provides the following information : \n - Method full name. \n - Call stack with bookmarks from hardcoded credential literal down to the target method.",
    "rationale": "The software should not have hardcoded credentials (username, password) in the application code or files. \nHard-coded credentials typically create a significant security hole that allows an attacker to bypass the authentication that has been configured by the software administrator. \nThis hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely.",
    "reference": "CWE-798 : Use of Hard-coded Credentials\nhttp://cwe.mitre.org/data/definitions/798.html",
    "remediation": "Potential remediations : \n- Outbound authentication : consider storing passwords and keys outside of the code, in the most strongly-protected, encrypted storage. This storage should be protected from outsiders, even other local users from the same system. \n- Inbound authentication : consider using login authentication with strong passwords or keys instead of hardcoding usernames and passwords. \n- If hardcoded credentials cannot be removed, perform access control checks and limit accessed resources.",
    "sample": "Java example : \n... \nDriverManager.getConnection(url, \"jeff\", \"1234\"); \n... \n\nC# example : \n... \nvar request = WebRequest.CreateHttp(url); \nrequest.Credentials = new NetworkCredential(\"jeff\", \"1234\"); \nvar reader = new StreamReader(request.GetResponse().GetResponseStream()); \n... \n\nThese are examples of external hard-coded credentials on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Accessing this information is possible for employees who have the source code or external attackers using disassembly tools. Malicious users with access to this information could use it to break into the system.",
    "total": "The number of methods containing credential parameter(s).",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "technologies/140029.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CWE",
            "id": "CWE-798",
            "name": "Use of Hard-coded Credentials",
            "reference": "https://cwe.mitre.org/data/definitions/798.html",
            "description": null
        }
    ]
}
