{
    "id": 1021018,
    "type": "quality-rule",
    "name": "Avoid catch-all except blocks with empty handlers",
    "href": "quality-rules/1021018.json",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "This metric reports all methods with at least one cath-all except block with an empty implementation. Working with exceptions is common to Python but sometimes using try/except blocks without doing anything when an exception happened is very dangerous. This rule is compliant with the CISQ OMG ASCRM-RLB-01 recommendation.",
    "output": "Line and column for each violation\nAssociated value => number of violations found",
    "rationale": "Exceptions are a mechanism to interrupt a program for signaling run-time anomalies in the code. In Python the common way for object type checking is to 'try' methods and properties. Thus well-defined exceptions are expected to appear and often the desired reaction is to silently ignore them. \n        A catch-all except clause (one that captures all types of exceptions) when not properly handled ascribes this behaviour to every exception, included the unexpected. This practice should be avoided because it hinders debugging.",
    "remediation": "The exception must be handled correctly according to its type. If no exception type is declared or if a high-level cath-all exception type is used, the body of the exception block should execute specific code or inform if something wrong happened.",
    "remediationSample": ">>> # easy remediation\n>>> try:\n>>>     doSomething()\n>>> except:\n>>>     logging.debug(\"Someting happened\")\n\n>>> # better remediation\n>>> try:\n>>>     doSomething()\n>>> except SomeException as e:\n>>>     logging.debug(\"Something happened:\" + e.error)\n>>> except:\n>>>     logging.debug(\"Something unexpected happened ...\")\n        ",
    "sample": ">>> try:\n>>>     doSomething()\n>>> except:          # no exception type declared\n>>>     pass         # empty handler\n",
    "total": "Python artifacts handling exceptions",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "technologies/1021000.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-RLB-1",
            "name": "Empty Exception Block",
            "reference": null,
            "description": null
        }
    ]
}
