{
    "id": 8150,
    "type": "quality-rule",
    "name": "Avoid using Parse for primitive types and used instead TryParse",
    "href": "quality-rules/8150.json",
    "critical": false,
    "maxWeight": 7,
    "associatedValueName": "Associated Value",
    "description": "This rule list all the artifacts that have Parse method within a try catch block.",
    "output": "This report lists all recursive artifacts. It provides the following information:   artifact full name.\n",
    "rationale": "As the TryParse method doesn't raise any exception for primitive types in case that the parse fails but only returns a boolean value, it is much more convenient to use it as it doesn't require additional management of exception as is the case if a Parse is used.",
    "remediation": "Review the Function / Procedure design",
    "remediationSample": "using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] values = { \"+13230\", \"-0\", \"1,390,146\", \"$190,235,421,127\",\n                          \"0xFA1B\", \"163042\", \"-10\", \"007\", \"2147483647\", \n                          \"2147483648\", \"16e07\", \"134985.0\", \"-12034\",\n                          \"-2147483648\", \"-2147483649\" };\n      foreach (string value in values)\n      {\n           bool result = Int32.TryParse(value, out number);\n         if (result)\n         {\n            Console.WriteLine(\"Converted '{0}' to {1}.\", value, number);         \n         }\n         else\n         {\n\n            Console.WriteLine(\"Attempted conversion of '{0}' failed.\", \n                               value == null ? \"<null>\" : value);\n      }\n   }\n}\n}",
    "sample": "using System;\n\npublic class Example\n{\n   public static void Main()\n   { \n      string[] values = { \"+13230\", \"-0\", \"1,390,146\", \"$190,235,421,127\", \n                          \"0xFA1B\", \"163042\", \"-10\", \"007\", \"2147483647\", \n                          \"2147483648\", \"16e07\", \"134985.0\", \"-12034\", \n                          \"-2147483648\", \"-2147483649\" }; \n      foreach (string value in values) \n      { \n         try { \n            int number = Int32.Parse(value); \n            Console.WriteLine(\"{0} --> {1}\", value, number); \n         } \n         catch (FormatException) { \n            Console.WriteLine(\"{0}: Bad Format\", value); \n         } \n         catch (OverflowException) { \n            Console.WriteLine(\"{0}: Overflow\", value); \n         }\n      }\n   }\n}",
    "total": "The total procedure counts the number artifacts Parse methods within a try catch block",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
