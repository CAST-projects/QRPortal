{
    "id": 1020720,
    "type": "quality-rule",
    "name": "Allow only HTTPS communication",
    "href": "quality-rules/1020720.json",
    "description": "In Node.js, to avoid connection to unsecured source, you have to make sure that all HTTP communication are encrypted. This rule is compliant with OWASP 2013 and 2017 A5 - Security Misconfiguration",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "Ensure the developer will work with a list of trusted source. Thanks to Strict-Transport-Security header you will enforces secure (HTTP over SSL/TLS) connections to the server.",
    "reference": "https://expressjs.com/en/advanced/best-practice-security.html \nhttps://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration \nhttps://www.owasp.org/index.php/Top_10_2017-A5-Security_Misconfiguration",
    "remediation": "Ensure you have enable Strict-Transport-Security header that enforces secure (HTTP over SSL/TLS) connections to the server.",
    "remediationSample": "// with helmet \n\nvar express = require('express'); \nvar app = express(); \nvar helmet = require('helmet'); \n\napp.use(helmet.hsts()); \n\napp.get('/', function(req, res){ \n    res.send(\"<html><body><p>hello world</p><script type='text/javascript'>alert('got you')</script></body><html>\"); \n}); \n\napp.listen(3000);",
    "sample": "var express = require('express'); \nvar app = express(); \n\napp.get('/', function(req, res){ \n    res.send(\"<html><body>hello world<script type='text/javascript'>alert('got you')</script></body></html>\"); \n}); \n\napp.listen(3000);",
    "total": "Number of javascript source codes using express",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "technologies/1020000.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "OWASP",
            "id": "A5-2017",
            "name": "Broken Access Control",
            "reference": "https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control",
            "description": "Restrictions on what authenticated users are allowed to do are often not properly enforced. Attackers can exploit these flaws to access unauthorized functionality and/or data, such as access other users' accounts, view sensitive files, modify other users' data, change access rights, etc."
        },
        {
            "standard": "OWASP",
            "id": "A5-2013",
            "name": "Security Misconfiguration",
            "reference": "https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration",
            "description": "Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date."
        }
    ]
}
