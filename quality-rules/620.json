{
    "id": 620,
    "type": "quality-rule",
    "name": "Avoid base Classes without virtual Destructors",
    "href": "quality-rules/620.json",
    "associatedValueName": "Associated Value",
    "description": "This rule searches for classes that are derived in sub-classes and that do not provide a virtual destructor.",
    "output": "Associated to each C++ class with violations, the Quality Rule provides:\n- Bookmarks for violation patterns found in source code:\n  - Class definition\n  - Non-virtual destructor if any",
    "rationale": "If an object is handled through a pointer to its base class (handled through a generic interface that is certainly a major objective in object-oriented programming), memory and stability problems occur when the object is to be deleted and when the object has been created on the heap with new. If the pointer is to the base class, the compiler can only know to call the base-class version of the destructor during the delete. Any memory clean up or functional actions that must take place when derived classes are deleted will not take place provoking memory leaks, resource losses and stability issues.",
    "reference": "Bruce Eckel's \"Thinking in C++\"\nhttp://www.cs.huji.ac.il/labs/parallel/Docs/C++/Guide/tic0161.html\n\nBruce Eckel's \"Thinking in C++\"\nhttp://www.cs.huji.ac.il/labs/parallel/Docs/C++/Guide/",
    "remediation": "Add a virtual destructor to the base class.",
    "remediationSample": "class CParent\n{\n    CParent() { ... }\n    virtual ~CParent() { ... }\n};\n\nclass CDerived : public CParent\n{\n...\n};",
    "sample": "class CParent\n{\n    CParent() { ... }\n    ~CParent() { ... }\n};\n\nclass CDerived : public CParent\n{\n...\n};",
    "total": "Number of C++ classes",
    "businessCriteria": [
        {
            "id": 60011,
            "name": "Transferability",
            "href": "business-criteria/60011.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        }
    ]
}
