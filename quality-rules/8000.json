{
    "id": 8000,
    "type": "quality-rule",
    "name": "Avoid 'catch-all' statement",
    "href": "quality-rules/8000.json",
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for methods catching all exceptions (i.e. using the 'catch (...)' statement), except for 'main()' functions to catch unknown errors. This rule is compliant with OMG CISQ ASCRM-CWE-396 recommendation.",
    "output": "Associated to each C++ method with violations, the Quality Rule provides:\n  - the number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - catch (...)",
    "rationale": "Directly catching all exceptions (except for 'main()' functions to catch unknown errors) means that the try/catch will process all the exceptions in the same way: 'RuntimeException' will be processed in the same way as application specific exceptions such as 'BankingException' or 'CredentialException'. This will prevent the application from carrying out the specific recovery process that is needed and as a consequence will threaten both application robustness and security. \n\nIn addition, an exception carries some additional information on the error conditions. For example, an exception derived from 'std::exception' contains an error message that is returned by the 'what()' function. In a 'catch(...)', all type information about the exception is lost, as well as all additional data provided with the exception.\n\nThere are only two actions that can be taken after a 'catch(...)':\n- Unconditionally accept the exception, pretending it has never been thrown. This is very bad practice and will most probably produce errors that are very hard to understand and with lots of consequences (for instance, silencing an I/O error may lead to user data loss).\n- Break the normal execution of the program, saying that an unknown error has happened (stop the program, automatically restart the program, put the hardware in safe-mode...). This is usually only useful close to the top level of the program, for instance in the 'main()' function. \n\nOne usage pattern for which 'catch(...)' might seem useful is for doing resource cleanup when an exception is thrown, and then re-throw the exception, trying to emulate the use of 'finally' in C++. However, the usage of \"RAII\":http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization is a preferred solution to resource cleanup, it is safer to use and requires less work from the developer.",
    "remediation": "Except for 'main()' or other top-level functions, always use the appropriate type of catch and specific recovery code.",
    "remediationSample": "try\n{ /*...*/ }\ncatch (SpecificException &e) \n{ /*...*/ }",
    "sample": "try\n{ /*...*/ }\ncatch (...) // <= VIOLATION\n{ /*...*/ }",
    "total": "Number of C++ methods and functions",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        },
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        },
        {
            "id": 1050571,
            "name": "C/C++",
            "href": "technologies/1050571.json"
        }
    ],
    "qualityStandards": [
        {
            "standard": "CISQ",
            "id": "ASCRM-CWE-396",
            "name": "Declaration of Catch for Generic Exception",
            "reference": null,
            "description": null
        }
    ]
}
