{
    "id": 1021036,
    "type": "quality-rule",
    "name": "Avoid using eval",
    "href": "quality-rules/1021036.json",
    "associatedValueName": "Single Value",
    "description": "The eval statement is used to run Python stored in literal strings as code. In almost all cases, it should not be necessary to use it. Because it allows arbitrary code to be run, it also represents a security problem. The rule is compliant with MITRE CWE-95 and OWASP A1 2013, 2017 recommendations.",
    "output": "Line and column for each violation.\nAssociated value => number of violations found",
    "rationale": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
    "remediation": "If possible, refactor your code so that it does not need to use eval() at all.",
    "remediationSample": ">>> import os\n>>> os.mkdir(\"C://New_Folder_1\")\n",
    "sample": ">>> import os\n>>> stat = 'os.mkdir(\"C://New_Folder_1\")'\n>>> eval(stat)\n",
    "total": "Python artifacts",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "technologies/1021000.json"
        }
    ]
}
