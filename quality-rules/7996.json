{
    "id": 7996,
    "type": "quality-rule",
    "name": "Provide a private default Constructor for utility Classes or use free Functions in a Namespace",
    "href": "quality-rules/7996.json",
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for utility classes which do not have any constructors. Utility classes are static classes: all their fields and functions are static and at least one static function must exist. Default constructors are constructors without any parameters. \n\nNote: The following do not prevent a class from being considered as static: \n- Non-static Constructors \n- Destructors \n- Affectation assignment operators \n\nA class containing only protected constructors (instead of private) is not considered as violating the rule.",
    "output": "Associated to each C++ utility class with violations, the Quality Rule provides:\n- the number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - class",
    "rationale": "Utility classes are not meant to be instantiated because all the functionalities they provide are accessible without instantiating the class. Instantiating those classes means that the developer misused the class. It also consumes memory unnecessarily. Providing a private default constructor ensures that the class cannot be instantiated.",
    "remediation": "Two possibilities:\n- Add a private default constructor to ensure that the class can't be instantiated. This constructor only needs to be declared, not defined, since it will never be used.\n- Use a dedicated namespace instead of a utility class in order to classify related functions inside a named entity. \n\nThe namespace solution is usually to be preferred, because:\n- A namespace can be extended to another file\n- A using directive or using declaration can ease the use of functions in the namespace if there is no name conflict\n\nThere are cases when the namespace is not suitable, especially when the class is to be used as a template parameter (for instance, a trait class).",
    "remediationSample": "It is possible to correct this violation by making the utility class non instantiable:\n\nclass MyUtilityClass\n{\npublic:\n    static bool MyUtilityFunction1() \n    {\n        //Do Something Usefull \n        return true;\n    }\n\nprivate :\n    MyUtilityClass(); // FIXED: Avoid instantiation of the class. No definition\n};\n\nOr by using a namespace instead:\n\nnamespace MyUtility {\n\nbool MyUtilityFunction1() \n{\n    //Do Something Usefull \n    return true;\n}\n\n} // namespace MyUtility",
    "sample": "class MyUtilityClass\n{\npublic:\n    static bool MyUtilityFunction1() \n    {\n        //Do Something Usefull \n        return true;\n    }\n};  // VIOLATION",
    "total": "Number of utility classes",
    "businessCriteria": [
        {
            "id": 60014,
            "name": "Efficiency",
            "href": "business-criteria/60014.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
