{
    "id": 1020066,
    "type": "quality-rule",
    "name": "Avoid using Javascript Function constructor",
    "href": "quality-rules/1020066.json",
    "critical": false,
    "maxWeight": 7,
    "description": "Each time [\u2026] the Function constructor is called on a string representing source code, the script engine must start the machinery that converts the source code to executable code. This is usually expensive for performance \u2013 easily a hundred times more expensive than a simple function call, for example. \nAn exception will be made for Function('return this')(); . It is the best way to retrieve the global in both node and web with or without \"use strict\".",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "Using the Function constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.",
    "reference": "https://jsperf.com/function-vs-function/2 \nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
    "remediationSample": "var f1 = function() { \n var x = 1; \n console.log('1'); \n}",
    "sample": "var f2 = new Function('var x = 1;console.log(\"2\");');",
    "total": "Number of Javascript artifacts",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": 1020000,
            "name": "HTML5",
            "href": "technologies/1020000.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
