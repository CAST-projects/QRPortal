{
    "id": 1050004,
    "type": "quality-rule",
    "name": "Avoid using NSPredicate predicateWithFormat",
    "href": "quality-rules/1050004.json",
    "description": "An attacker could access other user information thanks to string injection. Manipulating input, an attacker could fetch more data from the database that was originally intended by the application.\nThe injection could be done in NSPredicate using the methods\npredicateWithFormat:,\npredicateWithFormat:arguments:,\npredicateWithFormat:argumentArray:\nThe injection point will be part of the format string as @\"...%@...\". \nThis rule is compliant with CISQ OMG ASCSM-CWE-134 and ASCSM-CWE-89 recommendations and with OWASP 2016-M7 recommendation",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "An attacker could access other user information thanks to string injection threw the withFormat method. This is why it is highly recommended to avoid the usage of the API",
    "total": "Number of Objective-C artifacts",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        }
    ]
}
