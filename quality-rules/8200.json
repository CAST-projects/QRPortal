{
    "id": 8200,
    "type": "quality-rule",
    "name": "Avoid using NSString stringWithFormat on behalf of NSURL instance",
    "href": "quality-rules/8200.json",
    "description": "An attacker can tamper with the URL and point it to an unintended server. Sensitive information may then be transmitted to the attacker's server. \nThe injection could be done in NSString using the methods \nstringWithFormat:, \ninitWithFormat: \nand used when instanciating through NSURL URLWithString. \nThis rule is compliant with CISQ OMG ASCSM-CWE-134 recommendation and with OWASP 2016-M7 recommendation",
    "output": "Line and column for each violation \nAssociated value => number of violations found",
    "rationale": "An attacker could access other user information thanks to string injection threw the withFormat method. This is why it is highly recommended to avoid the usage of the API",
    "reference": "https://www.owasp.org/index.php/Mobile_Top_10_2014-M7\n\nhttps://developer.apple.com/library/mac/documentation/Security/Conceptual/SecureCodingGuide/Articles/ValidatingInput.html#//apple_ref/doc/uid/TP40007246-SW3",
    "remediation": "Usage of unstructured, strictly structured, and weakly structured data with explicit lengths are less likely to pose security risks",
    "total": "Number of Objective-C artifacts",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        }
    ]
}
