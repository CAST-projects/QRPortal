{
    "id": 8004,
    "type": "quality-rule",
    "name": "Avoid using 'delete this'",
    "href": "quality-rules/8004.json",
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for C++ Methods/Constructors/Destructors using 'delete this'.",
    "output": "Associated to each C++ Method with violations, the Quality Rule provides:\n- The number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - 'delete this'",
    "rationale": "'delete this' leaves the current instance in a \"dangling\" state, which may lead to undefined behavior. 'delete this' is only valid if you can guarantee that the instance members will no longer be accessed. Furthermore, 'delete this' is only valid if you can guarantee the object was allocated using the 'new' operator.\n\nThere are acceptable patterns of code where delete this is used. For instance, when a class is always dynamically allocated, only referenced by a manager, and unregisters itself from the manager on destruction. It is possible for an instance of the class to \"commit suicide\" by using 'delete this' when it discovers it is no longer needed. However this pattern and its implication are usually not well understood, and other solutions are preferred.",
    "reference": "\"CERT: Avoid deleting this\":https://www.securecoding.cert.org/confluence/display/cplusplus/OOP05-CPP.+Avoid+deleting+this",
    "remediation": "The simplest solution is not to use 'delete this' at all. Objects allocated on the stack have their destructors invoked when the object goes out of scope.",
    "sample": "class SomeClass \n{\npublic:\n    void doSomething();\n    void destroy();\n    // ...\n};\n\nvoid SomeClass::destroy() \n{\n    delete this;  // Dangerous!!\n}\n\n// ...\n\nSomeClass sc;\n// ...\nsc.destroy(); // Undefined behavior",
    "total": "Number of C++ Methods/Constructors/Destructors",
    "businessCriteria": [
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 20140522,
            "name": "Green Stuff",
            "href": "business-criteria/20140522.json"
        }
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        },
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        },
        {
            "id": 1050571,
            "name": "C/C++",
            "href": "technologies/1050571.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
