{
    "id": 7802,
    "type": "quality-rule",
    "name": "Avoid Classes with a High Depth of Inheritance Tree",
    "href": "quality-rules/7802.json",
    "associatedValueName": "Associated Value",
    "description": "This rule searches for Classes with a High Depth of Inheritance Tree (DIT greater than X+1).\nThis means that the inheritance tree should have at most X levels. Depth of Inheritance Tree (DIT) is the maximum length of a path from a class to a root class  (excluding interfaces) in the inheritance structure of a system. DIT measures how many super-classes can affect a class.",
    "output": "Associated to each artifact with violations, the Quality Rule provides: \n- The Depth of Inheritance Tree",
    "rationale": "Changing a class requires prior understanding, which, in turn, is more complicated for classes with many methods. Classes that are deep down in the classes hierarchy potentially inherit many methods from super-classes. Moreover, the definitions of inherited methods are not local to the class making it even harder to understand it.\n\nComplete testing requires coverage of all execution paths. The number of possible execution paths of a class increases with the number of methods and their control flow complexity. Classes that are deep down in the classes hierarchy potentially inherit many methods from super-classes. Due to late binding, super-class methods need to be tested again in the sub-class context. This makes it potentially harder to test classes deep down in the classes (interfaces) hierarchy.\n\nTechnical or framework classes which are evolving and will not be changed often should not be concerned by this rule.",
    "reference": "A Metrics Suite for Object Oriented Design\nChidamber, S.R. and C.F. Kemerer\nIEEE Transactions on Software Engineering, 1994",
    "remediation": "Review the design of the Class hierarchy.",
    "total": "Number of Classes",
    "businessCriteria": [
        {
            "id": 60011,
            "name": "Transferability",
            "href": "business-criteria/60011.json"
        },
        {
            "id": 60012,
            "name": "Changeability",
            "href": "business-criteria/60012.json"
        },
        {
            "id": 60013,
            "name": "Robustness",
            "href": "business-criteria/60013.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": -15,
            "name": "ABAP",
            "href": "technologies/-15.json"
        },
        {
            "id": -9,
            "name": "Visual Basic",
            "href": "technologies/-9.json"
        },
        {
            "id": -8,
            "name": "PowerBuilder",
            "href": "technologies/-8.json"
        },
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        },
        {
            "id": 138383,
            "name": "C#",
            "href": "technologies/138383.json"
        },
        {
            "id": 138385,
            "name": "VB.NET",
            "href": "technologies/138385.json"
        },
        {
            "id": 140029,
            "name": "JEE",
            "href": "technologies/140029.json"
        },
        {
            "id": 141901,
            "name": ".NET (Legacy Analyzer)",
            "href": "technologies/141901.json"
        },
        {
            "id": 1050001,
            "name": "Objective-C",
            "href": "technologies/1050001.json"
        },
        {
            "id": 1050571,
            "name": "C/C++",
            "href": "technologies/1050571.json"
        }
    ]
}
