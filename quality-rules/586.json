{
    "id": 586,
    "type": "quality-rule",
    "name": "Avoid inline Constructors and Destructors",
    "href": "quality-rules/586.json",
    "associatedValueName": "Number of violation patterns",
    "description": "This rule searches for C++ constructors and destructors that are declared as inline methods.",
    "output": "Associated to each C++ constructor and destructor with violations, the Quality Rule provides:\n  - number of violation patterns\n- Bookmarks for violation patterns found in the source code:\n  - constructor/destructor",
    "rationale": "The normal reason for declaring a function inline is to improve its performance.\nSmall functions, such as access functions, which return the value of a member of the class should normally be inline.\nCorrect usage of inline functions may also lead to reduced size of code.\nWarning: functions, which invoke other inline functions, often become too complex for the complier to be able to make them inline despite their apparent smallness.\nThis problem is especially common with constructors and destructors. A constructor always invokes the constructors of its base classes and member data before executing its own code. Always avoid inline constructors and destructors!",
    "reference": "http://www.doc.ic.ac.uk/lab/cplus/c++.rules/chap7.html",
    "remediation": "Declare constructors and destructors as non-inline methods.",
    "total": "Number of C++ constructors and destructors",
    "businessCriteria": [
        
    ],
    "technologies": [
        {
            "id": -3,
            "name": "C++",
            "href": "technologies/-3.json"
        }
    ]
}
