{
    "id": 1021038,
    "type": "quality-rule",
    "name": "Avoid using exec",
    "href": "quality-rules/1021038.json",
    "critical": true,
    "associatedValueName": "Single Value",
    "description": "The exec statement is used to run Python stored in literal strings as code. In almost all cases, it should not be necessary to use it. Because it allows arbitrary code to be run, it also represents a security problem. The rule is compliant with MITRE CWE-95 and OWASP A1 2013, 2017 recommendations.",
    "output": "Line and column for each violation.\nAssociated value => number of violations found",
    "rationale": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"exec\").",
    "reference": "http://cwe.mitre.org/data/definitions/95.html https://www.owasp.org/index.php/Top_10_2013-A1-Injection ",
    "remediation": "In most scenarios, you can easily refactor the code to avoid the use of exec.",
    "remediationSample": ">>> def print_hello_world()\n>>>     logging.debug(\"Hello, World!\")\n>>> print_hello_world()\n",
    "sample": ">>> s = \"logging.debug(\\\"Hello, World!\\\")\"\n>>> exec s\n",
    "total": "Python artifacts",
    "businessCriteria": [
        {
            "id": 60016,
            "name": "Security",
            "href": "business-criteria/60016.json"
        },
        {
            "id": 66031,
            "name": "Programming Practices",
            "href": "business-criteria/66031.json"
        }
    ],
    "technologies": [
        {
            "id": 1021000,
            "name": "Python",
            "href": "technologies/1021000.json"
        }
    ],
    "qualityStandards": [
        
    ]
}
